### YamlMime:ManagedReference
items:
- uid: Mono.Terminal.UnixMainLoop
  id: UnixMainLoop
  children:
  - Mono.Terminal.UnixMainLoop.#ctor
  - Mono.Terminal.UnixMainLoop.AddWatch(System.Int32,Mono.Terminal.UnixMainLoop.Condition,System.Func{Mono.Terminal.MainLoop,System.Boolean})
  - Mono.Terminal.UnixMainLoop.RemoveWatch(System.Object)
  - Mono.Terminal.UnixMainLoop.Mono#Terminal#IMainLoopDriver#EventsPending(System.Boolean)
  - Mono.Terminal.UnixMainLoop.Mono#Terminal#IMainLoopDriver#MainIteration
  - Mono.Terminal.UnixMainLoop.Mono#Terminal#IMainLoopDriver#Setup(Mono.Terminal.MainLoop)
  - Mono.Terminal.UnixMainLoop.Mono#Terminal#IMainLoopDriver#Wakeup
  langs:
  - csharp
  name: UnixMainLoop
  nameWithType: UnixMainLoop
  fullName: Mono.Terminal.UnixMainLoop
  type: Class
  assemblies:
  - Terminal.Gui
  namespace: Mono.Terminal
  summary: Unix main loop, suitable for using on Posix systems
  remarks: >-
    In addition to the general functions of the mainloop, the Unix version
                can watch file descriptors using the AddWatch methods.
  syntax:
    content: 'public class UnixMainLoop : Mono.Terminal.IMainLoopDriver'
  inheritance:
  - System.Object
  implements:
  - Mono.Terminal.IMainLoopDriver
  inheritedMembers: []
- uid: Mono.Terminal.UnixMainLoop.#ctor
  id: '#ctor'
  parent: Mono.Terminal.UnixMainLoop
  langs:
  - csharp
  name: UnixMainLoop()
  nameWithType: UnixMainLoop.UnixMainLoop()
  fullName: UnixMainLoop.UnixMainLoop()
  type: Constructor
  assemblies:
  - Terminal.Gui
  namespace: Mono.Terminal
  syntax:
    content: public UnixMainLoop ();
    parameters: []
  overload: Mono.Terminal.UnixMainLoop.#ctor*
  exceptions: []
- uid: Mono.Terminal.UnixMainLoop.AddWatch(System.Int32,Mono.Terminal.UnixMainLoop.Condition,System.Func{Mono.Terminal.MainLoop,System.Boolean})
  id: AddWatch(System.Int32,Mono.Terminal.UnixMainLoop.Condition,System.Func{Mono.Terminal.MainLoop,System.Boolean})
  parent: Mono.Terminal.UnixMainLoop
  langs:
  - csharp
  name: AddWatch(Int32, UnixMainLoop+Condition, Func<MainLoop,Boolean>)
  nameWithType: UnixMainLoop.AddWatch(Int32, UnixMainLoop+Condition, Func<MainLoop,Boolean>)
  fullName: UnixMainLoop.AddWatch(Int32, UnixMainLoop+Condition, Func<MainLoop,Boolean>)
  type: Method
  assemblies:
  - Terminal.Gui
  namespace: Mono.Terminal
  summary: Watches a file descriptor for activity.
  remarks: "When the condition is met, the provided callback\n              is invoked.  If the callback returns false, the\n              watch is automatically removed.\n            \n              The return value is a token that represents this watch, you can\n              use this token to remove the watch by calling RemoveWatch."
  syntax:
    content: public object AddWatch (int fileDescriptor, Mono.Terminal.UnixMainLoop.Condition condition, Func<Mono.Terminal.MainLoop,bool> callback);
    parameters:
    - id: fileDescriptor
      type: System.Int32
      description: To be added.
    - id: condition
      type: Mono.Terminal.UnixMainLoop+Condition
      description: To be added.
    - id: callback
      type: System.Func{Mono.Terminal.MainLoop,System.Boolean}
      description: To be added.
    return:
      type: System.Object
      description: To be added.
  overload: Mono.Terminal.UnixMainLoop.AddWatch*
  exceptions: []
- uid: Mono.Terminal.UnixMainLoop.RemoveWatch(System.Object)
  id: RemoveWatch(System.Object)
  parent: Mono.Terminal.UnixMainLoop
  langs:
  - csharp
  name: RemoveWatch(Object)
  nameWithType: UnixMainLoop.RemoveWatch(Object)
  fullName: UnixMainLoop.RemoveWatch(Object)
  type: Method
  assemblies:
  - Terminal.Gui
  namespace: Mono.Terminal
  summary: Removes an active watch from the mainloop.
  remarks: The token parameter is the value returned from AddWatch
  syntax:
    content: public void RemoveWatch (object token);
    parameters:
    - id: token
      type: System.Object
      description: To be added.
  overload: Mono.Terminal.UnixMainLoop.RemoveWatch*
  exceptions: []
- uid: Mono.Terminal.UnixMainLoop.Mono#Terminal#IMainLoopDriver#EventsPending(System.Boolean)
  id: Mono#Terminal#IMainLoopDriver#EventsPending(System.Boolean)
  isEii: true
  parent: Mono.Terminal.UnixMainLoop
  langs:
  - csharp
  name: IMainLoopDriver.EventsPending(Boolean)
  nameWithType: UnixMainLoop.IMainLoopDriver.EventsPending(Boolean)
  fullName: UnixMainLoop.IMainLoopDriver.EventsPending(Boolean)
  type: Method
  assemblies:
  - Terminal.Gui
  namespace: Mono.Terminal
  syntax:
    content: bool IMainLoopDriver.EventsPending (bool wait);
    parameters:
    - id: wait
      type: System.Boolean
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: Mono.Terminal.UnixMainLoop.Mono#Terminal#IMainLoopDriver#EventsPending*
  exceptions: []
- uid: Mono.Terminal.UnixMainLoop.Mono#Terminal#IMainLoopDriver#MainIteration
  id: Mono#Terminal#IMainLoopDriver#MainIteration
  isEii: true
  parent: Mono.Terminal.UnixMainLoop
  langs:
  - csharp
  name: IMainLoopDriver.MainIteration()
  nameWithType: UnixMainLoop.IMainLoopDriver.MainIteration()
  fullName: UnixMainLoop.IMainLoopDriver.MainIteration()
  type: Method
  assemblies:
  - Terminal.Gui
  namespace: Mono.Terminal
  syntax:
    content: void IMainLoopDriver.MainIteration ();
    parameters: []
  overload: Mono.Terminal.UnixMainLoop.Mono#Terminal#IMainLoopDriver#MainIteration*
  exceptions: []
- uid: Mono.Terminal.UnixMainLoop.Mono#Terminal#IMainLoopDriver#Setup(Mono.Terminal.MainLoop)
  id: Mono#Terminal#IMainLoopDriver#Setup(Mono.Terminal.MainLoop)
  isEii: true
  parent: Mono.Terminal.UnixMainLoop
  langs:
  - csharp
  name: IMainLoopDriver.Setup(MainLoop)
  nameWithType: UnixMainLoop.IMainLoopDriver.Setup(MainLoop)
  fullName: UnixMainLoop.IMainLoopDriver.Setup(MainLoop)
  type: Method
  assemblies:
  - Terminal.Gui
  namespace: Mono.Terminal
  syntax:
    content: void IMainLoopDriver.Setup (Mono.Terminal.MainLoop mainLoop);
    parameters:
    - id: mainLoop
      type: Mono.Terminal.MainLoop
      description: To be added.
  overload: Mono.Terminal.UnixMainLoop.Mono#Terminal#IMainLoopDriver#Setup*
  exceptions: []
- uid: Mono.Terminal.UnixMainLoop.Mono#Terminal#IMainLoopDriver#Wakeup
  id: Mono#Terminal#IMainLoopDriver#Wakeup
  isEii: true
  parent: Mono.Terminal.UnixMainLoop
  langs:
  - csharp
  name: IMainLoopDriver.Wakeup()
  nameWithType: UnixMainLoop.IMainLoopDriver.Wakeup()
  fullName: UnixMainLoop.IMainLoopDriver.Wakeup()
  type: Method
  assemblies:
  - Terminal.Gui
  namespace: Mono.Terminal
  syntax:
    content: void IMainLoopDriver.Wakeup ();
    parameters: []
  overload: Mono.Terminal.UnixMainLoop.Mono#Terminal#IMainLoopDriver#Wakeup*
  exceptions: []
references:
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Mono.Terminal.UnixMainLoop.#ctor
  parent: Mono.Terminal.UnixMainLoop
  isExternal: false
  name: UnixMainLoop()
  nameWithType: UnixMainLoop.UnixMainLoop()
  fullName: UnixMainLoop.UnixMainLoop()
- uid: Mono.Terminal.UnixMainLoop.AddWatch(System.Int32,Mono.Terminal.UnixMainLoop.Condition,System.Func{Mono.Terminal.MainLoop,System.Boolean})
  parent: Mono.Terminal.UnixMainLoop
  isExternal: false
  name: AddWatch(Int32, UnixMainLoop+Condition, Func<MainLoop,Boolean>)
  nameWithType: UnixMainLoop.AddWatch(Int32, UnixMainLoop+Condition, Func<MainLoop,Boolean>)
  fullName: UnixMainLoop.AddWatch(Int32, UnixMainLoop+Condition, Func<MainLoop,Boolean>)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Mono.Terminal.UnixMainLoop
  parent: Mono.Terminal
  isExternal: false
  name: UnixMainLoop
  nameWithType: UnixMainLoop
  fullName: Mono.Terminal.UnixMainLoop+Condition
- uid: System.Func`2
  name: Func
  nameWithType: Func
  fullName: System.Func
- uid: Mono.Terminal.MainLoop
  name: MainLoop
  nameWithType: MainLoop
  fullName: Mono.Terminal.MainLoop
- uid: System.Boolean
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Func{Mono.Terminal.MainLoop,System.Boolean}
  parent: System
  isExternal: true
  name: Func<MainLoop,Boolean>
  nameWithType: Func<MainLoop,Boolean>
  fullName: System.Func<Mono.Terminal.MainLoop,System.Boolean>
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
  - name: <
    nameWithType: <
    fullName: <
  - uid: Mono.Terminal.MainLoop
    name: MainLoop
    nameWithType: MainLoop
    fullName: Mono.Terminal.MainLoop
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Mono.Terminal.UnixMainLoop.RemoveWatch(System.Object)
  parent: Mono.Terminal.UnixMainLoop
  isExternal: false
  name: RemoveWatch(Object)
  nameWithType: UnixMainLoop.RemoveWatch(Object)
  fullName: UnixMainLoop.RemoveWatch(Object)
- uid: Mono.Terminal.UnixMainLoop.Mono#Terminal#IMainLoopDriver#EventsPending(System.Boolean)
  parent: Mono.Terminal.UnixMainLoop
  isExternal: false
  name: IMainLoopDriver.EventsPending(Boolean)
  nameWithType: UnixMainLoop.IMainLoopDriver.EventsPending(Boolean)
  fullName: UnixMainLoop.IMainLoopDriver.EventsPending(Boolean)
- uid: Mono.Terminal.UnixMainLoop.Mono#Terminal#IMainLoopDriver#MainIteration
  parent: Mono.Terminal.UnixMainLoop
  isExternal: false
  name: IMainLoopDriver.MainIteration()
  nameWithType: UnixMainLoop.IMainLoopDriver.MainIteration()
  fullName: UnixMainLoop.IMainLoopDriver.MainIteration()
- uid: Mono.Terminal.UnixMainLoop.Mono#Terminal#IMainLoopDriver#Setup(Mono.Terminal.MainLoop)
  parent: Mono.Terminal.UnixMainLoop
  isExternal: false
  name: IMainLoopDriver.Setup(MainLoop)
  nameWithType: UnixMainLoop.IMainLoopDriver.Setup(MainLoop)
  fullName: UnixMainLoop.IMainLoopDriver.Setup(MainLoop)
- uid: Mono.Terminal.UnixMainLoop.Mono#Terminal#IMainLoopDriver#Wakeup
  parent: Mono.Terminal.UnixMainLoop
  isExternal: false
  name: IMainLoopDriver.Wakeup()
  nameWithType: UnixMainLoop.IMainLoopDriver.Wakeup()
  fullName: UnixMainLoop.IMainLoopDriver.Wakeup()
- uid: Mono.Terminal.UnixMainLoop.#ctor*
  parent: Mono.Terminal.UnixMainLoop
  isExternal: false
  name: UnixMainLoop
  nameWithType: UnixMainLoop.UnixMainLoop
  fullName: UnixMainLoop.UnixMainLoop
- uid: Mono.Terminal.UnixMainLoop.AddWatch*
  parent: Mono.Terminal.UnixMainLoop
  isExternal: false
  name: AddWatch
  nameWithType: UnixMainLoop.AddWatch
  fullName: UnixMainLoop.AddWatch
- uid: Mono.Terminal.UnixMainLoop.RemoveWatch*
  parent: Mono.Terminal.UnixMainLoop
  isExternal: false
  name: RemoveWatch
  nameWithType: UnixMainLoop.RemoveWatch
  fullName: UnixMainLoop.RemoveWatch
- uid: Mono.Terminal.UnixMainLoop.Mono#Terminal#IMainLoopDriver#EventsPending*
  parent: Mono.Terminal.UnixMainLoop
  isExternal: false
  name: Mono.Terminal.IMainLoopDriver.EventsPending
  nameWithType: UnixMainLoop.Mono.Terminal.IMainLoopDriver.EventsPending
  fullName: UnixMainLoop.Mono.Terminal.IMainLoopDriver.EventsPending
- uid: Mono.Terminal.UnixMainLoop.Mono#Terminal#IMainLoopDriver#MainIteration*
  parent: Mono.Terminal.UnixMainLoop
  isExternal: false
  name: Mono.Terminal.IMainLoopDriver.MainIteration
  nameWithType: UnixMainLoop.Mono.Terminal.IMainLoopDriver.MainIteration
  fullName: UnixMainLoop.Mono.Terminal.IMainLoopDriver.MainIteration
- uid: Mono.Terminal.UnixMainLoop.Mono#Terminal#IMainLoopDriver#Setup*
  parent: Mono.Terminal.UnixMainLoop
  isExternal: false
  name: Mono.Terminal.IMainLoopDriver.Setup
  nameWithType: UnixMainLoop.Mono.Terminal.IMainLoopDriver.Setup
  fullName: UnixMainLoop.Mono.Terminal.IMainLoopDriver.Setup
- uid: Mono.Terminal.UnixMainLoop.Mono#Terminal#IMainLoopDriver#Wakeup*
  parent: Mono.Terminal.UnixMainLoop
  isExternal: false
  name: Mono.Terminal.IMainLoopDriver.Wakeup
  nameWithType: UnixMainLoop.Mono.Terminal.IMainLoopDriver.Wakeup
  fullName: UnixMainLoop.Mono.Terminal.IMainLoopDriver.Wakeup
- uid: Mono.Terminal.IMainLoopDriver
  parent: Mono.Terminal
  isExternal: false
  name: IMainLoopDriver
  nameWithType: IMainLoopDriver
  fullName: Mono.Terminal.IMainLoopDriver
