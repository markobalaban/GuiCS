### YamlMime:ManagedReference
items:
- uid: Mono.Terminal.MainLoop
  id: MainLoop
  children:
  - Mono.Terminal.MainLoop.#ctor
  - Mono.Terminal.MainLoop.AddIdle(System.Func{System.Boolean})
  - Mono.Terminal.MainLoop.AddTimeout(System.TimeSpan,System.Func{Mono.Terminal.MainLoop,System.Boolean})
  - Mono.Terminal.MainLoop.AddWatch(System.Int32,Mono.Terminal.MainLoop.Condition,System.Func{Mono.Terminal.MainLoop,System.Boolean})
  - Mono.Terminal.MainLoop.EventsPending(System.Boolean)
  - Mono.Terminal.MainLoop.Invoke(System.Action)
  - Mono.Terminal.MainLoop.MainIteration
  - Mono.Terminal.MainLoop.RemoveIdle(System.Func{System.Boolean})
  - Mono.Terminal.MainLoop.RemoveTimeout(System.Object)
  - Mono.Terminal.MainLoop.RemoveWatch(System.Object)
  - Mono.Terminal.MainLoop.Run
  - Mono.Terminal.MainLoop.Stop
  langs:
  - csharp
  name: MainLoop
  nameWithType: MainLoop
  fullName: Mono.Terminal.MainLoop
  type: Class
  assemblies:
  - Terminal.Gui
  namespace: Mono.Terminal
  summary: >-
    Simple main loop implementation that can be used to monitor
                  file descriptor, run timers and idle handlers.
  syntax:
    content: public class MainLoop
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
- uid: Mono.Terminal.MainLoop.#ctor
  id: '#ctor'
  parent: Mono.Terminal.MainLoop
  langs:
  - csharp
  name: MainLoop()
  nameWithType: MainLoop.MainLoop()
  fullName: MainLoop.MainLoop()
  type: Constructor
  assemblies:
  - Terminal.Gui
  namespace: Mono.Terminal
  summary: Default constructor
  syntax:
    content: public MainLoop ();
    parameters: []
  overload: Mono.Terminal.MainLoop.#ctor*
  exceptions: []
- uid: Mono.Terminal.MainLoop.AddIdle(System.Func{System.Boolean})
  id: AddIdle(System.Func{System.Boolean})
  parent: Mono.Terminal.MainLoop
  langs:
  - csharp
  name: AddIdle(Func<Boolean>)
  nameWithType: MainLoop.AddIdle(Func<Boolean>)
  fullName: MainLoop.AddIdle(Func<Boolean>)
  type: Method
  assemblies:
  - Terminal.Gui
  namespace: Mono.Terminal
  summary: Executes the specified @idleHandler on the idle loop.  The return value is a token to remove it.
  syntax:
    content: public Func<bool> AddIdle (Func<bool> idleHandler);
    parameters:
    - id: idleHandler
      type: System.Func{System.Boolean}
      description: To be added.
    return:
      type: System.Func{System.Boolean}
      description: To be added.
  overload: Mono.Terminal.MainLoop.AddIdle*
  exceptions: []
- uid: Mono.Terminal.MainLoop.AddTimeout(System.TimeSpan,System.Func{Mono.Terminal.MainLoop,System.Boolean})
  id: AddTimeout(System.TimeSpan,System.Func{Mono.Terminal.MainLoop,System.Boolean})
  parent: Mono.Terminal.MainLoop
  langs:
  - csharp
  name: AddTimeout(TimeSpan, Func<MainLoop,Boolean>)
  nameWithType: MainLoop.AddTimeout(TimeSpan, Func<MainLoop,Boolean>)
  fullName: MainLoop.AddTimeout(TimeSpan, Func<MainLoop,Boolean>)
  type: Method
  assemblies:
  - Terminal.Gui
  namespace: Mono.Terminal
  summary: Adds a timeout to the mainloop.
  remarks: "When time time specified passes, the callback will be invoked.\n               If the callback returns true, the timeout will be reset, repeating\n               the invocation. If it returns false, the timeout will stop.\n            \n               The returned value is a token that can be used to stop the timeout\n               by calling RemoveTimeout."
  syntax:
    content: public object AddTimeout (TimeSpan time, Func<Mono.Terminal.MainLoop,bool> callback);
    parameters:
    - id: time
      type: System.TimeSpan
      description: To be added.
    - id: callback
      type: System.Func{Mono.Terminal.MainLoop,System.Boolean}
      description: To be added.
    return:
      type: System.Object
      description: To be added.
  overload: Mono.Terminal.MainLoop.AddTimeout*
  exceptions: []
- uid: Mono.Terminal.MainLoop.AddWatch(System.Int32,Mono.Terminal.MainLoop.Condition,System.Func{Mono.Terminal.MainLoop,System.Boolean})
  id: AddWatch(System.Int32,Mono.Terminal.MainLoop.Condition,System.Func{Mono.Terminal.MainLoop,System.Boolean})
  parent: Mono.Terminal.MainLoop
  langs:
  - csharp
  name: AddWatch(Int32, MainLoop+Condition, Func<MainLoop,Boolean>)
  nameWithType: MainLoop.AddWatch(Int32, MainLoop+Condition, Func<MainLoop,Boolean>)
  fullName: MainLoop.AddWatch(Int32, MainLoop+Condition, Func<MainLoop,Boolean>)
  type: Method
  assemblies:
  - Terminal.Gui
  namespace: Mono.Terminal
  summary: Watches a file descriptor for activity.
  remarks: "When the condition is met, the provided callback\n              is invoked.  If the callback returns false, the\n              watch is automatically removed.\n            \n              The return value is a token that represents this watch, you can\n              use this token to remove the watch by calling RemoveWatch."
  syntax:
    content: public object AddWatch (int fileDescriptor, Mono.Terminal.MainLoop.Condition condition, Func<Mono.Terminal.MainLoop,bool> callback);
    parameters:
    - id: fileDescriptor
      type: System.Int32
      description: To be added.
    - id: condition
      type: Mono.Terminal.MainLoop+Condition
      description: To be added.
    - id: callback
      type: System.Func{Mono.Terminal.MainLoop,System.Boolean}
      description: To be added.
    return:
      type: System.Object
      description: To be added.
  overload: Mono.Terminal.MainLoop.AddWatch*
  exceptions: []
- uid: Mono.Terminal.MainLoop.EventsPending(System.Boolean)
  id: EventsPending(System.Boolean)
  parent: Mono.Terminal.MainLoop
  langs:
  - csharp
  name: EventsPending(Boolean)
  nameWithType: MainLoop.EventsPending(Boolean)
  fullName: MainLoop.EventsPending(Boolean)
  type: Method
  assemblies:
  - Terminal.Gui
  namespace: Mono.Terminal
  summary: Determines whether there are pending events to be processed.
  remarks: >-
    You can use this method if you want to probe if events are pending.
                  Typically used if you need to flush the input queue while still
                  running some of your own code in your main thread.
  syntax:
    content: public bool EventsPending (bool wait = false);
    parameters:
    - id: wait
      type: System.Boolean
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: Mono.Terminal.MainLoop.EventsPending*
  exceptions: []
- uid: Mono.Terminal.MainLoop.Invoke(System.Action)
  id: Invoke(System.Action)
  parent: Mono.Terminal.MainLoop
  langs:
  - csharp
  name: Invoke(Action)
  nameWithType: MainLoop.Invoke(Action)
  fullName: MainLoop.Invoke(Action)
  type: Method
  assemblies:
  - Terminal.Gui
  namespace: Mono.Terminal
  summary: Runs @action on the thread that is processing events
  syntax:
    content: public void Invoke (Action action);
    parameters:
    - id: action
      type: System.Action
      description: To be added.
  overload: Mono.Terminal.MainLoop.Invoke*
  exceptions: []
- uid: Mono.Terminal.MainLoop.MainIteration
  id: MainIteration
  parent: Mono.Terminal.MainLoop
  langs:
  - csharp
  name: MainIteration()
  nameWithType: MainLoop.MainIteration()
  fullName: MainLoop.MainIteration()
  type: Method
  assemblies:
  - Terminal.Gui
  namespace: Mono.Terminal
  summary: Runs one iteration of timers and file watches
  remarks: "You use this to process all pending events (timers, idle handlers and file watches).\n            \n               You can use it like this:\n                 while (main.EvensPending ()) MainIteration ();"
  syntax:
    content: public void MainIteration ();
    parameters: []
  overload: Mono.Terminal.MainLoop.MainIteration*
  exceptions: []
- uid: Mono.Terminal.MainLoop.RemoveIdle(System.Func{System.Boolean})
  id: RemoveIdle(System.Func{System.Boolean})
  parent: Mono.Terminal.MainLoop
  langs:
  - csharp
  name: RemoveIdle(Func<Boolean>)
  nameWithType: MainLoop.RemoveIdle(Func<Boolean>)
  fullName: MainLoop.RemoveIdle(Func<Boolean>)
  type: Method
  assemblies:
  - Terminal.Gui
  namespace: Mono.Terminal
  summary: Removes the specified idleHandler from processing.
  syntax:
    content: public void RemoveIdle (Func<bool> idleHandler);
    parameters:
    - id: idleHandler
      type: System.Func{System.Boolean}
      description: To be added.
  overload: Mono.Terminal.MainLoop.RemoveIdle*
  exceptions: []
- uid: Mono.Terminal.MainLoop.RemoveTimeout(System.Object)
  id: RemoveTimeout(System.Object)
  parent: Mono.Terminal.MainLoop
  langs:
  - csharp
  name: RemoveTimeout(Object)
  nameWithType: MainLoop.RemoveTimeout(Object)
  fullName: MainLoop.RemoveTimeout(Object)
  type: Method
  assemblies:
  - Terminal.Gui
  namespace: Mono.Terminal
  summary: Removes a previously scheduled timeout
  remarks: The token parameter is the value returned by AddTimeout.
  syntax:
    content: public void RemoveTimeout (object token);
    parameters:
    - id: token
      type: System.Object
      description: To be added.
  overload: Mono.Terminal.MainLoop.RemoveTimeout*
  exceptions: []
- uid: Mono.Terminal.MainLoop.RemoveWatch(System.Object)
  id: RemoveWatch(System.Object)
  parent: Mono.Terminal.MainLoop
  langs:
  - csharp
  name: RemoveWatch(Object)
  nameWithType: MainLoop.RemoveWatch(Object)
  fullName: MainLoop.RemoveWatch(Object)
  type: Method
  assemblies:
  - Terminal.Gui
  namespace: Mono.Terminal
  summary: Removes an active watch from the mainloop.
  remarks: The token parameter is the value returned from AddWatch
  syntax:
    content: public void RemoveWatch (object token);
    parameters:
    - id: token
      type: System.Object
      description: To be added.
  overload: Mono.Terminal.MainLoop.RemoveWatch*
  exceptions: []
- uid: Mono.Terminal.MainLoop.Run
  id: Run
  parent: Mono.Terminal.MainLoop
  langs:
  - csharp
  name: Run()
  nameWithType: MainLoop.Run()
  fullName: MainLoop.Run()
  type: Method
  assemblies:
  - Terminal.Gui
  namespace: Mono.Terminal
  summary: Runs the mainloop.
  syntax:
    content: public void Run ();
    parameters: []
  overload: Mono.Terminal.MainLoop.Run*
  exceptions: []
- uid: Mono.Terminal.MainLoop.Stop
  id: Stop
  parent: Mono.Terminal.MainLoop
  langs:
  - csharp
  name: Stop()
  nameWithType: MainLoop.Stop()
  fullName: MainLoop.Stop()
  type: Method
  assemblies:
  - Terminal.Gui
  namespace: Mono.Terminal
  summary: Stops the mainloop.
  syntax:
    content: public void Stop ();
    parameters: []
  overload: Mono.Terminal.MainLoop.Stop*
  exceptions: []
references:
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Mono.Terminal.MainLoop.#ctor
  parent: Mono.Terminal.MainLoop
  isExternal: false
  name: MainLoop()
  nameWithType: MainLoop.MainLoop()
  fullName: MainLoop.MainLoop()
- uid: Mono.Terminal.MainLoop.AddIdle(System.Func{System.Boolean})
  parent: Mono.Terminal.MainLoop
  isExternal: false
  name: AddIdle(Func<Boolean>)
  nameWithType: MainLoop.AddIdle(Func<Boolean>)
  fullName: MainLoop.AddIdle(Func<Boolean>)
- uid: System.Func`1
  name: Func
  nameWithType: Func
  fullName: System.Func
- uid: System.Boolean
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Func{System.Boolean}
  parent: System
  isExternal: true
  name: Func<Boolean>
  nameWithType: Func<Boolean>
  fullName: System.Func<System.Boolean>
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Mono.Terminal.MainLoop.AddTimeout(System.TimeSpan,System.Func{Mono.Terminal.MainLoop,System.Boolean})
  parent: Mono.Terminal.MainLoop
  isExternal: false
  name: AddTimeout(TimeSpan, Func<MainLoop,Boolean>)
  nameWithType: MainLoop.AddTimeout(TimeSpan, Func<MainLoop,Boolean>)
  fullName: MainLoop.AddTimeout(TimeSpan, Func<MainLoop,Boolean>)
- uid: System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Func`2
  name: Func
  nameWithType: Func
  fullName: System.Func
- uid: Mono.Terminal.MainLoop
  name: MainLoop
  nameWithType: MainLoop
  fullName: Mono.Terminal.MainLoop
- uid: System.Func{Mono.Terminal.MainLoop,System.Boolean}
  parent: System
  isExternal: true
  name: Func<MainLoop,Boolean>
  nameWithType: Func<MainLoop,Boolean>
  fullName: System.Func<Mono.Terminal.MainLoop,System.Boolean>
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
  - name: <
    nameWithType: <
    fullName: <
  - uid: Mono.Terminal.MainLoop
    name: MainLoop
    nameWithType: MainLoop
    fullName: Mono.Terminal.MainLoop
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Mono.Terminal.MainLoop.AddWatch(System.Int32,Mono.Terminal.MainLoop.Condition,System.Func{Mono.Terminal.MainLoop,System.Boolean})
  parent: Mono.Terminal.MainLoop
  isExternal: false
  name: AddWatch(Int32, MainLoop+Condition, Func<MainLoop,Boolean>)
  nameWithType: MainLoop.AddWatch(Int32, MainLoop+Condition, Func<MainLoop,Boolean>)
  fullName: MainLoop.AddWatch(Int32, MainLoop+Condition, Func<MainLoop,Boolean>)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Mono.Terminal.MainLoop.EventsPending(System.Boolean)
  parent: Mono.Terminal.MainLoop
  isExternal: false
  name: EventsPending(Boolean)
  nameWithType: MainLoop.EventsPending(Boolean)
  fullName: MainLoop.EventsPending(Boolean)
- uid: Mono.Terminal.MainLoop.Invoke(System.Action)
  parent: Mono.Terminal.MainLoop
  isExternal: false
  name: Invoke(Action)
  nameWithType: MainLoop.Invoke(Action)
  fullName: MainLoop.Invoke(Action)
- uid: System.Action
  parent: System
  isExternal: true
  name: Action
  nameWithType: Action
  fullName: System.Action
- uid: Mono.Terminal.MainLoop.MainIteration
  parent: Mono.Terminal.MainLoop
  isExternal: false
  name: MainIteration()
  nameWithType: MainLoop.MainIteration()
  fullName: MainLoop.MainIteration()
- uid: Mono.Terminal.MainLoop.RemoveIdle(System.Func{System.Boolean})
  parent: Mono.Terminal.MainLoop
  isExternal: false
  name: RemoveIdle(Func<Boolean>)
  nameWithType: MainLoop.RemoveIdle(Func<Boolean>)
  fullName: MainLoop.RemoveIdle(Func<Boolean>)
- uid: Mono.Terminal.MainLoop.RemoveTimeout(System.Object)
  parent: Mono.Terminal.MainLoop
  isExternal: false
  name: RemoveTimeout(Object)
  nameWithType: MainLoop.RemoveTimeout(Object)
  fullName: MainLoop.RemoveTimeout(Object)
- uid: Mono.Terminal.MainLoop.RemoveWatch(System.Object)
  parent: Mono.Terminal.MainLoop
  isExternal: false
  name: RemoveWatch(Object)
  nameWithType: MainLoop.RemoveWatch(Object)
  fullName: MainLoop.RemoveWatch(Object)
- uid: Mono.Terminal.MainLoop.Run
  parent: Mono.Terminal.MainLoop
  isExternal: false
  name: Run()
  nameWithType: MainLoop.Run()
  fullName: MainLoop.Run()
- uid: Mono.Terminal.MainLoop.Stop
  parent: Mono.Terminal.MainLoop
  isExternal: false
  name: Stop()
  nameWithType: MainLoop.Stop()
  fullName: MainLoop.Stop()
- uid: Mono.Terminal.MainLoop.#ctor*
  parent: Mono.Terminal.MainLoop
  isExternal: false
  name: MainLoop
  nameWithType: MainLoop.MainLoop
  fullName: MainLoop.MainLoop
- uid: Mono.Terminal.MainLoop.AddIdle*
  parent: Mono.Terminal.MainLoop
  isExternal: false
  name: AddIdle
  nameWithType: MainLoop.AddIdle
  fullName: MainLoop.AddIdle
- uid: Mono.Terminal.MainLoop.AddTimeout*
  parent: Mono.Terminal.MainLoop
  isExternal: false
  name: AddTimeout
  nameWithType: MainLoop.AddTimeout
  fullName: MainLoop.AddTimeout
- uid: Mono.Terminal.MainLoop.AddWatch*
  parent: Mono.Terminal.MainLoop
  isExternal: false
  name: AddWatch
  nameWithType: MainLoop.AddWatch
  fullName: MainLoop.AddWatch
- uid: Mono.Terminal.MainLoop.EventsPending*
  parent: Mono.Terminal.MainLoop
  isExternal: false
  name: EventsPending
  nameWithType: MainLoop.EventsPending
  fullName: MainLoop.EventsPending
- uid: Mono.Terminal.MainLoop.Invoke*
  parent: Mono.Terminal.MainLoop
  isExternal: false
  name: Invoke
  nameWithType: MainLoop.Invoke
  fullName: MainLoop.Invoke
- uid: Mono.Terminal.MainLoop.MainIteration*
  parent: Mono.Terminal.MainLoop
  isExternal: false
  name: MainIteration
  nameWithType: MainLoop.MainIteration
  fullName: MainLoop.MainIteration
- uid: Mono.Terminal.MainLoop.RemoveIdle*
  parent: Mono.Terminal.MainLoop
  isExternal: false
  name: RemoveIdle
  nameWithType: MainLoop.RemoveIdle
  fullName: MainLoop.RemoveIdle
- uid: Mono.Terminal.MainLoop.RemoveTimeout*
  parent: Mono.Terminal.MainLoop
  isExternal: false
  name: RemoveTimeout
  nameWithType: MainLoop.RemoveTimeout
  fullName: MainLoop.RemoveTimeout
- uid: Mono.Terminal.MainLoop.RemoveWatch*
  parent: Mono.Terminal.MainLoop
  isExternal: false
  name: RemoveWatch
  nameWithType: MainLoop.RemoveWatch
  fullName: MainLoop.RemoveWatch
- uid: Mono.Terminal.MainLoop.Run*
  parent: Mono.Terminal.MainLoop
  isExternal: false
  name: Run
  nameWithType: MainLoop.Run
  fullName: MainLoop.Run
- uid: Mono.Terminal.MainLoop.Stop*
  parent: Mono.Terminal.MainLoop
  isExternal: false
  name: Stop
  nameWithType: MainLoop.Stop
  fullName: MainLoop.Stop
