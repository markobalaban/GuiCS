### YamlMime:ManagedReference
items:
- uid: UICatalog.Scenario
  commentId: T:UICatalog.Scenario
  id: Scenario
  parent: UICatalog
  children:
  - UICatalog.Scenario.Dispose
  - UICatalog.Scenario.Dispose(System.Boolean)
  - UICatalog.Scenario.GetCategories
  - UICatalog.Scenario.GetDescription
  - UICatalog.Scenario.GetName
  - UICatalog.Scenario.Init(Terminal.Gui.Toplevel)
  - UICatalog.Scenario.RequestStop
  - UICatalog.Scenario.Run
  - UICatalog.Scenario.Setup
  - UICatalog.Scenario.Top
  - UICatalog.Scenario.ToString
  - UICatalog.Scenario.Win
  langs:
  - csharp
  - vb
  name: Scenario
  nameWithType: Scenario
  fullName: UICatalog.Scenario
  type: Class
  source:
    remote:
      path: UICatalog/Scenario.cs
      branch: reorg
      repo: tig:tig/gui.cs.git
    id: Scenario
    path: ../UICatalog/Scenario.cs
    startLine: 46
  assemblies:
  - UICatalog
  namespace: UICatalog
  summary: "\n<p>Base class for each demo/scenario.</p>\n<p>\n To define a new scenario:\n<ol><li>Create a new <code>.cs</code> file in the <cs>Scenarios</cs> directory that derives from <xref href=\"UICatalog.Scenario\" data-throw-if-not-resolved=\"false\"></xref>.</li><li>Annotate the <xref href=\"UICatalog.Scenario\" data-throw-if-not-resolved=\"false\"></xref> derived class with a <see cref=\"!:Scenario.ScenarioMetaData\"></see> attribute specifying the scenario&apos;s name and description.</li><li>Add one or more <xref href=\"UICatalog.Scenario.ScenarioCategory\" data-throw-if-not-resolved=\"false\"></xref> attributes to the class specifying which categories the sceanrio belongs to. If you don&apos;t specify a category the sceanrio will show up in &quot;All&quot;.</li><li>Implement the <xref href=\"UICatalog.Scenario.Setup\" data-throw-if-not-resolved=\"false\"></xref> override which will be called when a user selects the scenario to run.</li><li>Optionally, implement the <xref href=\"UICatalog.Scenario.Init(Terminal.Gui.Toplevel)\" data-throw-if-not-resolved=\"false\"></xref> and/or <xref href=\"UICatalog.Scenario.Run\" data-throw-if-not-resolved=\"false\"></xref> overrides to provide a custom implementation.</li></ol>\n</p>\n<p>\nThe UI Catalog program uses reflection to find all scenarios and adds them to the\nListViews. Press ENTER to run the selected scenario. Press CTRL-Q to exit it.	/\n</p>\n"
  example:
  - "\nThe example below is provided in the `Scenarios` directory as a generic sample that can be copied and re-named:\n<pre><code>using Terminal.Gui;\n\nnamespace UICatalog {\n	[ScenarioMetadata (Name: &quot;Generic&quot;, Description: &quot;Generic sample - A template for creating new Scenarios&quot;)]\n	[ScenarioCategory (&quot;Controls&quot;)]\n	class MyScenario : Scenario {\n		public override void Setup ()\n		{\n			// Put your scenario code here, e.g.\n			Win.Add (new Button (&quot;Press me!&quot;) {\n				X = Pos.Center (),\n				Y = Pos.Center (),\n				Clicked = () => MessageBox.Query (20, 7, &quot;Hi&quot;, &quot;Neat?&quot;, &quot;Yes&quot;, &quot;No&quot;)\n			});\n		}\n	}\n}</code></pre>\n"
  syntax:
    content: 'public class Scenario : IDisposable'
    content.vb: >-
      Public Class Scenario

          Implements IDisposable
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: UICatalog.Scenario.Top
  commentId: P:UICatalog.Scenario.Top
  id: Top
  parent: UICatalog.Scenario
  langs:
  - csharp
  - vb
  name: Top
  nameWithType: Scenario.Top
  fullName: UICatalog.Scenario.Top
  type: Property
  source:
    remote:
      path: UICatalog/Scenario.cs
      branch: reorg
      repo: tig:tig/gui.cs.git
    id: Top
    path: ../UICatalog/Scenario.cs
    startLine: 52
  assemblies:
  - UICatalog
  namespace: UICatalog
  summary: "\nThe Top level for the <xref href=\"UICatalog.Scenario\" data-throw-if-not-resolved=\"false\"></xref>. This should be set to <xref href=\"Terminal.Gui.Application.Top\" data-throw-if-not-resolved=\"false\"></xref> in most cases.\n"
  example: []
  syntax:
    content: public Toplevel Top { get; set; }
    parameters: []
    return:
      type: Terminal.Gui.Toplevel
    content.vb: Public Property Top As Toplevel
  overload: UICatalog.Scenario.Top*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: UICatalog.Scenario.Win
  commentId: P:UICatalog.Scenario.Win
  id: Win
  parent: UICatalog.Scenario
  langs:
  - csharp
  - vb
  name: Win
  nameWithType: Scenario.Win
  fullName: UICatalog.Scenario.Win
  type: Property
  source:
    remote:
      path: UICatalog/Scenario.cs
      branch: reorg
      repo: tig:tig/gui.cs.git
    id: Win
    path: ../UICatalog/Scenario.cs
    startLine: 57
  assemblies:
  - UICatalog
  namespace: UICatalog
  summary: "\nThe Window for the <xref href=\"UICatalog.Scenario\" data-throw-if-not-resolved=\"false\"></xref>. This should be set within the <xref href=\"Terminal.Gui.Application.Top\" data-throw-if-not-resolved=\"false\"></xref> in most cases.\n"
  example: []
  syntax:
    content: public Window Win { get; set; }
    parameters: []
    return:
      type: Terminal.Gui.Window
    content.vb: Public Property Win As Window
  overload: UICatalog.Scenario.Win*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: UICatalog.Scenario.Init(Terminal.Gui.Toplevel)
  commentId: M:UICatalog.Scenario.Init(Terminal.Gui.Toplevel)
  id: Init(Terminal.Gui.Toplevel)
  parent: UICatalog.Scenario
  langs:
  - csharp
  - vb
  name: Init(Toplevel)
  nameWithType: Scenario.Init(Toplevel)
  fullName: UICatalog.Scenario.Init(Terminal.Gui.Toplevel)
  type: Method
  source:
    remote:
      path: UICatalog/Scenario.cs
      branch: reorg
      repo: tig:tig/gui.cs.git
    id: Init
    path: ../UICatalog/Scenario.cs
    startLine: 74
  assemblies:
  - UICatalog
  namespace: UICatalog
  summary: "\nHelper that provides the default <xref href=\"Terminal.Gui.Window\" data-throw-if-not-resolved=\"false\"></xref> implementation with a frame and \nlabel showing the name of the <xref href=\"UICatalog.Scenario\" data-throw-if-not-resolved=\"false\"></xref> and logic to exit back to \nthe Scenario picker UI.\nOverride <xref href=\"UICatalog.Scenario.Init(Terminal.Gui.Toplevel)\" data-throw-if-not-resolved=\"false\"></xref> to provide any <xref href=\"Terminal.Gui.Toplevel\" data-throw-if-not-resolved=\"false\"></xref> behavior needed.\n"
  remarks: "\n<p>\nThg base implementation calls <xref href=\"Terminal.Gui.Application.Init\" data-throw-if-not-resolved=\"false\"></xref>, sets <xref href=\"UICatalog.Scenario.Top\" data-throw-if-not-resolved=\"false\"></xref> to the passed in <xref href=\"Terminal.Gui.Toplevel\" data-throw-if-not-resolved=\"false\"></xref>, creates a <xref href=\"Terminal.Gui.Window\" data-throw-if-not-resolved=\"false\"></xref> for <xref href=\"UICatalog.Scenario.Win\" data-throw-if-not-resolved=\"false\"></xref> and adds it to <xref href=\"UICatalog.Scenario.Top\" data-throw-if-not-resolved=\"false\"></xref>.\n</p>\n<p>\nOverrides that do not call the base.<xref href=\"UICatalog.Scenario.Run\" data-throw-if-not-resolved=\"false\"></xref>, must call <xref href=\"Terminal.Gui.Application.Init\" data-throw-if-not-resolved=\"false\"></xref> before creating any views or calling other Terminal.Gui APIs.\n</p>\n"
  example: []
  syntax:
    content: public virtual void Init(Toplevel top)
    parameters:
    - id: top
      type: Terminal.Gui.Toplevel
      description: ''
    content.vb: Public Overridable Sub Init(top As Toplevel)
  overload: UICatalog.Scenario.Init*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: UICatalog.Scenario.GetName
  commentId: M:UICatalog.Scenario.GetName
  id: GetName
  parent: UICatalog.Scenario
  langs:
  - csharp
  - vb
  name: GetName()
  nameWithType: Scenario.GetName()
  fullName: UICatalog.Scenario.GetName()
  type: Method
  source:
    remote:
      path: UICatalog/Scenario.cs
      branch: reorg
      repo: tig:tig/gui.cs.git
    id: GetName
    path: ../UICatalog/Scenario.cs
    startLine: 132
  assemblies:
  - UICatalog
  namespace: UICatalog
  summary: "\nHelper to get the <xref href=\"UICatalog.Scenario\" data-throw-if-not-resolved=\"false\"></xref> Name (defined in <xref href=\"UICatalog.Scenario.ScenarioMetadata\" data-throw-if-not-resolved=\"false\"></xref>)\n"
  example: []
  syntax:
    content: public string GetName()
    return:
      type: System.String
      description: ''
    content.vb: Public Function GetName As String
  overload: UICatalog.Scenario.GetName*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: UICatalog.Scenario.GetDescription
  commentId: M:UICatalog.Scenario.GetDescription
  id: GetDescription
  parent: UICatalog.Scenario
  langs:
  - csharp
  - vb
  name: GetDescription()
  nameWithType: Scenario.GetDescription()
  fullName: UICatalog.Scenario.GetDescription()
  type: Method
  source:
    remote:
      path: UICatalog/Scenario.cs
      branch: reorg
      repo: tig:tig/gui.cs.git
    id: GetDescription
    path: ../UICatalog/Scenario.cs
    startLine: 138
  assemblies:
  - UICatalog
  namespace: UICatalog
  summary: "\nHelper to get the <xref href=\"UICatalog.Scenario\" data-throw-if-not-resolved=\"false\"></xref> Description (defined in <xref href=\"UICatalog.Scenario.ScenarioMetadata\" data-throw-if-not-resolved=\"false\"></xref>)\n"
  example: []
  syntax:
    content: public string GetDescription()
    return:
      type: System.String
      description: ''
    content.vb: Public Function GetDescription As String
  overload: UICatalog.Scenario.GetDescription*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: UICatalog.Scenario.GetCategories
  commentId: M:UICatalog.Scenario.GetCategories
  id: GetCategories
  parent: UICatalog.Scenario
  langs:
  - csharp
  - vb
  name: GetCategories()
  nameWithType: Scenario.GetCategories()
  fullName: UICatalog.Scenario.GetCategories()
  type: Method
  source:
    remote:
      path: UICatalog/Scenario.cs
      branch: reorg
      repo: tig:tig/gui.cs.git
    id: GetCategories
    path: ../UICatalog/Scenario.cs
    startLine: 175
  assemblies:
  - UICatalog
  namespace: UICatalog
  summary: "\nHelper function to get the list of categories a <xref href=\"UICatalog.Scenario\" data-throw-if-not-resolved=\"false\"></xref> belongs to (defined in <xref href=\"UICatalog.Scenario.ScenarioCategory\" data-throw-if-not-resolved=\"false\"></xref>)\n"
  example: []
  syntax:
    content: public List<string> GetCategories()
    return:
      type: System.Collections.Generic.List{System.String}
      description: list of catagory names
    content.vb: Public Function GetCategories As List(Of String)
  overload: UICatalog.Scenario.GetCategories*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: UICatalog.Scenario.ToString
  commentId: M:UICatalog.Scenario.ToString
  id: ToString
  parent: UICatalog.Scenario
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: Scenario.ToString()
  fullName: UICatalog.Scenario.ToString()
  type: Method
  source:
    remote:
      path: UICatalog/Scenario.cs
      branch: reorg
      repo: tig:tig/gui.cs.git
    id: ToString
    path: ../UICatalog/Scenario.cs
    startLine: 178
  assemblies:
  - UICatalog
  namespace: UICatalog
  example: []
  syntax:
    content: public override string ToString()
    return:
      type: System.String
    content.vb: Public Overrides Function ToString As String
  overridden: System.Object.ToString
  overload: UICatalog.Scenario.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: UICatalog.Scenario.Setup
  commentId: M:UICatalog.Scenario.Setup
  id: Setup
  parent: UICatalog.Scenario
  langs:
  - csharp
  - vb
  name: Setup()
  nameWithType: Scenario.Setup()
  fullName: UICatalog.Scenario.Setup()
  type: Method
  source:
    remote:
      path: UICatalog/Scenario.cs
      branch: reorg
      repo: tig:tig/gui.cs.git
    id: Setup
    path: ../UICatalog/Scenario.cs
    startLine: 184
  assemblies:
  - UICatalog
  namespace: UICatalog
  summary: "\nOverride this to implement the <xref href=\"UICatalog.Scenario\" data-throw-if-not-resolved=\"false\"></xref> setup logic (create controls, etc...). \n"
  remarks: This is typically the best place to put scenario logic code.
  example: []
  syntax:
    content: public virtual void Setup()
    content.vb: Public Overridable Sub Setup
  overload: UICatalog.Scenario.Setup*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: UICatalog.Scenario.Run
  commentId: M:UICatalog.Scenario.Run
  id: Run
  parent: UICatalog.Scenario
  langs:
  - csharp
  - vb
  name: Run()
  nameWithType: Scenario.Run()
  fullName: UICatalog.Scenario.Run()
  type: Method
  source:
    remote:
      path: UICatalog/Scenario.cs
      branch: reorg
      repo: tig:tig/gui.cs.git
    id: Run
    path: ../UICatalog/Scenario.cs
    startLine: 195
  assemblies:
  - UICatalog
  namespace: UICatalog
  summary: "\nRuns the <xref href=\"UICatalog.Scenario\" data-throw-if-not-resolved=\"false\"></xref>. Override to start the <xref href=\"UICatalog.Scenario\" data-throw-if-not-resolved=\"false\"></xref> using a <xref href=\"Terminal.Gui.Toplevel\" data-throw-if-not-resolved=\"false\"></xref> different than `Top`.\n\n"
  remarks: "\nOverrides that do not call the base.<xref href=\"UICatalog.Scenario.Run\" data-throw-if-not-resolved=\"false\"></xref>, must call <xref href=\"Terminal.Gui.Application.Shutdown(System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> before returning.\n"
  example: []
  syntax:
    content: public virtual void Run()
    content.vb: Public Overridable Sub Run
  overload: UICatalog.Scenario.Run*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: UICatalog.Scenario.RequestStop
  commentId: M:UICatalog.Scenario.RequestStop
  id: RequestStop
  parent: UICatalog.Scenario
  langs:
  - csharp
  - vb
  name: RequestStop()
  nameWithType: Scenario.RequestStop()
  fullName: UICatalog.Scenario.RequestStop()
  type: Method
  source:
    remote:
      path: UICatalog/Scenario.cs
      branch: reorg
      repo: tig:tig/gui.cs.git
    id: RequestStop
    path: ../UICatalog/Scenario.cs
    startLine: 204
  assemblies:
  - UICatalog
  namespace: UICatalog
  summary: "\nStops the scenario. Override to change shutdown behavior for the <xref href=\"UICatalog.Scenario\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public virtual void RequestStop()
    content.vb: Public Overridable Sub RequestStop
  overload: UICatalog.Scenario.RequestStop*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: UICatalog.Scenario.Dispose(System.Boolean)
  commentId: M:UICatalog.Scenario.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: UICatalog.Scenario
  langs:
  - csharp
  - vb
  name: Dispose(Boolean)
  nameWithType: Scenario.Dispose(Boolean)
  fullName: UICatalog.Scenario.Dispose(System.Boolean)
  type: Method
  source:
    remote:
      path: UICatalog/Scenario.cs
      branch: reorg
      repo: tig:tig/gui.cs.git
    id: Dispose
    path: ../UICatalog/Scenario.cs
    startLine: 237
  assemblies:
  - UICatalog
  namespace: UICatalog
  syntax:
    content: protected virtual void Dispose(bool disposing)
    parameters:
    - id: disposing
      type: System.Boolean
    content.vb: Protected Overridable Sub Dispose(disposing As Boolean)
  overload: UICatalog.Scenario.Dispose*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: UICatalog.Scenario.Dispose
  commentId: M:UICatalog.Scenario.Dispose
  id: Dispose
  parent: UICatalog.Scenario
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: Scenario.Dispose()
  fullName: UICatalog.Scenario.Dispose()
  type: Method
  source:
    remote:
      path: UICatalog/Scenario.cs
      branch: reorg
      repo: tig:tig/gui.cs.git
    id: Dispose
    path: ../UICatalog/Scenario.cs
    startLine: 250
  assemblies:
  - UICatalog
  namespace: UICatalog
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  overload: UICatalog.Scenario.Dispose*
  implements:
  - System.IDisposable.Dispose
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: UICatalog.Scenario
  commentId: T:UICatalog.Scenario
  name: Scenario
  nameWithType: Scenario
  fullName: UICatalog.Scenario
- uid: UICatalog.Scenario.ScenarioCategory
  commentId: T:UICatalog.Scenario.ScenarioCategory
  name: Scenario.ScenarioCategory
  nameWithType: Scenario.ScenarioCategory
  fullName: UICatalog.Scenario.ScenarioCategory
- uid: UICatalog.Scenario.Setup
  commentId: M:UICatalog.Scenario.Setup
  isExternal: true
- uid: UICatalog.Scenario.Init(Terminal.Gui.Toplevel)
  commentId: M:UICatalog.Scenario.Init(Terminal.Gui.Toplevel)
  isExternal: true
- uid: UICatalog.Scenario.Run
  commentId: M:UICatalog.Scenario.Run
  isExternal: true
- uid: UICatalog
  commentId: N:UICatalog
  name: UICatalog
  nameWithType: UICatalog
  fullName: UICatalog
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Terminal.Gui.Application.Top
  commentId: P:Terminal.Gui.Application.Top
  isExternal: true
- uid: UICatalog.Scenario.Top*
  commentId: Overload:UICatalog.Scenario.Top
  name: Top
  nameWithType: Scenario.Top
  fullName: UICatalog.Scenario.Top
- uid: Terminal.Gui.Toplevel
  commentId: T:Terminal.Gui.Toplevel
  parent: Terminal.Gui
  name: Toplevel
  nameWithType: Toplevel
  fullName: Terminal.Gui.Toplevel
- uid: Terminal.Gui
  commentId: N:Terminal.Gui
  name: Terminal.Gui
  nameWithType: Terminal.Gui
  fullName: Terminal.Gui
- uid: UICatalog.Scenario.Win*
  commentId: Overload:UICatalog.Scenario.Win
  name: Win
  nameWithType: Scenario.Win
  fullName: UICatalog.Scenario.Win
- uid: Terminal.Gui.Window
  commentId: T:Terminal.Gui.Window
  parent: Terminal.Gui
  name: Window
  nameWithType: Window
  fullName: Terminal.Gui.Window
- uid: Terminal.Gui.Application.Init
  commentId: M:Terminal.Gui.Application.Init
  isExternal: true
- uid: UICatalog.Scenario.Top
  commentId: P:UICatalog.Scenario.Top
  isExternal: true
- uid: UICatalog.Scenario.Win
  commentId: P:UICatalog.Scenario.Win
  isExternal: true
- uid: UICatalog.Scenario.Init*
  commentId: Overload:UICatalog.Scenario.Init
  name: Init
  nameWithType: Scenario.Init
  fullName: UICatalog.Scenario.Init
- uid: UICatalog.Scenario.ScenarioMetadata
  commentId: T:UICatalog.Scenario.ScenarioMetadata
  name: Scenario.ScenarioMetadata
  nameWithType: Scenario.ScenarioMetadata
  fullName: UICatalog.Scenario.ScenarioMetadata
- uid: UICatalog.Scenario.GetName*
  commentId: Overload:UICatalog.Scenario.GetName
  name: GetName
  nameWithType: Scenario.GetName
  fullName: UICatalog.Scenario.GetName
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: UICatalog.Scenario.GetDescription*
  commentId: Overload:UICatalog.Scenario.GetDescription
  name: GetDescription
  nameWithType: Scenario.GetDescription
  fullName: UICatalog.Scenario.GetDescription
- uid: UICatalog.Scenario.GetCategories*
  commentId: Overload:UICatalog.Scenario.GetCategories
  name: GetCategories
  nameWithType: Scenario.GetCategories
  fullName: UICatalog.Scenario.GetCategories
- uid: System.Collections.Generic.List{System.String}
  commentId: T:System.Collections.Generic.List{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<String>
  nameWithType: List<String>
  fullName: System.Collections.Generic.List<System.String>
  nameWithType.vb: List(Of String)
  fullName.vb: System.Collections.Generic.List(Of System.String)
  name.vb: List(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: UICatalog.Scenario.ToString
  commentId: M:UICatalog.Scenario.ToString
  isExternal: true
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: UICatalog.Scenario.ToString*
  commentId: Overload:UICatalog.Scenario.ToString
  name: ToString
  nameWithType: Scenario.ToString
  fullName: UICatalog.Scenario.ToString
- uid: UICatalog.Scenario.Setup*
  commentId: Overload:UICatalog.Scenario.Setup
  name: Setup
  nameWithType: Scenario.Setup
  fullName: UICatalog.Scenario.Setup
- uid: Terminal.Gui.Application.Shutdown(System.Boolean)
  commentId: M:Terminal.Gui.Application.Shutdown(System.Boolean)
  isExternal: true
- uid: UICatalog.Scenario.Run*
  commentId: Overload:UICatalog.Scenario.Run
  name: Run
  nameWithType: Scenario.Run
  fullName: UICatalog.Scenario.Run
- uid: UICatalog.Scenario.RequestStop*
  commentId: Overload:UICatalog.Scenario.RequestStop
  name: RequestStop
  nameWithType: Scenario.RequestStop
  fullName: UICatalog.Scenario.RequestStop
- uid: UICatalog.Scenario.Dispose*
  commentId: Overload:UICatalog.Scenario.Dispose
  name: Dispose
  nameWithType: Scenario.Dispose
  fullName: UICatalog.Scenario.Dispose
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
