### YamlMime:ManagedReference
items:
- uid: Terminal.Rect
  id: Rect
  children:
  - Terminal.Rect.#ctor(Terminal.Point,Terminal.Size)
  - Terminal.Rect.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)
  - Terminal.Rect.Bottom
  - Terminal.Rect.Contains(Terminal.Point)
  - Terminal.Rect.Contains(Terminal.Rect)
  - Terminal.Rect.Contains(System.Int32,System.Int32)
  - Terminal.Rect.Empty
  - Terminal.Rect.Equals(System.Object)
  - Terminal.Rect.FromLTRB(System.Int32,System.Int32,System.Int32,System.Int32)
  - Terminal.Rect.GetHashCode
  - Terminal.Rect.Height
  - Terminal.Rect.Inflate(Terminal.Size)
  - Terminal.Rect.Inflate(System.Int32,System.Int32)
  - Terminal.Rect.Inflate(Terminal.Rect,System.Int32,System.Int32)
  - Terminal.Rect.Intersect(Terminal.Rect,Terminal.Rect)
  - Terminal.Rect.Intersect(Terminal.Rect)
  - Terminal.Rect.IntersectsWith(Terminal.Rect)
  - Terminal.Rect.IsEmpty
  - Terminal.Rect.Left
  - Terminal.Rect.Location
  - Terminal.Rect.Offset(Terminal.Point)
  - Terminal.Rect.Offset(System.Int32,System.Int32)
  - Terminal.Rect.op_Equality(Terminal.Rect,Terminal.Rect)
  - Terminal.Rect.op_Inequality(Terminal.Rect,Terminal.Rect)
  - Terminal.Rect.Right
  - Terminal.Rect.Size
  - Terminal.Rect.Top
  - Terminal.Rect.ToString
  - Terminal.Rect.Union(Terminal.Rect,Terminal.Rect)
  - Terminal.Rect.Width
  - Terminal.Rect.X
  - Terminal.Rect.Y
  langs:
  - csharp
  name: Rect
  nameWithType: Rect
  fullName: Terminal.Rect
  type: Struct
  assemblies:
  - Terminal
  namespace: Terminal
  syntax:
    content: public struct Rect
  inheritance:
  - System.ValueType
  implements: []
- uid: Terminal.Rect.#ctor(Terminal.Point,Terminal.Size)
  id: '#ctor(Terminal.Point,Terminal.Size)'
  parent: Terminal.Rect
  langs:
  - csharp
  name: Rect(Point, Size)
  nameWithType: Rect.Rect(Point, Size)
  fullName: Rect.Rect(Point, Size)
  type: Constructor
  assemblies:
  - Terminal
  namespace: Terminal
  summary: Rectangle Constructor
  remarks: Creates a Rectangle from Point and Size values.
  syntax:
    content: public Rect (Terminal.Point location, Terminal.Size size);
    parameters:
    - id: location
      type: Terminal.Point
      description: To be added.
    - id: size
      type: Terminal.Size
      description: To be added.
  overload: Terminal.Rect.#ctor*
  exceptions: []
- uid: Terminal.Rect.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)
  id: '#ctor(System.Int32,System.Int32,System.Int32,System.Int32)'
  parent: Terminal.Rect
  langs:
  - csharp
  name: Rect(Int32, Int32, Int32, Int32)
  nameWithType: Rect.Rect(Int32, Int32, Int32, Int32)
  fullName: Rect.Rect(Int32, Int32, Int32, Int32)
  type: Constructor
  assemblies:
  - Terminal
  namespace: Terminal
  summary: Rectangle Constructor
  remarks: >-
    Creates a Rectangle from a specified x,y location and
                	width and height values.
  syntax:
    content: public Rect (int x, int y, int width, int height);
    parameters:
    - id: x
      type: System.Int32
      description: To be added.
    - id: y
      type: System.Int32
      description: To be added.
    - id: width
      type: System.Int32
      description: To be added.
    - id: height
      type: System.Int32
      description: To be added.
  overload: Terminal.Rect.#ctor*
  exceptions: []
- uid: Terminal.Rect.Bottom
  id: Bottom
  parent: Terminal.Rect
  langs:
  - csharp
  name: Bottom
  nameWithType: Rect.Bottom
  fullName: Rect.Bottom
  type: Property
  assemblies:
  - Terminal
  namespace: Terminal
  summary: Bottom Property
  remarks: >-
    The Y coordinate of the bottom edge of the Rectangle.
                	Read only.
  syntax:
    content: public int Bottom { get; }
    return:
      type: System.Int32
      description: To be added.
  overload: Terminal.Rect.Bottom*
  exceptions: []
- uid: Terminal.Rect.Contains(Terminal.Point)
  id: Contains(Terminal.Point)
  parent: Terminal.Rect
  langs:
  - csharp
  name: Contains(Point)
  nameWithType: Rect.Contains(Point)
  fullName: Rect.Contains(Point)
  type: Method
  assemblies:
  - Terminal
  namespace: Terminal
  summary: Contains Method
  remarks: Checks if a Point lies within this Rectangle.
  syntax:
    content: public bool Contains (Terminal.Point pt);
    parameters:
    - id: pt
      type: Terminal.Point
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: Terminal.Rect.Contains*
  exceptions: []
- uid: Terminal.Rect.Contains(Terminal.Rect)
  id: Contains(Terminal.Rect)
  parent: Terminal.Rect
  langs:
  - csharp
  name: Contains(Rect)
  nameWithType: Rect.Contains(Rect)
  fullName: Rect.Contains(Rect)
  type: Method
  assemblies:
  - Terminal
  namespace: Terminal
  summary: Contains Method
  remarks: "Checks if a Rectangle lies entirely within this \n            	Rectangle."
  syntax:
    content: public bool Contains (Terminal.Rect rect);
    parameters:
    - id: rect
      type: Terminal.Rect
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: Terminal.Rect.Contains*
  exceptions: []
- uid: Terminal.Rect.Contains(System.Int32,System.Int32)
  id: Contains(System.Int32,System.Int32)
  parent: Terminal.Rect
  langs:
  - csharp
  name: Contains(Int32, Int32)
  nameWithType: Rect.Contains(Int32, Int32)
  fullName: Rect.Contains(Int32, Int32)
  type: Method
  assemblies:
  - Terminal
  namespace: Terminal
  summary: Contains Method
  remarks: Checks if an x,y coordinate lies within this Rectangle.
  syntax:
    content: public bool Contains (int x, int y);
    parameters:
    - id: x
      type: System.Int32
      description: To be added.
    - id: y
      type: System.Int32
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: Terminal.Rect.Contains*
  exceptions: []
- uid: Terminal.Rect.Empty
  id: Empty
  parent: Terminal.Rect
  langs:
  - csharp
  name: Empty
  nameWithType: Rect.Empty
  fullName: Rect.Empty
  type: Field
  assemblies:
  - Terminal
  namespace: Terminal
  summary: Empty Shared Field
  remarks: An uninitialized Rectangle Structure.
  syntax:
    content: public static readonly Terminal.Rect Empty;
    return:
      type: Terminal.Rect
      description: To be added.
  exceptions: []
- uid: Terminal.Rect.Equals(System.Object)
  id: Equals(System.Object)
  parent: Terminal.Rect
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: Rect.Equals(Object)
  fullName: Rect.Equals(Object)
  type: Method
  assemblies:
  - Terminal
  namespace: Terminal
  summary: Equals Method
  remarks: Checks equivalence of this Rectangle and another object.
  syntax:
    content: public override bool Equals (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: Terminal.Rect.Equals*
  exceptions: []
- uid: Terminal.Rect.FromLTRB(System.Int32,System.Int32,System.Int32,System.Int32)
  id: FromLTRB(System.Int32,System.Int32,System.Int32,System.Int32)
  parent: Terminal.Rect
  langs:
  - csharp
  name: FromLTRB(Int32, Int32, Int32, Int32)
  nameWithType: Rect.FromLTRB(Int32, Int32, Int32, Int32)
  fullName: Rect.FromLTRB(Int32, Int32, Int32, Int32)
  type: Method
  assemblies:
  - Terminal
  namespace: Terminal
  summary: FromLTRB Shared Method
  remarks: >-
    Produces a Rectangle structure from left, top, right
                	and bottom coordinates.
  syntax:
    content: public static Terminal.Rect FromLTRB (int left, int top, int right, int bottom);
    parameters:
    - id: left
      type: System.Int32
      description: To be added.
    - id: top
      type: System.Int32
      description: To be added.
    - id: right
      type: System.Int32
      description: To be added.
    - id: bottom
      type: System.Int32
      description: To be added.
    return:
      type: Terminal.Rect
      description: To be added.
  overload: Terminal.Rect.FromLTRB*
  exceptions: []
- uid: Terminal.Rect.GetHashCode
  id: GetHashCode
  parent: Terminal.Rect
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: Rect.GetHashCode()
  fullName: Rect.GetHashCode()
  type: Method
  assemblies:
  - Terminal
  namespace: Terminal
  summary: GetHashCode Method
  remarks: Calculates a hashing value.
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: To be added.
  overload: Terminal.Rect.GetHashCode*
  exceptions: []
- uid: Terminal.Rect.Height
  id: Height
  parent: Terminal.Rect
  langs:
  - csharp
  name: Height
  nameWithType: Rect.Height
  fullName: Rect.Height
  type: Field
  assemblies:
  - Terminal
  namespace: Terminal
  syntax:
    content: public int Height;
    return:
      type: System.Int32
      description: To be added.
  exceptions: []
- uid: Terminal.Rect.Inflate(Terminal.Size)
  id: Inflate(Terminal.Size)
  parent: Terminal.Rect
  langs:
  - csharp
  name: Inflate(Size)
  nameWithType: Rect.Inflate(Size)
  fullName: Rect.Inflate(Size)
  type: Method
  assemblies:
  - Terminal
  namespace: Terminal
  summary: Inflate Method
  remarks: Inflates the Rectangle by a specified Size.
  syntax:
    content: public void Inflate (Terminal.Size size);
    parameters:
    - id: size
      type: Terminal.Size
      description: To be added.
  overload: Terminal.Rect.Inflate*
  exceptions: []
- uid: Terminal.Rect.Inflate(System.Int32,System.Int32)
  id: Inflate(System.Int32,System.Int32)
  parent: Terminal.Rect
  langs:
  - csharp
  name: Inflate(Int32, Int32)
  nameWithType: Rect.Inflate(Int32, Int32)
  fullName: Rect.Inflate(Int32, Int32)
  type: Method
  assemblies:
  - Terminal
  namespace: Terminal
  summary: Inflate Method
  remarks: Inflates the Rectangle by a specified width and height.
  syntax:
    content: public void Inflate (int width, int height);
    parameters:
    - id: width
      type: System.Int32
      description: To be added.
    - id: height
      type: System.Int32
      description: To be added.
  overload: Terminal.Rect.Inflate*
  exceptions: []
- uid: Terminal.Rect.Inflate(Terminal.Rect,System.Int32,System.Int32)
  id: Inflate(Terminal.Rect,System.Int32,System.Int32)
  parent: Terminal.Rect
  langs:
  - csharp
  name: Inflate(Rect, Int32, Int32)
  nameWithType: Rect.Inflate(Rect, Int32, Int32)
  fullName: Rect.Inflate(Rect, Int32, Int32)
  type: Method
  assemblies:
  - Terminal
  namespace: Terminal
  summary: Inflate Shared Method
  remarks: "Produces a new Rectangle by inflating an existing \n            	Rectangle by the specified coordinate values."
  syntax:
    content: public static Terminal.Rect Inflate (Terminal.Rect rect, int x, int y);
    parameters:
    - id: rect
      type: Terminal.Rect
      description: To be added.
    - id: x
      type: System.Int32
      description: To be added.
    - id: y
      type: System.Int32
      description: To be added.
    return:
      type: Terminal.Rect
      description: To be added.
  overload: Terminal.Rect.Inflate*
  exceptions: []
- uid: Terminal.Rect.Intersect(Terminal.Rect,Terminal.Rect)
  id: Intersect(Terminal.Rect,Terminal.Rect)
  parent: Terminal.Rect
  langs:
  - csharp
  name: Intersect(Rect, Rect)
  nameWithType: Rect.Intersect(Rect, Rect)
  fullName: Rect.Intersect(Rect, Rect)
  type: Method
  assemblies:
  - Terminal
  namespace: Terminal
  summary: Intersect Shared Method
  remarks: "Produces a new Rectangle by intersecting 2 existing \n            	Rectangles. Returns null if there is no	intersection."
  syntax:
    content: public static Terminal.Rect Intersect (Terminal.Rect a, Terminal.Rect b);
    parameters:
    - id: a
      type: Terminal.Rect
      description: To be added.
    - id: b
      type: Terminal.Rect
      description: To be added.
    return:
      type: Terminal.Rect
      description: To be added.
  overload: Terminal.Rect.Intersect*
  exceptions: []
- uid: Terminal.Rect.Intersect(Terminal.Rect)
  id: Intersect(Terminal.Rect)
  parent: Terminal.Rect
  langs:
  - csharp
  name: Intersect(Rect)
  nameWithType: Rect.Intersect(Rect)
  fullName: Rect.Intersect(Rect)
  type: Method
  assemblies:
  - Terminal
  namespace: Terminal
  summary: Intersect Method
  remarks: >-
    Replaces the Rectangle with the intersection of itself
                	and another Rectangle.
  syntax:
    content: public void Intersect (Terminal.Rect rect);
    parameters:
    - id: rect
      type: Terminal.Rect
      description: To be added.
  overload: Terminal.Rect.Intersect*
  exceptions: []
- uid: Terminal.Rect.IntersectsWith(Terminal.Rect)
  id: IntersectsWith(Terminal.Rect)
  parent: Terminal.Rect
  langs:
  - csharp
  name: IntersectsWith(Rect)
  nameWithType: Rect.IntersectsWith(Rect)
  fullName: Rect.IntersectsWith(Rect)
  type: Method
  assemblies:
  - Terminal
  namespace: Terminal
  summary: IntersectsWith Method
  remarks: Checks if a Rectangle intersects with this one.
  syntax:
    content: public bool IntersectsWith (Terminal.Rect rect);
    parameters:
    - id: rect
      type: Terminal.Rect
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: Terminal.Rect.IntersectsWith*
  exceptions: []
- uid: Terminal.Rect.IsEmpty
  id: IsEmpty
  parent: Terminal.Rect
  langs:
  - csharp
  name: IsEmpty
  nameWithType: Rect.IsEmpty
  fullName: Rect.IsEmpty
  type: Property
  assemblies:
  - Terminal
  namespace: Terminal
  summary: IsEmpty Property
  remarks: Indicates if the width or height are zero. Read only.
  syntax:
    content: public bool IsEmpty { get; }
    return:
      type: System.Boolean
      description: To be added.
  overload: Terminal.Rect.IsEmpty*
  exceptions: []
- uid: Terminal.Rect.Left
  id: Left
  parent: Terminal.Rect
  langs:
  - csharp
  name: Left
  nameWithType: Rect.Left
  fullName: Rect.Left
  type: Property
  assemblies:
  - Terminal
  namespace: Terminal
  summary: Left Property
  remarks: >-
    The X coordinate of the left edge of the Rectangle.
                	Read only.
  syntax:
    content: public int Left { get; }
    return:
      type: System.Int32
      description: To be added.
  overload: Terminal.Rect.Left*
  exceptions: []
- uid: Terminal.Rect.Location
  id: Location
  parent: Terminal.Rect
  langs:
  - csharp
  name: Location
  nameWithType: Rect.Location
  fullName: Rect.Location
  type: Property
  assemblies:
  - Terminal
  namespace: Terminal
  summary: Location Property
  remarks: The Location of the top-left corner of the Rectangle.
  syntax:
    content: public Terminal.Point Location { get; set; }
    return:
      type: Terminal.Point
      description: To be added.
  overload: Terminal.Rect.Location*
  exceptions: []
- uid: Terminal.Rect.Offset(Terminal.Point)
  id: Offset(Terminal.Point)
  parent: Terminal.Rect
  langs:
  - csharp
  name: Offset(Point)
  nameWithType: Rect.Offset(Point)
  fullName: Rect.Offset(Point)
  type: Method
  assemblies:
  - Terminal
  namespace: Terminal
  summary: Offset Method
  remarks: Moves the Rectangle a specified distance.
  syntax:
    content: public void Offset (Terminal.Point pos);
    parameters:
    - id: pos
      type: Terminal.Point
      description: To be added.
  overload: Terminal.Rect.Offset*
  exceptions: []
- uid: Terminal.Rect.Offset(System.Int32,System.Int32)
  id: Offset(System.Int32,System.Int32)
  parent: Terminal.Rect
  langs:
  - csharp
  name: Offset(Int32, Int32)
  nameWithType: Rect.Offset(Int32, Int32)
  fullName: Rect.Offset(Int32, Int32)
  type: Method
  assemblies:
  - Terminal
  namespace: Terminal
  summary: Offset Method
  remarks: Moves the Rectangle a specified distance.
  syntax:
    content: public void Offset (int x, int y);
    parameters:
    - id: x
      type: System.Int32
      description: To be added.
    - id: y
      type: System.Int32
      description: To be added.
  overload: Terminal.Rect.Offset*
  exceptions: []
- uid: Terminal.Rect.op_Equality(Terminal.Rect,Terminal.Rect)
  id: op_Equality(Terminal.Rect,Terminal.Rect)
  parent: Terminal.Rect
  langs:
  - csharp
  name: op_Equality(Rect, Rect)
  nameWithType: Rect.op_Equality(Rect, Rect)
  fullName: Rect.op_Equality(Rect, Rect)
  type: Operator
  assemblies:
  - Terminal
  namespace: Terminal
  summary: Equality Operator
  remarks: "Compares two Rectangle objects. The return value is\n            	based on the equivalence of the Location and Size \n            	properties of the two Rectangles."
  syntax:
    content: public static bool op_Equality (Terminal.Rect left, Terminal.Rect right);
    parameters:
    - id: left
      type: Terminal.Rect
      description: To be added.
    - id: right
      type: Terminal.Rect
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: Terminal.Rect.op_Equality*
  exceptions: []
- uid: Terminal.Rect.op_Inequality(Terminal.Rect,Terminal.Rect)
  id: op_Inequality(Terminal.Rect,Terminal.Rect)
  parent: Terminal.Rect
  langs:
  - csharp
  name: op_Inequality(Rect, Rect)
  nameWithType: Rect.op_Inequality(Rect, Rect)
  fullName: Rect.op_Inequality(Rect, Rect)
  type: Operator
  assemblies:
  - Terminal
  namespace: Terminal
  summary: Inequality Operator
  remarks: "Compares two Rectangle objects. The return value is\n            	based on the equivalence of the Location and Size \n            	properties of the two Rectangles."
  syntax:
    content: public static bool op_Inequality (Terminal.Rect left, Terminal.Rect right);
    parameters:
    - id: left
      type: Terminal.Rect
      description: To be added.
    - id: right
      type: Terminal.Rect
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: Terminal.Rect.op_Inequality*
  exceptions: []
- uid: Terminal.Rect.Right
  id: Right
  parent: Terminal.Rect
  langs:
  - csharp
  name: Right
  nameWithType: Rect.Right
  fullName: Rect.Right
  type: Property
  assemblies:
  - Terminal
  namespace: Terminal
  summary: Right Property
  remarks: >-
    The X coordinate of the right edge of the Rectangle.
                	Read only.
  syntax:
    content: public int Right { get; }
    return:
      type: System.Int32
      description: To be added.
  overload: Terminal.Rect.Right*
  exceptions: []
- uid: Terminal.Rect.Size
  id: Size
  parent: Terminal.Rect
  langs:
  - csharp
  name: Size
  nameWithType: Rect.Size
  fullName: Rect.Size
  type: Property
  assemblies:
  - Terminal
  namespace: Terminal
  summary: Size Property
  remarks: The Size of the Rectangle.
  syntax:
    content: public Terminal.Size Size { get; set; }
    return:
      type: Terminal.Size
      description: To be added.
  overload: Terminal.Rect.Size*
  exceptions: []
- uid: Terminal.Rect.Top
  id: Top
  parent: Terminal.Rect
  langs:
  - csharp
  name: Top
  nameWithType: Rect.Top
  fullName: Rect.Top
  type: Property
  assemblies:
  - Terminal
  namespace: Terminal
  summary: Top Property
  remarks: >-
    The Y coordinate of the top edge of the Rectangle.
                	Read only.
  syntax:
    content: public int Top { get; }
    return:
      type: System.Int32
      description: To be added.
  overload: Terminal.Rect.Top*
  exceptions: []
- uid: Terminal.Rect.ToString
  id: ToString
  parent: Terminal.Rect
  langs:
  - csharp
  name: ToString()
  nameWithType: Rect.ToString()
  fullName: Rect.ToString()
  type: Method
  assemblies:
  - Terminal
  namespace: Terminal
  summary: ToString Method
  remarks: Formats the Rectangle as a string in (x,y,w,h) notation.
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: To be added.
  overload: Terminal.Rect.ToString*
  exceptions: []
- uid: Terminal.Rect.Union(Terminal.Rect,Terminal.Rect)
  id: Union(Terminal.Rect,Terminal.Rect)
  parent: Terminal.Rect
  langs:
  - csharp
  name: Union(Rect, Rect)
  nameWithType: Rect.Union(Rect, Rect)
  fullName: Rect.Union(Rect, Rect)
  type: Method
  assemblies:
  - Terminal
  namespace: Terminal
  summary: Union Shared Method
  remarks: "Produces a new Rectangle from the union of 2 existing \n            	Rectangles."
  syntax:
    content: public static Terminal.Rect Union (Terminal.Rect a, Terminal.Rect b);
    parameters:
    - id: a
      type: Terminal.Rect
      description: To be added.
    - id: b
      type: Terminal.Rect
      description: To be added.
    return:
      type: Terminal.Rect
      description: To be added.
  overload: Terminal.Rect.Union*
  exceptions: []
- uid: Terminal.Rect.Width
  id: Width
  parent: Terminal.Rect
  langs:
  - csharp
  name: Width
  nameWithType: Rect.Width
  fullName: Rect.Width
  type: Field
  assemblies:
  - Terminal
  namespace: Terminal
  syntax:
    content: public int Width;
    return:
      type: System.Int32
      description: To be added.
  exceptions: []
- uid: Terminal.Rect.X
  id: X
  parent: Terminal.Rect
  langs:
  - csharp
  name: X
  nameWithType: Rect.X
  fullName: Rect.X
  type: Field
  assemblies:
  - Terminal
  namespace: Terminal
  syntax:
    content: public int X;
    return:
      type: System.Int32
      description: To be added.
  exceptions: []
- uid: Terminal.Rect.Y
  id: Y
  parent: Terminal.Rect
  langs:
  - csharp
  name: Y
  nameWithType: Rect.Y
  fullName: Rect.Y
  type: Field
  assemblies:
  - Terminal
  namespace: Terminal
  syntax:
    content: public int Y;
    return:
      type: System.Int32
      description: To be added.
  exceptions: []
references:
- uid: System.ValueType
  parent: System
  isExternal: true
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: Terminal.Rect.#ctor(Terminal.Point,Terminal.Size)
  parent: Terminal.Rect
  isExternal: false
  name: Rect(Point, Size)
  nameWithType: Rect.Rect(Point, Size)
  fullName: Rect.Rect(Point, Size)
- uid: Terminal.Point
  parent: Terminal
  isExternal: false
  name: Point
  nameWithType: Point
  fullName: Terminal.Point
- uid: Terminal.Size
  parent: Terminal
  isExternal: false
  name: Size
  nameWithType: Size
  fullName: Terminal.Size
- uid: Terminal.Rect.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)
  parent: Terminal.Rect
  isExternal: false
  name: Rect(Int32, Int32, Int32, Int32)
  nameWithType: Rect.Rect(Int32, Int32, Int32, Int32)
  fullName: Rect.Rect(Int32, Int32, Int32, Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Terminal.Rect.Bottom
  parent: Terminal.Rect
  isExternal: false
  name: Bottom
  nameWithType: Rect.Bottom
  fullName: Rect.Bottom
- uid: Terminal.Rect.Contains(Terminal.Point)
  parent: Terminal.Rect
  isExternal: false
  name: Contains(Point)
  nameWithType: Rect.Contains(Point)
  fullName: Rect.Contains(Point)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Terminal.Rect.Contains(Terminal.Rect)
  parent: Terminal.Rect
  isExternal: false
  name: Contains(Rect)
  nameWithType: Rect.Contains(Rect)
  fullName: Rect.Contains(Rect)
- uid: Terminal.Rect
  parent: Terminal
  isExternal: false
  name: Rect
  nameWithType: Rect
  fullName: Terminal.Rect
- uid: Terminal.Rect.Contains(System.Int32,System.Int32)
  parent: Terminal.Rect
  isExternal: false
  name: Contains(Int32, Int32)
  nameWithType: Rect.Contains(Int32, Int32)
  fullName: Rect.Contains(Int32, Int32)
- uid: Terminal.Rect.Empty
  parent: Terminal.Rect
  isExternal: false
  name: Empty
  nameWithType: Rect.Empty
  fullName: Rect.Empty
- uid: Terminal.Rect.Equals(System.Object)
  parent: Terminal.Rect
  isExternal: false
  name: Equals(Object)
  nameWithType: Rect.Equals(Object)
  fullName: Rect.Equals(Object)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Terminal.Rect.FromLTRB(System.Int32,System.Int32,System.Int32,System.Int32)
  parent: Terminal.Rect
  isExternal: false
  name: FromLTRB(Int32, Int32, Int32, Int32)
  nameWithType: Rect.FromLTRB(Int32, Int32, Int32, Int32)
  fullName: Rect.FromLTRB(Int32, Int32, Int32, Int32)
- uid: Terminal.Rect.GetHashCode
  parent: Terminal.Rect
  isExternal: false
  name: GetHashCode()
  nameWithType: Rect.GetHashCode()
  fullName: Rect.GetHashCode()
- uid: Terminal.Rect.Height
  parent: Terminal.Rect
  isExternal: false
  name: Height
  nameWithType: Rect.Height
  fullName: Rect.Height
- uid: Terminal.Rect.Inflate(Terminal.Size)
  parent: Terminal.Rect
  isExternal: false
  name: Inflate(Size)
  nameWithType: Rect.Inflate(Size)
  fullName: Rect.Inflate(Size)
- uid: Terminal.Rect.Inflate(System.Int32,System.Int32)
  parent: Terminal.Rect
  isExternal: false
  name: Inflate(Int32, Int32)
  nameWithType: Rect.Inflate(Int32, Int32)
  fullName: Rect.Inflate(Int32, Int32)
- uid: Terminal.Rect.Inflate(Terminal.Rect,System.Int32,System.Int32)
  parent: Terminal.Rect
  isExternal: false
  name: Inflate(Rect, Int32, Int32)
  nameWithType: Rect.Inflate(Rect, Int32, Int32)
  fullName: Rect.Inflate(Rect, Int32, Int32)
- uid: Terminal.Rect.Intersect(Terminal.Rect,Terminal.Rect)
  parent: Terminal.Rect
  isExternal: false
  name: Intersect(Rect, Rect)
  nameWithType: Rect.Intersect(Rect, Rect)
  fullName: Rect.Intersect(Rect, Rect)
- uid: Terminal.Rect.Intersect(Terminal.Rect)
  parent: Terminal.Rect
  isExternal: false
  name: Intersect(Rect)
  nameWithType: Rect.Intersect(Rect)
  fullName: Rect.Intersect(Rect)
- uid: Terminal.Rect.IntersectsWith(Terminal.Rect)
  parent: Terminal.Rect
  isExternal: false
  name: IntersectsWith(Rect)
  nameWithType: Rect.IntersectsWith(Rect)
  fullName: Rect.IntersectsWith(Rect)
- uid: Terminal.Rect.IsEmpty
  parent: Terminal.Rect
  isExternal: false
  name: IsEmpty
  nameWithType: Rect.IsEmpty
  fullName: Rect.IsEmpty
- uid: Terminal.Rect.Left
  parent: Terminal.Rect
  isExternal: false
  name: Left
  nameWithType: Rect.Left
  fullName: Rect.Left
- uid: Terminal.Rect.Location
  parent: Terminal.Rect
  isExternal: false
  name: Location
  nameWithType: Rect.Location
  fullName: Rect.Location
- uid: Terminal.Rect.Offset(Terminal.Point)
  parent: Terminal.Rect
  isExternal: false
  name: Offset(Point)
  nameWithType: Rect.Offset(Point)
  fullName: Rect.Offset(Point)
- uid: Terminal.Rect.Offset(System.Int32,System.Int32)
  parent: Terminal.Rect
  isExternal: false
  name: Offset(Int32, Int32)
  nameWithType: Rect.Offset(Int32, Int32)
  fullName: Rect.Offset(Int32, Int32)
- uid: Terminal.Rect.op_Equality(Terminal.Rect,Terminal.Rect)
  parent: Terminal.Rect
  isExternal: false
  name: op_Equality(Rect, Rect)
  nameWithType: Rect.op_Equality(Rect, Rect)
  fullName: Rect.op_Equality(Rect, Rect)
- uid: Terminal.Rect.op_Inequality(Terminal.Rect,Terminal.Rect)
  parent: Terminal.Rect
  isExternal: false
  name: op_Inequality(Rect, Rect)
  nameWithType: Rect.op_Inequality(Rect, Rect)
  fullName: Rect.op_Inequality(Rect, Rect)
- uid: Terminal.Rect.Right
  parent: Terminal.Rect
  isExternal: false
  name: Right
  nameWithType: Rect.Right
  fullName: Rect.Right
- uid: Terminal.Rect.Size
  parent: Terminal.Rect
  isExternal: false
  name: Size
  nameWithType: Rect.Size
  fullName: Rect.Size
- uid: Terminal.Rect.Top
  parent: Terminal.Rect
  isExternal: false
  name: Top
  nameWithType: Rect.Top
  fullName: Rect.Top
- uid: Terminal.Rect.ToString
  parent: Terminal.Rect
  isExternal: false
  name: ToString()
  nameWithType: Rect.ToString()
  fullName: Rect.ToString()
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Terminal.Rect.Union(Terminal.Rect,Terminal.Rect)
  parent: Terminal.Rect
  isExternal: false
  name: Union(Rect, Rect)
  nameWithType: Rect.Union(Rect, Rect)
  fullName: Rect.Union(Rect, Rect)
- uid: Terminal.Rect.Width
  parent: Terminal.Rect
  isExternal: false
  name: Width
  nameWithType: Rect.Width
  fullName: Rect.Width
- uid: Terminal.Rect.X
  parent: Terminal.Rect
  isExternal: false
  name: X
  nameWithType: Rect.X
  fullName: Rect.X
- uid: Terminal.Rect.Y
  parent: Terminal.Rect
  isExternal: false
  name: Y
  nameWithType: Rect.Y
  fullName: Rect.Y
- uid: Terminal.Rect.#ctor*
  parent: Terminal.Rect
  isExternal: false
  name: Rect
  nameWithType: Rect.Rect
  fullName: Rect.Rect
- uid: Terminal.Rect.Bottom*
  parent: Terminal.Rect
  isExternal: false
  name: Bottom
  nameWithType: Rect.Bottom
  fullName: Rect.Bottom
- uid: Terminal.Rect.Contains*
  parent: Terminal.Rect
  isExternal: false
  name: Contains
  nameWithType: Rect.Contains
  fullName: Rect.Contains
- uid: Terminal.Rect.Equals*
  parent: Terminal.Rect
  isExternal: false
  name: Equals
  nameWithType: Rect.Equals
  fullName: Rect.Equals
- uid: Terminal.Rect.FromLTRB*
  parent: Terminal.Rect
  isExternal: false
  name: FromLTRB
  nameWithType: Rect.FromLTRB
  fullName: Rect.FromLTRB
- uid: Terminal.Rect.GetHashCode*
  parent: Terminal.Rect
  isExternal: false
  name: GetHashCode
  nameWithType: Rect.GetHashCode
  fullName: Rect.GetHashCode
- uid: Terminal.Rect.Inflate*
  parent: Terminal.Rect
  isExternal: false
  name: Inflate
  nameWithType: Rect.Inflate
  fullName: Rect.Inflate
- uid: Terminal.Rect.Intersect*
  parent: Terminal.Rect
  isExternal: false
  name: Intersect
  nameWithType: Rect.Intersect
  fullName: Rect.Intersect
- uid: Terminal.Rect.IntersectsWith*
  parent: Terminal.Rect
  isExternal: false
  name: IntersectsWith
  nameWithType: Rect.IntersectsWith
  fullName: Rect.IntersectsWith
- uid: Terminal.Rect.IsEmpty*
  parent: Terminal.Rect
  isExternal: false
  name: IsEmpty
  nameWithType: Rect.IsEmpty
  fullName: Rect.IsEmpty
- uid: Terminal.Rect.Left*
  parent: Terminal.Rect
  isExternal: false
  name: Left
  nameWithType: Rect.Left
  fullName: Rect.Left
- uid: Terminal.Rect.Location*
  parent: Terminal.Rect
  isExternal: false
  name: Location
  nameWithType: Rect.Location
  fullName: Rect.Location
- uid: Terminal.Rect.Offset*
  parent: Terminal.Rect
  isExternal: false
  name: Offset
  nameWithType: Rect.Offset
  fullName: Rect.Offset
- uid: Terminal.Rect.op_Equality*
  parent: Terminal.Rect
  isExternal: false
  name: op_Equality
  nameWithType: Rect.op_Equality
  fullName: Rect.op_Equality
- uid: Terminal.Rect.op_Inequality*
  parent: Terminal.Rect
  isExternal: false
  name: op_Inequality
  nameWithType: Rect.op_Inequality
  fullName: Rect.op_Inequality
- uid: Terminal.Rect.Right*
  parent: Terminal.Rect
  isExternal: false
  name: Right
  nameWithType: Rect.Right
  fullName: Rect.Right
- uid: Terminal.Rect.Size*
  parent: Terminal.Rect
  isExternal: false
  name: Size
  nameWithType: Rect.Size
  fullName: Rect.Size
- uid: Terminal.Rect.Top*
  parent: Terminal.Rect
  isExternal: false
  name: Top
  nameWithType: Rect.Top
  fullName: Rect.Top
- uid: Terminal.Rect.ToString*
  parent: Terminal.Rect
  isExternal: false
  name: ToString
  nameWithType: Rect.ToString
  fullName: Rect.ToString
- uid: Terminal.Rect.Union*
  parent: Terminal.Rect
  isExternal: false
  name: Union
  nameWithType: Rect.Union
  fullName: Rect.Union
