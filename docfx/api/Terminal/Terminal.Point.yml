### YamlMime:ManagedReference
items:
- uid: Terminal.Point
  id: Point
  children:
  - Terminal.Point.#ctor(Terminal.Size)
  - Terminal.Point.#ctor(System.Int32,System.Int32)
  - Terminal.Point.Add(Terminal.Point,Terminal.Size)
  - Terminal.Point.Empty
  - Terminal.Point.Equals(System.Object)
  - Terminal.Point.GetHashCode
  - Terminal.Point.IsEmpty
  - Terminal.Point.Offset(System.Int32,System.Int32)
  - Terminal.Point.Offset(Terminal.Point)
  - Terminal.Point.op_Addition(Terminal.Point,Terminal.Size)
  - Terminal.Point.op_Equality(Terminal.Point,Terminal.Point)
  - Terminal.Point.op_Explicit(Terminal.Point to Terminal.Size)
  - Terminal.Point.op_Inequality(Terminal.Point,Terminal.Point)
  - Terminal.Point.op_Subtraction(Terminal.Point,Terminal.Size)
  - Terminal.Point.Subtract(Terminal.Point,Terminal.Size)
  - Terminal.Point.ToString
  - Terminal.Point.X
  - Terminal.Point.Y
  langs:
  - csharp
  name: Point
  nameWithType: Point
  fullName: Terminal.Point
  type: Struct
  assemblies:
  - Terminal
  namespace: Terminal
  summary: Represents an ordered pair of integer x- and y-coordinates that defines a point in a two-dimensional plane.
  syntax:
    content: public struct Point
  inheritance:
  - System.ValueType
  implements: []
- uid: Terminal.Point.#ctor(Terminal.Size)
  id: '#ctor(Terminal.Size)'
  parent: Terminal.Point
  langs:
  - csharp
  name: Point(Size)
  nameWithType: Point.Point(Size)
  fullName: Point.Point(Size)
  type: Constructor
  assemblies:
  - Terminal
  namespace: Terminal
  summary: Point Constructor
  remarks: Creates a Point from a Size value.
  syntax:
    content: public Point (Terminal.Size sz);
    parameters:
    - id: sz
      type: Terminal.Size
      description: To be added.
  overload: Terminal.Point.#ctor*
  exceptions: []
- uid: Terminal.Point.#ctor(System.Int32,System.Int32)
  id: '#ctor(System.Int32,System.Int32)'
  parent: Terminal.Point
  langs:
  - csharp
  name: Point(Int32, Int32)
  nameWithType: Point.Point(Int32, Int32)
  fullName: Point.Point(Int32, Int32)
  type: Constructor
  assemblies:
  - Terminal
  namespace: Terminal
  summary: Point Constructor
  remarks: Creates a Point from a specified x,y coordinate pair.
  syntax:
    content: public Point (int x, int y);
    parameters:
    - id: x
      type: System.Int32
      description: To be added.
    - id: y
      type: System.Int32
      description: To be added.
  overload: Terminal.Point.#ctor*
  exceptions: []
- uid: Terminal.Point.Add(Terminal.Point,Terminal.Size)
  id: Add(Terminal.Point,Terminal.Size)
  parent: Terminal.Point
  langs:
  - csharp
  name: Add(Point, Size)
  nameWithType: Point.Add(Point, Size)
  fullName: Point.Add(Point, Size)
  type: Method
  assemblies:
  - Terminal
  namespace: Terminal
  summary: Adds the specified Size to the specified Point.
  syntax:
    content: public static Terminal.Point Add (Terminal.Point pt, Terminal.Size sz);
    parameters:
    - id: pt
      type: Terminal.Point
      description: The Point to add.
    - id: sz
      type: Terminal.Size
      description: The Size to add.
    return:
      type: Terminal.Point
      description: The Point that is the result of the addition operation.
  overload: Terminal.Point.Add*
  exceptions: []
- uid: Terminal.Point.Empty
  id: Empty
  parent: Terminal.Point
  langs:
  - csharp
  name: Empty
  nameWithType: Point.Empty
  fullName: Point.Empty
  type: Field
  assemblies:
  - Terminal
  namespace: Terminal
  summary: Empty Shared Field
  remarks: An uninitialized Point Structure.
  syntax:
    content: public static readonly Terminal.Point Empty;
    return:
      type: Terminal.Point
      description: To be added.
  exceptions: []
- uid: Terminal.Point.Equals(System.Object)
  id: Equals(System.Object)
  parent: Terminal.Point
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: Point.Equals(Object)
  fullName: Point.Equals(Object)
  type: Method
  assemblies:
  - Terminal
  namespace: Terminal
  summary: Equals Method
  remarks: Checks equivalence of this Point and another object.
  syntax:
    content: public override bool Equals (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: Terminal.Point.Equals*
  exceptions: []
- uid: Terminal.Point.GetHashCode
  id: GetHashCode
  parent: Terminal.Point
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: Point.GetHashCode()
  fullName: Point.GetHashCode()
  type: Method
  assemblies:
  - Terminal
  namespace: Terminal
  summary: GetHashCode Method
  remarks: Calculates a hashing value.
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: To be added.
  overload: Terminal.Point.GetHashCode*
  exceptions: []
- uid: Terminal.Point.IsEmpty
  id: IsEmpty
  parent: Terminal.Point
  langs:
  - csharp
  name: IsEmpty
  nameWithType: Point.IsEmpty
  fullName: Point.IsEmpty
  type: Property
  assemblies:
  - Terminal
  namespace: Terminal
  summary: IsEmpty Property
  remarks: Indicates if both X and Y are zero.
  syntax:
    content: public bool IsEmpty { get; }
    return:
      type: System.Boolean
      description: To be added.
  overload: Terminal.Point.IsEmpty*
  exceptions: []
- uid: Terminal.Point.Offset(System.Int32,System.Int32)
  id: Offset(System.Int32,System.Int32)
  parent: Terminal.Point
  langs:
  - csharp
  name: Offset(Int32, Int32)
  nameWithType: Point.Offset(Int32, Int32)
  fullName: Point.Offset(Int32, Int32)
  type: Method
  assemblies:
  - Terminal
  namespace: Terminal
  summary: Offset Method
  remarks: Moves the Point a specified distance.
  syntax:
    content: public void Offset (int dx, int dy);
    parameters:
    - id: dx
      type: System.Int32
      description: To be added.
    - id: dy
      type: System.Int32
      description: To be added.
  overload: Terminal.Point.Offset*
  exceptions: []
- uid: Terminal.Point.Offset(Terminal.Point)
  id: Offset(Terminal.Point)
  parent: Terminal.Point
  langs:
  - csharp
  name: Offset(Point)
  nameWithType: Point.Offset(Point)
  fullName: Point.Offset(Point)
  type: Method
  assemblies:
  - Terminal
  namespace: Terminal
  summary: Translates this Point by the specified Point.
  syntax:
    content: public void Offset (Terminal.Point p);
    parameters:
    - id: p
      type: Terminal.Point
      description: The Point used offset this Point.
  overload: Terminal.Point.Offset*
  exceptions: []
- uid: Terminal.Point.op_Addition(Terminal.Point,Terminal.Size)
  id: op_Addition(Terminal.Point,Terminal.Size)
  parent: Terminal.Point
  langs:
  - csharp
  name: op_Addition(Point, Size)
  nameWithType: Point.op_Addition(Point, Size)
  fullName: Point.op_Addition(Point, Size)
  type: Operator
  assemblies:
  - Terminal
  namespace: Terminal
  summary: Addition Operator
  remarks: >-
    Translates a Point using the Width and Height
                	properties of the given <typeref>Size</typeref>.
  syntax:
    content: public static Terminal.Point op_Addition (Terminal.Point pt, Terminal.Size sz);
    parameters:
    - id: pt
      type: Terminal.Point
      description: To be added.
    - id: sz
      type: Terminal.Size
      description: To be added.
    return:
      type: Terminal.Point
      description: To be added.
  overload: Terminal.Point.op_Addition*
  exceptions: []
- uid: Terminal.Point.op_Equality(Terminal.Point,Terminal.Point)
  id: op_Equality(Terminal.Point,Terminal.Point)
  parent: Terminal.Point
  langs:
  - csharp
  name: op_Equality(Point, Point)
  nameWithType: Point.op_Equality(Point, Point)
  fullName: Point.op_Equality(Point, Point)
  type: Operator
  assemblies:
  - Terminal
  namespace: Terminal
  summary: Equality Operator
  remarks: "Compares two Point objects. The return value is\n            	based on the equivalence of the X and Y properties \n            	of the two points."
  syntax:
    content: public static bool op_Equality (Terminal.Point left, Terminal.Point right);
    parameters:
    - id: left
      type: Terminal.Point
      description: To be added.
    - id: right
      type: Terminal.Point
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: Terminal.Point.op_Equality*
  exceptions: []
- uid: Terminal.Point.op_Explicit(Terminal.Point to Terminal.Size)
  id: op_Explicit(Terminal.Point to Terminal.Size)
  parent: Terminal.Point
  langs:
  - csharp
  name: op_Explicit(Point to Size)
  nameWithType: Point.op_Explicit(Point to Size)
  fullName: Point.op_Explicit(Point to Size)
  type: Operator
  assemblies:
  - Terminal
  namespace: Terminal
  summary: Point to Size Conversion
  remarks: "Returns a Size based on the Coordinates of a given \n            	Point. Requires explicit cast."
  syntax:
    content: public static Terminal.Size op_Explicit (Terminal.Point p);
    parameters:
    - id: p
      type: Terminal.Point
      description: To be added.
    return:
      type: Terminal.Size
      description: To be added.
  overload: Terminal.Point.op_Explicit*
  exceptions: []
- uid: Terminal.Point.op_Inequality(Terminal.Point,Terminal.Point)
  id: op_Inequality(Terminal.Point,Terminal.Point)
  parent: Terminal.Point
  langs:
  - csharp
  name: op_Inequality(Point, Point)
  nameWithType: Point.op_Inequality(Point, Point)
  fullName: Point.op_Inequality(Point, Point)
  type: Operator
  assemblies:
  - Terminal
  namespace: Terminal
  summary: Inequality Operator
  remarks: "Compares two Point objects. The return value is\n            	based on the equivalence of the X and Y properties \n            	of the two points."
  syntax:
    content: public static bool op_Inequality (Terminal.Point left, Terminal.Point right);
    parameters:
    - id: left
      type: Terminal.Point
      description: To be added.
    - id: right
      type: Terminal.Point
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: Terminal.Point.op_Inequality*
  exceptions: []
- uid: Terminal.Point.op_Subtraction(Terminal.Point,Terminal.Size)
  id: op_Subtraction(Terminal.Point,Terminal.Size)
  parent: Terminal.Point
  langs:
  - csharp
  name: op_Subtraction(Point, Size)
  nameWithType: Point.op_Subtraction(Point, Size)
  fullName: Point.op_Subtraction(Point, Size)
  type: Operator
  assemblies:
  - Terminal
  namespace: Terminal
  summary: Subtraction Operator
  remarks: "Translates a Point using the negation of the Width \n            	and Height properties of the given Size."
  syntax:
    content: public static Terminal.Point op_Subtraction (Terminal.Point pt, Terminal.Size sz);
    parameters:
    - id: pt
      type: Terminal.Point
      description: To be added.
    - id: sz
      type: Terminal.Size
      description: To be added.
    return:
      type: Terminal.Point
      description: To be added.
  overload: Terminal.Point.op_Subtraction*
  exceptions: []
- uid: Terminal.Point.Subtract(Terminal.Point,Terminal.Size)
  id: Subtract(Terminal.Point,Terminal.Size)
  parent: Terminal.Point
  langs:
  - csharp
  name: Subtract(Point, Size)
  nameWithType: Point.Subtract(Point, Size)
  fullName: Point.Subtract(Point, Size)
  type: Method
  assemblies:
  - Terminal
  namespace: Terminal
  summary: Returns the result of subtracting specified Size from the specified Point.
  syntax:
    content: public static Terminal.Point Subtract (Terminal.Point pt, Terminal.Size sz);
    parameters:
    - id: pt
      type: Terminal.Point
      description: The Point to be subtracted from.
    - id: sz
      type: Terminal.Size
      description: The Size to subtract from the Point.
    return:
      type: Terminal.Point
      description: The Point that is the result of the subtraction operation.
  overload: Terminal.Point.Subtract*
  exceptions: []
- uid: Terminal.Point.ToString
  id: ToString
  parent: Terminal.Point
  langs:
  - csharp
  name: ToString()
  nameWithType: Point.ToString()
  fullName: Point.ToString()
  type: Method
  assemblies:
  - Terminal
  namespace: Terminal
  summary: ToString Method
  remarks: Formats the Point as a string in coordinate notation.
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: To be added.
  overload: Terminal.Point.ToString*
  exceptions: []
- uid: Terminal.Point.X
  id: X
  parent: Terminal.Point
  langs:
  - csharp
  name: X
  nameWithType: Point.X
  fullName: Point.X
  type: Field
  assemblies:
  - Terminal
  namespace: Terminal
  summary: Gets or sets the x-coordinate of this Point.
  syntax:
    content: public int X;
    return:
      type: System.Int32
      description: To be added.
  exceptions: []
- uid: Terminal.Point.Y
  id: Y
  parent: Terminal.Point
  langs:
  - csharp
  name: Y
  nameWithType: Point.Y
  fullName: Point.Y
  type: Field
  assemblies:
  - Terminal
  namespace: Terminal
  summary: Gets or sets the y-coordinate of this Point.
  syntax:
    content: public int Y;
    return:
      type: System.Int32
      description: To be added.
  exceptions: []
references:
- uid: System.ValueType
  parent: System
  isExternal: true
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: Terminal.Point.#ctor(Terminal.Size)
  parent: Terminal.Point
  isExternal: false
  name: Point(Size)
  nameWithType: Point.Point(Size)
  fullName: Point.Point(Size)
- uid: Terminal.Size
  parent: Terminal
  isExternal: false
  name: Size
  nameWithType: Size
  fullName: Terminal.Size
- uid: Terminal.Point.#ctor(System.Int32,System.Int32)
  parent: Terminal.Point
  isExternal: false
  name: Point(Int32, Int32)
  nameWithType: Point.Point(Int32, Int32)
  fullName: Point.Point(Int32, Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Terminal.Point.Add(Terminal.Point,Terminal.Size)
  parent: Terminal.Point
  isExternal: false
  name: Add(Point, Size)
  nameWithType: Point.Add(Point, Size)
  fullName: Point.Add(Point, Size)
- uid: Terminal.Point
  parent: Terminal
  isExternal: false
  name: Point
  nameWithType: Point
  fullName: Terminal.Point
- uid: Terminal.Point.Empty
  parent: Terminal.Point
  isExternal: false
  name: Empty
  nameWithType: Point.Empty
  fullName: Point.Empty
- uid: Terminal.Point.Equals(System.Object)
  parent: Terminal.Point
  isExternal: false
  name: Equals(Object)
  nameWithType: Point.Equals(Object)
  fullName: Point.Equals(Object)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Terminal.Point.GetHashCode
  parent: Terminal.Point
  isExternal: false
  name: GetHashCode()
  nameWithType: Point.GetHashCode()
  fullName: Point.GetHashCode()
- uid: Terminal.Point.IsEmpty
  parent: Terminal.Point
  isExternal: false
  name: IsEmpty
  nameWithType: Point.IsEmpty
  fullName: Point.IsEmpty
- uid: Terminal.Point.Offset(System.Int32,System.Int32)
  parent: Terminal.Point
  isExternal: false
  name: Offset(Int32, Int32)
  nameWithType: Point.Offset(Int32, Int32)
  fullName: Point.Offset(Int32, Int32)
- uid: Terminal.Point.Offset(Terminal.Point)
  parent: Terminal.Point
  isExternal: false
  name: Offset(Point)
  nameWithType: Point.Offset(Point)
  fullName: Point.Offset(Point)
- uid: Terminal.Point.op_Addition(Terminal.Point,Terminal.Size)
  parent: Terminal.Point
  isExternal: false
  name: op_Addition(Point, Size)
  nameWithType: Point.op_Addition(Point, Size)
  fullName: Point.op_Addition(Point, Size)
- uid: Terminal.Point.op_Equality(Terminal.Point,Terminal.Point)
  parent: Terminal.Point
  isExternal: false
  name: op_Equality(Point, Point)
  nameWithType: Point.op_Equality(Point, Point)
  fullName: Point.op_Equality(Point, Point)
- uid: Terminal.Point.op_Explicit(Terminal.Point to Terminal.Size)
  parent: Terminal.Point
  isExternal: false
  name: op_Explicit(Point to Size)
  nameWithType: Point.op_Explicit(Point to Size)
  fullName: Point.op_Explicit(Point to Size)
- uid: Terminal.Point.op_Inequality(Terminal.Point,Terminal.Point)
  parent: Terminal.Point
  isExternal: false
  name: op_Inequality(Point, Point)
  nameWithType: Point.op_Inequality(Point, Point)
  fullName: Point.op_Inequality(Point, Point)
- uid: Terminal.Point.op_Subtraction(Terminal.Point,Terminal.Size)
  parent: Terminal.Point
  isExternal: false
  name: op_Subtraction(Point, Size)
  nameWithType: Point.op_Subtraction(Point, Size)
  fullName: Point.op_Subtraction(Point, Size)
- uid: Terminal.Point.Subtract(Terminal.Point,Terminal.Size)
  parent: Terminal.Point
  isExternal: false
  name: Subtract(Point, Size)
  nameWithType: Point.Subtract(Point, Size)
  fullName: Point.Subtract(Point, Size)
- uid: Terminal.Point.ToString
  parent: Terminal.Point
  isExternal: false
  name: ToString()
  nameWithType: Point.ToString()
  fullName: Point.ToString()
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Terminal.Point.X
  parent: Terminal.Point
  isExternal: false
  name: X
  nameWithType: Point.X
  fullName: Point.X
- uid: Terminal.Point.Y
  parent: Terminal.Point
  isExternal: false
  name: Y
  nameWithType: Point.Y
  fullName: Point.Y
- uid: Terminal.Point.#ctor*
  parent: Terminal.Point
  isExternal: false
  name: Point
  nameWithType: Point.Point
  fullName: Point.Point
- uid: Terminal.Point.Add*
  parent: Terminal.Point
  isExternal: false
  name: Add
  nameWithType: Point.Add
  fullName: Point.Add
- uid: Terminal.Point.Equals*
  parent: Terminal.Point
  isExternal: false
  name: Equals
  nameWithType: Point.Equals
  fullName: Point.Equals
- uid: Terminal.Point.GetHashCode*
  parent: Terminal.Point
  isExternal: false
  name: GetHashCode
  nameWithType: Point.GetHashCode
  fullName: Point.GetHashCode
- uid: Terminal.Point.IsEmpty*
  parent: Terminal.Point
  isExternal: false
  name: IsEmpty
  nameWithType: Point.IsEmpty
  fullName: Point.IsEmpty
- uid: Terminal.Point.Offset*
  parent: Terminal.Point
  isExternal: false
  name: Offset
  nameWithType: Point.Offset
  fullName: Point.Offset
- uid: Terminal.Point.op_Addition*
  parent: Terminal.Point
  isExternal: false
  name: op_Addition
  nameWithType: Point.op_Addition
  fullName: Point.op_Addition
- uid: Terminal.Point.op_Equality*
  parent: Terminal.Point
  isExternal: false
  name: op_Equality
  nameWithType: Point.op_Equality
  fullName: Point.op_Equality
- uid: Terminal.Point.op_Explicit*
  parent: Terminal.Point
  isExternal: false
  name: op_Explicit
  nameWithType: Point.op_Explicit
  fullName: Point.op_Explicit
- uid: Terminal.Point.op_Inequality*
  parent: Terminal.Point
  isExternal: false
  name: op_Inequality
  nameWithType: Point.op_Inequality
  fullName: Point.op_Inequality
- uid: Terminal.Point.op_Subtraction*
  parent: Terminal.Point
  isExternal: false
  name: op_Subtraction
  nameWithType: Point.op_Subtraction
  fullName: Point.op_Subtraction
- uid: Terminal.Point.Subtract*
  parent: Terminal.Point
  isExternal: false
  name: Subtract
  nameWithType: Point.Subtract
  fullName: Point.Subtract
- uid: Terminal.Point.ToString*
  parent: Terminal.Point
  isExternal: false
  name: ToString
  nameWithType: Point.ToString
  fullName: Point.ToString
