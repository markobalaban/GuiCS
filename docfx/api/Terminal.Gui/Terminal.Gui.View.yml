### YamlMime:ManagedReference
items:
- uid: Terminal.Gui.View
  commentId: T:Terminal.Gui.View
  id: View
  parent: Terminal.Gui
  children:
  - Terminal.Gui.View.#ctor
  - Terminal.Gui.View.#ctor(Terminal.Gui.Rect)
  - Terminal.Gui.View.Add(Terminal.Gui.View)
  - Terminal.Gui.View.Add(Terminal.Gui.View[])
  - Terminal.Gui.View.AddRune(System.Int32,System.Int32,System.Rune)
  - Terminal.Gui.View.Bounds
  - Terminal.Gui.View.BringSubviewForward(Terminal.Gui.View)
  - Terminal.Gui.View.BringSubviewToFront(Terminal.Gui.View)
  - Terminal.Gui.View.ChildNeedsDisplay
  - Terminal.Gui.View.Clear
  - Terminal.Gui.View.Clear(Terminal.Gui.Rect)
  - Terminal.Gui.View.ClearNeedsDisplay
  - Terminal.Gui.View.ClipToBounds
  - Terminal.Gui.View.ColorScheme
  - Terminal.Gui.View.DrawFrame(Terminal.Gui.Rect,System.Int32,System.Boolean)
  - Terminal.Gui.View.DrawHotString(NStack.ustring,System.Boolean,Terminal.Gui.ColorScheme)
  - Terminal.Gui.View.DrawHotString(NStack.ustring,Terminal.Gui.Attribute,Terminal.Gui.Attribute)
  - Terminal.Gui.View.Driver
  - Terminal.Gui.View.EnsureFocus
  - Terminal.Gui.View.Enter
  - Terminal.Gui.View.Focused
  - Terminal.Gui.View.FocusFirst
  - Terminal.Gui.View.FocusLast
  - Terminal.Gui.View.FocusNext
  - Terminal.Gui.View.FocusPrev
  - Terminal.Gui.View.Frame
  - Terminal.Gui.View.GetEnumerator
  - Terminal.Gui.View.HasFocus
  - Terminal.Gui.View.Height
  - Terminal.Gui.View.Id
  - Terminal.Gui.View.IsCurrentTop
  - Terminal.Gui.View.KeyDown
  - Terminal.Gui.View.KeyPress
  - Terminal.Gui.View.KeyUp
  - Terminal.Gui.View.LayoutStyle
  - Terminal.Gui.View.LayoutSubviews
  - Terminal.Gui.View.Leave
  - Terminal.Gui.View.MostFocused
  - Terminal.Gui.View.MouseEnter
  - Terminal.Gui.View.MouseLeave
  - Terminal.Gui.View.Move(System.Int32,System.Int32)
  - Terminal.Gui.View.OnEnter
  - Terminal.Gui.View.OnKeyDown(Terminal.Gui.KeyEvent)
  - Terminal.Gui.View.OnKeyUp(Terminal.Gui.KeyEvent)
  - Terminal.Gui.View.OnLeave
  - Terminal.Gui.View.OnMouseEnter(Terminal.Gui.MouseEvent)
  - Terminal.Gui.View.OnMouseLeave(Terminal.Gui.MouseEvent)
  - Terminal.Gui.View.PositionCursor
  - Terminal.Gui.View.ProcessColdKey(Terminal.Gui.KeyEvent)
  - Terminal.Gui.View.ProcessHotKey(Terminal.Gui.KeyEvent)
  - Terminal.Gui.View.ProcessKey(Terminal.Gui.KeyEvent)
  - Terminal.Gui.View.Redraw(Terminal.Gui.Rect)
  - Terminal.Gui.View.Remove(Terminal.Gui.View)
  - Terminal.Gui.View.RemoveAll
  - Terminal.Gui.View.ScreenToView(System.Int32,System.Int32)
  - Terminal.Gui.View.SendSubviewBackwards(Terminal.Gui.View)
  - Terminal.Gui.View.SendSubviewToBack(Terminal.Gui.View)
  - Terminal.Gui.View.SetClip(Terminal.Gui.Rect)
  - Terminal.Gui.View.SetFocus(Terminal.Gui.View)
  - Terminal.Gui.View.SetNeedsDisplay
  - Terminal.Gui.View.SetNeedsDisplay(Terminal.Gui.Rect)
  - Terminal.Gui.View.Subviews
  - Terminal.Gui.View.SuperView
  - Terminal.Gui.View.ToString
  - Terminal.Gui.View.WantContinuousButtonPressed
  - Terminal.Gui.View.WantMousePositionReports
  - Terminal.Gui.View.Width
  - Terminal.Gui.View.X
  - Terminal.Gui.View.Y
  langs:
  - csharp
  - vb
  name: View
  nameWithType: View
  fullName: Terminal.Gui.View
  type: Class
  source:
    remote:
      path: Terminal.Gui/Core.cs
      branch: docs_tweaks
      repo: tig:tig/gui.cs.git
    id: View
    path: ../Terminal.Gui/Core.cs
    startLine: 280
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: "\nView is the base class for all views on the screen and represents a visible element that can render itself and contains zero or more nested views.\n"
  remarks: "\n<p>\n   The View defines the base functionality for user interface elements in Terminal/gui.cs.  Views\n   can contain one or more subviews, can respond to user input and render themselves on the screen.\n</p>\n<p>\n   Views can either be created with an absolute position, by calling the constructor that takes a\n   Rect parameter to specify the absolute position and size (the Frame of the View) or by setting the\n   X, Y, Width and Height properties on the view.    Both approaches use coordinates that are relative\n   to the container they are being added to.\n</p>\n<p>\n   When you do not specify a Rect frame you can use the more flexible\n   Dim and Pos objects that can dynamically update the position of a view.\n   The X and Y properties are of type <xref href=\"Terminal.Gui.Pos\" data-throw-if-not-resolved=\"false\"></xref>\n   and you can use either absolute positions, percentages or anchor\n   points.   The Width and Height properties are of type\n<xref href=\"Terminal.Gui.Dim\" data-throw-if-not-resolved=\"false\"></xref> and can use absolute position,\npercentages and anchors.  These are useful as they will take\ncare of repositioning your views if your view&apos;s frames are resized\nor if the terminal size changes.\n</p>\n<p>\n   When you specify the Rect parameter to a view, you are setting the LayoutStyle to Absolute, and the\n   view will always stay in the position that you placed it.   To change the position change the\n   Frame property to the new position.\n</p>\n<p>\n   Subviews can be added to a View by calling the Add method.   The container of a view is the\n   Superview.\n</p>\n<p>\n   Developers can call the SetNeedsDisplay method on the view to flag a region or the entire view\n   as requiring to be redrawn.\n</p>\n<p>\n   Views have a ColorScheme property that defines the default colors that subviews\n   should use for rendering.   This ensures that the views fit in the context where\n   they are being used, and allows for themes to be plugged in.   For example, the\n   default colors for windows and toplevels uses a blue background, while it uses\n   a white background for dialog boxes and a red background for errors.\n</p>\n<p>\n   If a ColorScheme is not set on a view, the result of the ColorScheme is the\n   value of the SuperView and the value might only be valid once a view has been\n   added to a SuperView, so your subclasses should not rely on ColorScheme being\n   set at construction time.\n</p>\n<p>\n   Using ColorSchemes has the advantage that your application will work both\n   in color as well as black and white displays.\n</p>\n<p>\n   Views that are focusable should implement the PositionCursor to make sure that\n   the cursor is placed in a location that makes sense.   Unix terminals do not have\n   a way of hiding the cursor, so it can be distracting to have the cursor left at\n   the last focused view.   So views should make sure that they place the cursor\n   in a visually sensible place.\n</p>\n<p>\n   The metnod LayoutSubviews is invoked when the size or layout of a view has\n   changed.   The default processing system will keep the size and dimensions\n   for views that use the LayoutKind.Absolute, and will recompute the\n   frames for the vies that use LayoutKind.Computed.\n</p>\n"
  example: []
  syntax:
    content: 'public class View : Responder, IEnumerable'
    content.vb: >-
      Public Class View

          Inherits Responder

          Implements IEnumerable
  inheritance:
  - System.Object
  - Terminal.Gui.Responder
  derivedClasses:
  - Terminal.Gui.Button
  - Terminal.Gui.CheckBox
  - Terminal.Gui.ComboBox
  - Terminal.Gui.FrameView
  - Terminal.Gui.HexView
  - Terminal.Gui.Label
  - Terminal.Gui.ListView
  - Terminal.Gui.MenuBar
  - Terminal.Gui.ProgressBar
  - Terminal.Gui.RadioGroup
  - Terminal.Gui.ScrollBarView
  - Terminal.Gui.ScrollView
  - Terminal.Gui.StatusBar
  - Terminal.Gui.TextField
  - Terminal.Gui.TextView
  - Terminal.Gui.Toplevel
  implements:
  - System.Collections.IEnumerable
  inheritedMembers:
  - Terminal.Gui.Responder.CanFocus
  - Terminal.Gui.Responder.MouseEvent(Terminal.Gui.MouseEvent)
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Terminal.Gui.View.Enter
  commentId: E:Terminal.Gui.View.Enter
  id: Enter
  parent: Terminal.Gui.View
  langs:
  - csharp
  - vb
  name: Enter
  nameWithType: View.Enter
  fullName: Terminal.Gui.View.Enter
  type: Event
  source:
    remote:
      path: Terminal.Gui/Core.cs
      branch: docs_tweaks
      repo: tig:tig/gui.cs.git
    id: Enter
    path: ../Terminal.Gui/Core.cs
    startLine: 293
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: "\nEvent fired when the view get focus.\n"
  example: []
  syntax:
    content: public event EventHandler Enter
    return:
      type: System.EventHandler
    content.vb: Public Event Enter As EventHandler
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Terminal.Gui.View.Leave
  commentId: E:Terminal.Gui.View.Leave
  id: Leave
  parent: Terminal.Gui.View
  langs:
  - csharp
  - vb
  name: Leave
  nameWithType: View.Leave
  fullName: Terminal.Gui.View.Leave
  type: Event
  source:
    remote:
      path: Terminal.Gui/Core.cs
      branch: docs_tweaks
      repo: tig:tig/gui.cs.git
    id: Leave
    path: ../Terminal.Gui/Core.cs
    startLine: 298
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: "\nEvent fired when the view lost focus.\n"
  example: []
  syntax:
    content: public event EventHandler Leave
    return:
      type: System.EventHandler
    content.vb: Public Event Leave As EventHandler
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Terminal.Gui.View.MouseEnter
  commentId: E:Terminal.Gui.View.MouseEnter
  id: MouseEnter
  parent: Terminal.Gui.View
  langs:
  - csharp
  - vb
  name: MouseEnter
  nameWithType: View.MouseEnter
  fullName: Terminal.Gui.View.MouseEnter
  type: Event
  source:
    remote:
      path: Terminal.Gui/Core.cs
      branch: docs_tweaks
      repo: tig:tig/gui.cs.git
    id: MouseEnter
    path: ../Terminal.Gui/Core.cs
    startLine: 303
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: "\nEvent fired when the view receives the mouse event for the first time.\n"
  example: []
  syntax:
    content: public event EventHandler<MouseEvent> MouseEnter
    return:
      type: System.EventHandler{Terminal.Gui.MouseEvent}
    content.vb: Public Event MouseEnter As EventHandler(Of MouseEvent)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Terminal.Gui.View.MouseLeave
  commentId: E:Terminal.Gui.View.MouseLeave
  id: MouseLeave
  parent: Terminal.Gui.View
  langs:
  - csharp
  - vb
  name: MouseLeave
  nameWithType: View.MouseLeave
  fullName: Terminal.Gui.View.MouseLeave
  type: Event
  source:
    remote:
      path: Terminal.Gui/Core.cs
      branch: docs_tweaks
      repo: tig:tig/gui.cs.git
    id: MouseLeave
    path: ../Terminal.Gui/Core.cs
    startLine: 308
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: "\nEvent fired when the view loses mouse event for the last time.\n"
  example: []
  syntax:
    content: public event EventHandler<MouseEvent> MouseLeave
    return:
      type: System.EventHandler{Terminal.Gui.MouseEvent}
    content.vb: Public Event MouseLeave As EventHandler(Of MouseEvent)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Terminal.Gui.View.Driver
  commentId: P:Terminal.Gui.View.Driver
  id: Driver
  parent: Terminal.Gui.View
  langs:
  - csharp
  - vb
  name: Driver
  nameWithType: View.Driver
  fullName: Terminal.Gui.View.Driver
  type: Property
  source:
    remote:
      path: Terminal.Gui/Core.cs
      branch: docs_tweaks
      repo: tig:tig/gui.cs.git
    id: Driver
    path: ../Terminal.Gui/Core.cs
    startLine: 324
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: "\nPoints to the current driver in use by the view, it is a convenience property\nfor simplifying the development of new views.\n"
  example: []
  syntax:
    content: public static ConsoleDriver Driver { get; }
    parameters: []
    return:
      type: Terminal.Gui.ConsoleDriver
    content.vb: Public Shared ReadOnly Property Driver As ConsoleDriver
  overload: Terminal.Gui.View.Driver*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Terminal.Gui.View.Subviews
  commentId: P:Terminal.Gui.View.Subviews
  id: Subviews
  parent: Terminal.Gui.View
  langs:
  - csharp
  - vb
  name: Subviews
  nameWithType: View.Subviews
  fullName: Terminal.Gui.View.Subviews
  type: Property
  source:
    remote:
      path: Terminal.Gui/Core.cs
      branch: docs_tweaks
      repo: tig:tig/gui.cs.git
    id: Subviews
    path: ../Terminal.Gui/Core.cs
    startLine: 335
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: "\nThis returns a list of the subviews contained by this view.\n"
  example: []
  syntax:
    content: public IList<View> Subviews { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IList{Terminal.Gui.View}
      description: The subviews.
    content.vb: Public ReadOnly Property Subviews As IList(Of View)
  overload: Terminal.Gui.View.Subviews*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Terminal.Gui.View.Id
  commentId: P:Terminal.Gui.View.Id
  id: Id
  parent: Terminal.Gui.View
  langs:
  - csharp
  - vb
  name: Id
  nameWithType: View.Id
  fullName: Terminal.Gui.View.Id
  type: Property
  source:
    remote:
      path: Terminal.Gui/Core.cs
      branch: docs_tweaks
      repo: tig:tig/gui.cs.git
    id: Id
    path: ../Terminal.Gui/Core.cs
    startLine: 350
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: "\nGets or sets an identifier for the view;\n"
  example: []
  syntax:
    content: public ustring Id { get; set; }
    parameters: []
    return:
      type: NStack.ustring
      description: The identifier.
    content.vb: Public Property Id As ustring
  overload: Terminal.Gui.View.Id*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Terminal.Gui.View.IsCurrentTop
  commentId: P:Terminal.Gui.View.IsCurrentTop
  id: IsCurrentTop
  parent: Terminal.Gui.View
  langs:
  - csharp
  - vb
  name: IsCurrentTop
  nameWithType: View.IsCurrentTop
  fullName: Terminal.Gui.View.IsCurrentTop
  type: Property
  source:
    remote:
      path: Terminal.Gui/Core.cs
      branch: docs_tweaks
      repo: tig:tig/gui.cs.git
    id: IsCurrentTop
    path: ../Terminal.Gui/Core.cs
    startLine: 355
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: "\nReturns a value indicating if this View is currently on Top (Active)\n"
  example: []
  syntax:
    content: public bool IsCurrentTop { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsCurrentTop As Boolean
  overload: Terminal.Gui.View.IsCurrentTop*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Terminal.Gui.View.WantMousePositionReports
  commentId: P:Terminal.Gui.View.WantMousePositionReports
  id: WantMousePositionReports
  parent: Terminal.Gui.View
  langs:
  - csharp
  - vb
  name: WantMousePositionReports
  nameWithType: View.WantMousePositionReports
  fullName: Terminal.Gui.View.WantMousePositionReports
  type: Property
  source:
    remote:
      path: Terminal.Gui/Core.cs
      branch: docs_tweaks
      repo: tig:tig/gui.cs.git
    id: WantMousePositionReports
    path: ../Terminal.Gui/Core.cs
    startLine: 365
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: "\nGets or sets a value indicating whether this <xref href=\"Terminal.Gui.View\" data-throw-if-not-resolved=\"false\"></xref> want mouse position reports.\n"
  example: []
  syntax:
    content: public virtual bool WantMousePositionReports { get; set; }
    parameters: []
    return:
      type: System.Boolean
      description: <code>true</code> if want mouse position reports; otherwise, <code>false</code>.
    content.vb: Public Overridable Property WantMousePositionReports As Boolean
  overload: Terminal.Gui.View.WantMousePositionReports*
  modifiers.csharp:
  - public
  - virtual
  - get
  - set
  modifiers.vb:
  - Public
  - Overridable
- uid: Terminal.Gui.View.WantContinuousButtonPressed
  commentId: P:Terminal.Gui.View.WantContinuousButtonPressed
  id: WantContinuousButtonPressed
  parent: Terminal.Gui.View
  langs:
  - csharp
  - vb
  name: WantContinuousButtonPressed
  nameWithType: View.WantContinuousButtonPressed
  fullName: Terminal.Gui.View.WantContinuousButtonPressed
  type: Property
  source:
    remote:
      path: Terminal.Gui/Core.cs
      branch: docs_tweaks
      repo: tig:tig/gui.cs.git
    id: WantContinuousButtonPressed
    path: ../Terminal.Gui/Core.cs
    startLine: 370
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: "\nGets or sets a value indicating whether this <xref href=\"Terminal.Gui.View\" data-throw-if-not-resolved=\"false\"></xref> want continuous button pressed event.\n"
  example: []
  syntax:
    content: public virtual bool WantContinuousButtonPressed { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Overridable Property WantContinuousButtonPressed As Boolean
  overload: Terminal.Gui.View.WantContinuousButtonPressed*
  modifiers.csharp:
  - public
  - virtual
  - get
  - set
  modifiers.vb:
  - Public
  - Overridable
- uid: Terminal.Gui.View.Frame
  commentId: P:Terminal.Gui.View.Frame
  id: Frame
  parent: Terminal.Gui.View
  langs:
  - csharp
  - vb
  name: Frame
  nameWithType: View.Frame
  fullName: Terminal.Gui.View.Frame
  type: Property
  source:
    remote:
      path: Terminal.Gui/Core.cs
      branch: docs_tweaks
      repo: tig:tig/gui.cs.git
    id: Frame
    path: ../Terminal.Gui/Core.cs
    startLine: 379
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: "\nGets or sets the frame for the view.\n"
  remarks: "\nAltering the Frame of a view will trigger the redrawing of the\nview as well as the redrawing of the affected regions in the superview.\n"
  example: []
  syntax:
    content: public virtual Rect Frame { get; set; }
    parameters: []
    return:
      type: Terminal.Gui.Rect
      description: The frame.
    content.vb: Public Overridable Property Frame As Rect
  overload: Terminal.Gui.View.Frame*
  modifiers.csharp:
  - public
  - virtual
  - get
  - set
  modifiers.vb:
  - Public
  - Overridable
- uid: Terminal.Gui.View.GetEnumerator
  commentId: M:Terminal.Gui.View.GetEnumerator
  id: GetEnumerator
  parent: Terminal.Gui.View
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  nameWithType: View.GetEnumerator()
  fullName: Terminal.Gui.View.GetEnumerator()
  type: Method
  source:
    remote:
      path: Terminal.Gui/Core.cs
      branch: docs_tweaks
      repo: tig:tig/gui.cs.git
    id: GetEnumerator
    path: ../Terminal.Gui/Core.cs
    startLine: 397
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: "\nGets an enumerator that enumerates the subviews in this view.\n"
  example: []
  syntax:
    content: public IEnumerator GetEnumerator()
    return:
      type: System.Collections.IEnumerator
      description: The enumerator.
    content.vb: Public Function GetEnumerator As IEnumerator
  overload: Terminal.Gui.View.GetEnumerator*
  implements:
  - System.Collections.IEnumerable.GetEnumerator
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Terminal.Gui.View.LayoutStyle
  commentId: P:Terminal.Gui.View.LayoutStyle
  id: LayoutStyle
  parent: Terminal.Gui.View
  langs:
  - csharp
  - vb
  name: LayoutStyle
  nameWithType: View.LayoutStyle
  fullName: Terminal.Gui.View.LayoutStyle
  type: Property
  source:
    remote:
      path: Terminal.Gui/Core.cs
      branch: docs_tweaks
      repo: tig:tig/gui.cs.git
    id: LayoutStyle
    path: ../Terminal.Gui/Core.cs
    startLine: 411
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: "\nControls how the view&apos;s Frame is computed during the LayoutSubviews method, if Absolute, then\nLayoutSubviews does not change the Frame properties, otherwise the Frame is updated from the\nvalues in X, Y, Width and Height properties.\n"
  example: []
  syntax:
    content: public LayoutStyle LayoutStyle { get; set; }
    parameters: []
    return:
      type: Terminal.Gui.LayoutStyle
      description: The layout style.
    content.vb: Public Property LayoutStyle As LayoutStyle
  overload: Terminal.Gui.View.LayoutStyle*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Terminal.Gui.View.Bounds
  commentId: P:Terminal.Gui.View.Bounds
  id: Bounds
  parent: Terminal.Gui.View
  langs:
  - csharp
  - vb
  name: Bounds
  nameWithType: View.Bounds
  fullName: Terminal.Gui.View.Bounds
  type: Property
  source:
    remote:
      path: Terminal.Gui/Core.cs
      branch: docs_tweaks
      repo: tig:tig/gui.cs.git
    id: Bounds
    path: ../Terminal.Gui/Core.cs
    startLine: 423
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: "\nThe bounds represent the View-relative rectangle used for this view.   Updates to the Bounds update the Frame, and has the same side effects as updating the frame.\n"
  example: []
  syntax:
    content: public Rect Bounds { get; set; }
    parameters: []
    return:
      type: Terminal.Gui.Rect
      description: The bounds.
    content.vb: Public Property Bounds As Rect
  overload: Terminal.Gui.View.Bounds*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Terminal.Gui.View.X
  commentId: P:Terminal.Gui.View.X
  id: X
  parent: Terminal.Gui.View
  langs:
  - csharp
  - vb
  name: X
  nameWithType: View.X
  fullName: Terminal.Gui.View.X
  type: Property
  source:
    remote:
      path: Terminal.Gui/Core.cs
      branch: docs_tweaks
      repo: tig:tig/gui.cs.git
    id: X
    path: ../Terminal.Gui/Core.cs
    startLine: 436
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: "\nGets or sets the X position for the view (the column).  This is only used when the LayoutStyle is Computed, if the\nLayoutStyle is set to Absolute, this value is ignored.\n"
  example: []
  syntax:
    content: public Pos X { get; set; }
    parameters: []
    return:
      type: Terminal.Gui.Pos
      description: The X Position.
    content.vb: Public Property X As Pos
  overload: Terminal.Gui.View.X*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Terminal.Gui.View.Y
  commentId: P:Terminal.Gui.View.Y
  id: Y
  parent: Terminal.Gui.View
  langs:
  - csharp
  - vb
  name: Y
  nameWithType: View.Y
  fullName: Terminal.Gui.View.Y
  type: Property
  source:
    remote:
      path: Terminal.Gui/Core.cs
      branch: docs_tweaks
      repo: tig:tig/gui.cs.git
    id: Y
    path: ../Terminal.Gui/Core.cs
    startLine: 449
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: "\nGets or sets the Y position for the view (line).  This is only used when the LayoutStyle is Computed, if the\nLayoutStyle is set to Absolute, this value is ignored.\n"
  example: []
  syntax:
    content: public Pos Y { get; set; }
    parameters: []
    return:
      type: Terminal.Gui.Pos
      description: The y position (line).
    content.vb: Public Property Y As Pos
  overload: Terminal.Gui.View.Y*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Terminal.Gui.View.Width
  commentId: P:Terminal.Gui.View.Width
  id: Width
  parent: Terminal.Gui.View
  langs:
  - csharp
  - vb
  name: Width
  nameWithType: View.Width
  fullName: Terminal.Gui.View.Width
  type: Property
  source:
    remote:
      path: Terminal.Gui/Core.cs
      branch: docs_tweaks
      repo: tig:tig/gui.cs.git
    id: Width
    path: ../Terminal.Gui/Core.cs
    startLine: 464
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: "\nGets or sets the width for the view. This is only used when the LayoutStyle is Computed, if the\nLayoutStyle is set to Absolute, this value is ignored.\n"
  example: []
  syntax:
    content: public Dim Width { get; set; }
    parameters: []
    return:
      type: Terminal.Gui.Dim
      description: The width.
    content.vb: 'Public Property Width As '
  overload: Terminal.Gui.View.Width*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Terminal.Gui.View.Height
  commentId: P:Terminal.Gui.View.Height
  id: Height
  parent: Terminal.Gui.View
  langs:
  - csharp
  - vb
  name: Height
  nameWithType: View.Height
  fullName: Terminal.Gui.View.Height
  type: Property
  source:
    remote:
      path: Terminal.Gui/Core.cs
      branch: docs_tweaks
      repo: tig:tig/gui.cs.git
    id: Height
    path: ../Terminal.Gui/Core.cs
    startLine: 477
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: "\nGets or sets the height for the view. This is only used when the LayoutStyle is Computed, if the\nLayoutStyle is set to Absolute, this value is ignored.\n"
  example: []
  syntax:
    content: public Dim Height { get; set; }
    parameters: []
    return:
      type: Terminal.Gui.Dim
      description: The height.
    content.vb: 'Public Property Height As '
  overload: Terminal.Gui.View.Height*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Terminal.Gui.View.SuperView
  commentId: P:Terminal.Gui.View.SuperView
  id: SuperView
  parent: Terminal.Gui.View
  langs:
  - csharp
  - vb
  name: SuperView
  nameWithType: View.SuperView
  fullName: Terminal.Gui.View.SuperView
  type: Property
  source:
    remote:
      path: Terminal.Gui/Core.cs
      branch: docs_tweaks
      repo: tig:tig/gui.cs.git
    id: SuperView
    path: ../Terminal.Gui/Core.cs
    startLine: 489
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: "\nReturns the container for this view, or null if this view has not been added to a container.\n"
  example: []
  syntax:
    content: public View SuperView { get; }
    parameters: []
    return:
      type: Terminal.Gui.View
      description: The super view.
    content.vb: Public ReadOnly Property SuperView As View
  overload: Terminal.Gui.View.SuperView*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Terminal.Gui.View.#ctor(Terminal.Gui.Rect)
  commentId: M:Terminal.Gui.View.#ctor(Terminal.Gui.Rect)
  id: '#ctor(Terminal.Gui.Rect)'
  parent: Terminal.Gui.View
  langs:
  - csharp
  - vb
  name: View(Rect)
  nameWithType: View.View(Rect)
  fullName: Terminal.Gui.View.View(Terminal.Gui.Rect)
  type: Constructor
  source:
    remote:
      path: Terminal.Gui/Core.cs
      branch: docs_tweaks
      repo: tig:tig/gui.cs.git
    id: .ctor
    path: ../Terminal.Gui/Core.cs
    startLine: 497
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: "\nInitializes a new instance of the <xref href=\"Terminal.Gui.View\" data-throw-if-not-resolved=\"false\"></xref> class with the absolute\ndimensions specified in the frame.   If you want to have Views that can be positioned with\nPos and Dim properties on X, Y, Width and Height, use the empty constructor.\n"
  example: []
  syntax:
    content: public View(Rect frame)
    parameters:
    - id: frame
      type: Terminal.Gui.Rect
      description: The region covered by this view.
    content.vb: Public Sub New(frame As Rect)
  overload: Terminal.Gui.View.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Terminal.Gui.View.#ctor
  commentId: M:Terminal.Gui.View.#ctor
  id: '#ctor'
  parent: Terminal.Gui.View
  langs:
  - csharp
  - vb
  name: View()
  nameWithType: View.View()
  fullName: Terminal.Gui.View.View()
  type: Constructor
  source:
    remote:
      path: Terminal.Gui/Core.cs
      branch: docs_tweaks
      repo: tig:tig/gui.cs.git
    id: .ctor
    path: ../Terminal.Gui/Core.cs
    startLine: 509
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: "\nInitializes a new instance of the <xref href=\"Terminal.Gui.View\" data-throw-if-not-resolved=\"false\"></xref> class and sets the\nview up for Computed layout, which will use the values in X, Y, Width and Height to\ncompute the View&apos;s Frame.\n"
  example: []
  syntax:
    content: public View()
    content.vb: Public Sub New
  overload: Terminal.Gui.View.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Terminal.Gui.View.SetNeedsDisplay
  commentId: M:Terminal.Gui.View.SetNeedsDisplay
  id: SetNeedsDisplay
  parent: Terminal.Gui.View
  langs:
  - csharp
  - vb
  name: SetNeedsDisplay()
  nameWithType: View.SetNeedsDisplay()
  fullName: Terminal.Gui.View.SetNeedsDisplay()
  type: Method
  source:
    remote:
      path: Terminal.Gui/Core.cs
      branch: docs_tweaks
      repo: tig:tig/gui.cs.git
    id: SetNeedsDisplay
    path: ../Terminal.Gui/Core.cs
    startLine: 519
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: "\nInvoke to flag that this view needs to be redisplayed, by any code\nthat alters the state of the view.\n"
  example: []
  syntax:
    content: public void SetNeedsDisplay()
    content.vb: Public Sub SetNeedsDisplay
  overload: Terminal.Gui.View.SetNeedsDisplay*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Terminal.Gui.View.SetNeedsDisplay(Terminal.Gui.Rect)
  commentId: M:Terminal.Gui.View.SetNeedsDisplay(Terminal.Gui.Rect)
  id: SetNeedsDisplay(Terminal.Gui.Rect)
  parent: Terminal.Gui.View
  langs:
  - csharp
  - vb
  name: SetNeedsDisplay(Rect)
  nameWithType: View.SetNeedsDisplay(Rect)
  fullName: Terminal.Gui.View.SetNeedsDisplay(Terminal.Gui.Rect)
  type: Method
  source:
    remote:
      path: Terminal.Gui/Core.cs
      branch: docs_tweaks
      repo: tig:tig/gui.cs.git
    id: SetNeedsDisplay
    path: ../Terminal.Gui/Core.cs
    startLine: 540
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: "\nFlags the specified rectangle region on this view as needing to be repainted.\n"
  example: []
  syntax:
    content: public void SetNeedsDisplay(Rect region)
    parameters:
    - id: region
      type: Terminal.Gui.Rect
      description: The region that must be flagged for repaint.
    content.vb: Public Sub SetNeedsDisplay(region As Rect)
  overload: Terminal.Gui.View.SetNeedsDisplay*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Terminal.Gui.View.ChildNeedsDisplay
  commentId: M:Terminal.Gui.View.ChildNeedsDisplay
  id: ChildNeedsDisplay
  parent: Terminal.Gui.View
  langs:
  - csharp
  - vb
  name: ChildNeedsDisplay()
  nameWithType: View.ChildNeedsDisplay()
  fullName: Terminal.Gui.View.ChildNeedsDisplay()
  type: Method
  source:
    remote:
      path: Terminal.Gui/Core.cs
      branch: docs_tweaks
      repo: tig:tig/gui.cs.git
    id: ChildNeedsDisplay
    path: ../Terminal.Gui/Core.cs
    startLine: 569
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: "\nFlags this view for requiring the children views to be repainted.\n"
  example: []
  syntax:
    content: public void ChildNeedsDisplay()
    content.vb: Public Sub ChildNeedsDisplay
  overload: Terminal.Gui.View.ChildNeedsDisplay*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Terminal.Gui.View.Add(Terminal.Gui.View)
  commentId: M:Terminal.Gui.View.Add(Terminal.Gui.View)
  id: Add(Terminal.Gui.View)
  parent: Terminal.Gui.View
  langs:
  - csharp
  - vb
  name: Add(View)
  nameWithType: View.Add(View)
  fullName: Terminal.Gui.View.Add(Terminal.Gui.View)
  type: Method
  source:
    remote:
      path: Terminal.Gui/Core.cs
      branch: docs_tweaks
      repo: tig:tig/gui.cs.git
    id: Add
    path: ../Terminal.Gui/Core.cs
    startLine: 581
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: "\nAdds a subview to this view.\n"
  remarks: "\n"
  example: []
  syntax:
    content: public virtual void Add(View view)
    parameters:
    - id: view
      type: Terminal.Gui.View
    content.vb: Public Overridable Sub Add(view As View)
  overload: Terminal.Gui.View.Add*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Terminal.Gui.View.Add(Terminal.Gui.View[])
  commentId: M:Terminal.Gui.View.Add(Terminal.Gui.View[])
  id: Add(Terminal.Gui.View[])
  parent: Terminal.Gui.View
  langs:
  - csharp
  - vb
  name: Add(View[])
  nameWithType: View.Add(View[])
  fullName: Terminal.Gui.View.Add(Terminal.Gui.View[])
  type: Method
  source:
    remote:
      path: Terminal.Gui/Core.cs
      branch: docs_tweaks
      repo: tig:tig/gui.cs.git
    id: Add
    path: ../Terminal.Gui/Core.cs
    startLine: 599
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: "\nAdds the specified views to the view.\n"
  example: []
  syntax:
    content: public void Add(params View[] views)
    parameters:
    - id: views
      type: Terminal.Gui.View[]
      description: Array of one or more views (can be optional parameter).
    content.vb: Public Sub Add(ParamArray views As View())
  overload: Terminal.Gui.View.Add*
  nameWithType.vb: View.Add(View())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Terminal.Gui.View.Add(Terminal.Gui.View())
  name.vb: Add(View())
- uid: Terminal.Gui.View.RemoveAll
  commentId: M:Terminal.Gui.View.RemoveAll
  id: RemoveAll
  parent: Terminal.Gui.View
  langs:
  - csharp
  - vb
  name: RemoveAll()
  nameWithType: View.RemoveAll()
  fullName: Terminal.Gui.View.RemoveAll()
  type: Method
  source:
    remote:
      path: Terminal.Gui/Core.cs
      branch: docs_tweaks
      repo: tig:tig/gui.cs.git
    id: RemoveAll
    path: ../Terminal.Gui/Core.cs
    startLine: 612
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: "\nRemoves all the widgets from this container.\n"
  remarks: "\n"
  example: []
  syntax:
    content: public virtual void RemoveAll()
    content.vb: Public Overridable Sub RemoveAll
  overload: Terminal.Gui.View.RemoveAll*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Terminal.Gui.View.Remove(Terminal.Gui.View)
  commentId: M:Terminal.Gui.View.Remove(Terminal.Gui.View)
  id: Remove(Terminal.Gui.View)
  parent: Terminal.Gui.View
  langs:
  - csharp
  - vb
  name: Remove(View)
  nameWithType: View.Remove(View)
  fullName: Terminal.Gui.View.Remove(Terminal.Gui.View)
  type: Method
  source:
    remote:
      path: Terminal.Gui/Core.cs
      branch: docs_tweaks
      repo: tig:tig/gui.cs.git
    id: Remove
    path: ../Terminal.Gui/Core.cs
    startLine: 627
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: "\nRemoves a widget from this container.\n"
  remarks: "\n"
  example: []
  syntax:
    content: public virtual void Remove(View view)
    parameters:
    - id: view
      type: Terminal.Gui.View
    content.vb: Public Overridable Sub Remove(view As View)
  overload: Terminal.Gui.View.Remove*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Terminal.Gui.View.BringSubviewToFront(Terminal.Gui.View)
  commentId: M:Terminal.Gui.View.BringSubviewToFront(Terminal.Gui.View)
  id: BringSubviewToFront(Terminal.Gui.View)
  parent: Terminal.Gui.View
  langs:
  - csharp
  - vb
  name: BringSubviewToFront(View)
  nameWithType: View.BringSubviewToFront(View)
  fullName: Terminal.Gui.View.BringSubviewToFront(Terminal.Gui.View)
  type: Method
  source:
    remote:
      path: Terminal.Gui/Core.cs
      branch: docs_tweaks
      repo: tig:tig/gui.cs.git
    id: BringSubviewToFront
    path: ../Terminal.Gui/Core.cs
    startLine: 664
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: "\nBrings the specified subview to the front so it is drawn on top of any other views.\n"
  remarks: "\n<xref href=\"Terminal.Gui.View.SendSubviewToBack(Terminal.Gui.View)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public void BringSubviewToFront(View subview)
    parameters:
    - id: subview
      type: Terminal.Gui.View
      description: The subview to send to the front
    content.vb: Public Sub BringSubviewToFront(subview As View)
  overload: Terminal.Gui.View.BringSubviewToFront*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Terminal.Gui.View.SendSubviewToBack(Terminal.Gui.View)
  commentId: M:Terminal.Gui.View.SendSubviewToBack(Terminal.Gui.View)
  id: SendSubviewToBack(Terminal.Gui.View)
  parent: Terminal.Gui.View
  langs:
  - csharp
  - vb
  name: SendSubviewToBack(View)
  nameWithType: View.SendSubviewToBack(View)
  fullName: Terminal.Gui.View.SendSubviewToBack(Terminal.Gui.View)
  type: Method
  source:
    remote:
      path: Terminal.Gui/Core.cs
      branch: docs_tweaks
      repo: tig:tig/gui.cs.git
    id: SendSubviewToBack
    path: ../Terminal.Gui/Core.cs
    startLine: 679
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: "\nSends the specified subview to the front so it is the first view drawn\n"
  remarks: "\n<xref href=\"Terminal.Gui.View.BringSubviewToFront(Terminal.Gui.View)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public void SendSubviewToBack(View subview)
    parameters:
    - id: subview
      type: Terminal.Gui.View
      description: The subview to send to the front
    content.vb: Public Sub SendSubviewToBack(subview As View)
  overload: Terminal.Gui.View.SendSubviewToBack*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Terminal.Gui.View.SendSubviewBackwards(Terminal.Gui.View)
  commentId: M:Terminal.Gui.View.SendSubviewBackwards(Terminal.Gui.View)
  id: SendSubviewBackwards(Terminal.Gui.View)
  parent: Terminal.Gui.View
  langs:
  - csharp
  - vb
  name: SendSubviewBackwards(View)
  nameWithType: View.SendSubviewBackwards(View)
  fullName: Terminal.Gui.View.SendSubviewBackwards(Terminal.Gui.View)
  type: Method
  source:
    remote:
      path: Terminal.Gui/Core.cs
      branch: docs_tweaks
      repo: tig:tig/gui.cs.git
    id: SendSubviewBackwards
    path: ../Terminal.Gui/Core.cs
    startLine: 694
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: "\nMoves the subview backwards in the hierarchy, only one step\n"
  remarks: "\nIf you want to send the view all the way to the back use SendSubviewToBack.\n"
  example: []
  syntax:
    content: public void SendSubviewBackwards(View subview)
    parameters:
    - id: subview
      type: Terminal.Gui.View
      description: The subview to send backwards
    content.vb: Public Sub SendSubviewBackwards(subview As View)
  overload: Terminal.Gui.View.SendSubviewBackwards*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Terminal.Gui.View.BringSubviewForward(Terminal.Gui.View)
  commentId: M:Terminal.Gui.View.BringSubviewForward(Terminal.Gui.View)
  id: BringSubviewForward(Terminal.Gui.View)
  parent: Terminal.Gui.View
  langs:
  - csharp
  - vb
  name: BringSubviewForward(View)
  nameWithType: View.BringSubviewForward(View)
  fullName: Terminal.Gui.View.BringSubviewForward(Terminal.Gui.View)
  type: Method
  source:
    remote:
      path: Terminal.Gui/Core.cs
      branch: docs_tweaks
      repo: tig:tig/gui.cs.git
    id: BringSubviewForward
    path: ../Terminal.Gui/Core.cs
    startLine: 712
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: "\nMoves the subview backwards in the hierarchy, only one step\n"
  remarks: "\nIf you want to send the view all the way to the back use SendSubviewToBack.\n"
  example: []
  syntax:
    content: public void BringSubviewForward(View subview)
    parameters:
    - id: subview
      type: Terminal.Gui.View
      description: The subview to send backwards
    content.vb: Public Sub BringSubviewForward(subview As View)
  overload: Terminal.Gui.View.BringSubviewForward*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Terminal.Gui.View.Clear
  commentId: M:Terminal.Gui.View.Clear
  id: Clear
  parent: Terminal.Gui.View
  langs:
  - csharp
  - vb
  name: Clear()
  nameWithType: View.Clear()
  fullName: Terminal.Gui.View.Clear()
  type: Method
  source:
    remote:
      path: Terminal.Gui/Core.cs
      branch: docs_tweaks
      repo: tig:tig/gui.cs.git
    id: Clear
    path: ../Terminal.Gui/Core.cs
    startLine: 731
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: "\nClears the view region with the current color.\n"
  remarks: "\n<p>\n  This clears the entire region used by this view.\n</p>\n"
  example: []
  syntax:
    content: public void Clear()
    content.vb: Public Sub Clear
  overload: Terminal.Gui.View.Clear*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Terminal.Gui.View.Clear(Terminal.Gui.Rect)
  commentId: M:Terminal.Gui.View.Clear(Terminal.Gui.Rect)
  id: Clear(Terminal.Gui.Rect)
  parent: Terminal.Gui.View
  langs:
  - csharp
  - vb
  name: Clear(Rect)
  nameWithType: View.Clear(Rect)
  fullName: Terminal.Gui.View.Clear(Terminal.Gui.Rect)
  type: Method
  source:
    remote:
      path: Terminal.Gui/Core.cs
      branch: docs_tweaks
      repo: tig:tig/gui.cs.git
    id: Clear
    path: ../Terminal.Gui/Core.cs
    startLine: 745
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: "\nClears the specified rectangular region with the current color\n"
  example: []
  syntax:
    content: public void Clear(Rect r)
    parameters:
    - id: r
      type: Terminal.Gui.Rect
    content.vb: Public Sub Clear(r As Rect)
  overload: Terminal.Gui.View.Clear*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Terminal.Gui.View.ScreenToView(System.Int32,System.Int32)
  commentId: M:Terminal.Gui.View.ScreenToView(System.Int32,System.Int32)
  id: ScreenToView(System.Int32,System.Int32)
  parent: Terminal.Gui.View
  langs:
  - csharp
  - vb
  name: ScreenToView(Int32, Int32)
  nameWithType: View.ScreenToView(Int32, Int32)
  fullName: Terminal.Gui.View.ScreenToView(System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: Terminal.Gui/Core.cs
      branch: docs_tweaks
      repo: tig:tig/gui.cs.git
    id: ScreenToView
    path: ../Terminal.Gui/Core.cs
    startLine: 789
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: "\nConverts a point from screen coordinates into the view coordinate space.\n"
  example: []
  syntax:
    content: public Point ScreenToView(int x, int y)
    parameters:
    - id: x
      type: System.Int32
      description: X screen-coordinate point.
    - id: y
      type: System.Int32
      description: Y screen-coordinate point.
    return:
      type: Terminal.Gui.Point
      description: The mapped point.
    content.vb: Public Function ScreenToView(x As Integer, y As Integer) As Point
  overload: Terminal.Gui.View.ScreenToView*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Terminal.Gui.View.ClipToBounds
  commentId: M:Terminal.Gui.View.ClipToBounds
  id: ClipToBounds
  parent: Terminal.Gui.View
  langs:
  - csharp
  - vb
  name: ClipToBounds()
  nameWithType: View.ClipToBounds()
  fullName: Terminal.Gui.View.ClipToBounds()
  type: Method
  source:
    remote:
      path: Terminal.Gui/Core.cs
      branch: docs_tweaks
      repo: tig:tig/gui.cs.git
    id: ClipToBounds
    path: ../Terminal.Gui/Core.cs
    startLine: 821
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: "\nSets the Console driver&apos;s clip region to the current View&apos;s Bounds.\n"
  example: []
  syntax:
    content: public Rect ClipToBounds()
    return:
      type: Terminal.Gui.Rect
      description: The existing driver&apos;s Clip region, which can be then set by setting the Driver.Clip property.
    content.vb: Public Function ClipToBounds As Rect
  overload: Terminal.Gui.View.ClipToBounds*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Terminal.Gui.View.SetClip(Terminal.Gui.Rect)
  commentId: M:Terminal.Gui.View.SetClip(Terminal.Gui.Rect)
  id: SetClip(Terminal.Gui.Rect)
  parent: Terminal.Gui.View
  langs:
  - csharp
  - vb
  name: SetClip(Rect)
  nameWithType: View.SetClip(Rect)
  fullName: Terminal.Gui.View.SetClip(Terminal.Gui.Rect)
  type: Method
  source:
    remote:
      path: Terminal.Gui/Core.cs
      branch: docs_tweaks
      repo: tig:tig/gui.cs.git
    id: SetClip
    path: ../Terminal.Gui/Core.cs
    startLine: 831
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: "\nSets the clipping region to the specified region, the region is view-relative\n"
  example: []
  syntax:
    content: public Rect SetClip(Rect rect)
    parameters:
    - id: rect
      type: Terminal.Gui.Rect
      description: Rectangle region to clip into, the region is view-relative.
    return:
      type: Terminal.Gui.Rect
      description: The previous clip region.
    content.vb: Public Function SetClip(rect As Rect) As Rect
  overload: Terminal.Gui.View.SetClip*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Terminal.Gui.View.DrawFrame(Terminal.Gui.Rect,System.Int32,System.Boolean)
  commentId: M:Terminal.Gui.View.DrawFrame(Terminal.Gui.Rect,System.Int32,System.Boolean)
  id: DrawFrame(Terminal.Gui.Rect,System.Int32,System.Boolean)
  parent: Terminal.Gui.View
  langs:
  - csharp
  - vb
  name: DrawFrame(Rect, Int32, Boolean)
  nameWithType: View.DrawFrame(Rect, Int32, Boolean)
  fullName: Terminal.Gui.View.DrawFrame(Terminal.Gui.Rect, System.Int32, System.Boolean)
  type: Method
  source:
    remote:
      path: Terminal.Gui/Core.cs
      branch: docs_tweaks
      repo: tig:tig/gui.cs.git
    id: DrawFrame
    path: ../Terminal.Gui/Core.cs
    startLine: 845
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: "\nDraws a frame in the current view, clipped by the boundary of this view\n"
  example: []
  syntax:
    content: public void DrawFrame(Rect rect, int padding = 0, bool fill = false)
    parameters:
    - id: rect
      type: Terminal.Gui.Rect
      description: Rectangular region for the frame to be drawn.
    - id: padding
      type: System.Int32
      description: The padding to add to the drawn frame.
    - id: fill
      type: System.Boolean
      description: If set to <code>true</code> it fill will the contents.
    content.vb: Public Sub DrawFrame(rect As Rect, padding As Integer = 0, fill As Boolean = False)
  overload: Terminal.Gui.View.DrawFrame*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Terminal.Gui.View.DrawHotString(NStack.ustring,Terminal.Gui.Attribute,Terminal.Gui.Attribute)
  commentId: M:Terminal.Gui.View.DrawHotString(NStack.ustring,Terminal.Gui.Attribute,Terminal.Gui.Attribute)
  id: DrawHotString(NStack.ustring,Terminal.Gui.Attribute,Terminal.Gui.Attribute)
  parent: Terminal.Gui.View
  langs:
  - csharp
  - vb
  name: DrawHotString(ustring, Attribute, Attribute)
  nameWithType: View.DrawHotString(ustring, Attribute, Attribute)
  fullName: Terminal.Gui.View.DrawHotString(NStack.ustring, Terminal.Gui.Attribute, Terminal.Gui.Attribute)
  type: Method
  source:
    remote:
      path: Terminal.Gui/Core.cs
      branch: docs_tweaks
      repo: tig:tig/gui.cs.git
    id: DrawHotString
    path: ../Terminal.Gui/Core.cs
    startLine: 860
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: "\nUtility function to draw strings that contain a hotkey\n"
  example: []
  syntax:
    content: public void DrawHotString(ustring text, Attribute hotColor, Attribute normalColor)
    parameters:
    - id: text
      type: NStack.ustring
      description: String to display, the underscoore before a letter flags the next letter as the hotkey.
    - id: hotColor
      type: Terminal.Gui.Attribute
      description: Hot color.
    - id: normalColor
      type: Terminal.Gui.Attribute
      description: Normal color.
    content.vb: Public Sub DrawHotString(text As ustring, hotColor As Attribute, normalColor As Attribute)
  overload: Terminal.Gui.View.DrawHotString*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Terminal.Gui.View.DrawHotString(NStack.ustring,System.Boolean,Terminal.Gui.ColorScheme)
  commentId: M:Terminal.Gui.View.DrawHotString(NStack.ustring,System.Boolean,Terminal.Gui.ColorScheme)
  id: DrawHotString(NStack.ustring,System.Boolean,Terminal.Gui.ColorScheme)
  parent: Terminal.Gui.View
  langs:
  - csharp
  - vb
  name: DrawHotString(ustring, Boolean, ColorScheme)
  nameWithType: View.DrawHotString(ustring, Boolean, ColorScheme)
  fullName: Terminal.Gui.View.DrawHotString(NStack.ustring, System.Boolean, Terminal.Gui.ColorScheme)
  type: Method
  source:
    remote:
      path: Terminal.Gui/Core.cs
      branch: docs_tweaks
      repo: tig:tig/gui.cs.git
    id: DrawHotString
    path: ../Terminal.Gui/Core.cs
    startLine: 879
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: "\nUtility function to draw strings that contains a hotkey using a colorscheme and the &quot;focused&quot; state.\n"
  example: []
  syntax:
    content: public void DrawHotString(ustring text, bool focused, ColorScheme scheme)
    parameters:
    - id: text
      type: NStack.ustring
      description: String to display, the underscoore before a letter flags the next letter as the hotkey.
    - id: focused
      type: System.Boolean
      description: If set to <code>true</code> this uses the focused colors from the color scheme, otherwise the regular ones.
    - id: scheme
      type: Terminal.Gui.ColorScheme
      description: The color scheme to use.
    content.vb: Public Sub DrawHotString(text As ustring, focused As Boolean, scheme As ColorScheme)
  overload: Terminal.Gui.View.DrawHotString*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Terminal.Gui.View.Move(System.Int32,System.Int32)
  commentId: M:Terminal.Gui.View.Move(System.Int32,System.Int32)
  id: Move(System.Int32,System.Int32)
  parent: Terminal.Gui.View
  langs:
  - csharp
  - vb
  name: Move(Int32, Int32)
  nameWithType: View.Move(Int32, Int32)
  fullName: Terminal.Gui.View.Move(System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: Terminal.Gui/Core.cs
      branch: docs_tweaks
      repo: tig:tig/gui.cs.git
    id: Move
    path: ../Terminal.Gui/Core.cs
    startLine: 893
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: "\nThis moves the cursor to the specified column and row in the view.\n"
  example: []
  syntax:
    content: public void Move(int col, int row)
    parameters:
    - id: col
      type: System.Int32
      description: Col.
    - id: row
      type: System.Int32
      description: Row.
    content.vb: Public Sub Move(col As Integer, row As Integer)
  overload: Terminal.Gui.View.Move*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Terminal.Gui.View.PositionCursor
  commentId: M:Terminal.Gui.View.PositionCursor
  id: PositionCursor
  parent: Terminal.Gui.View
  langs:
  - csharp
  - vb
  name: PositionCursor()
  nameWithType: View.PositionCursor()
  fullName: Terminal.Gui.View.PositionCursor()
  type: Method
  source:
    remote:
      path: Terminal.Gui/Core.cs
      branch: docs_tweaks
      repo: tig:tig/gui.cs.git
    id: PositionCursor
    path: ../Terminal.Gui/Core.cs
    startLine: 902
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: "\nPositions the cursor in the right position based on the currently focused view in the chain.\n"
  example: []
  syntax:
    content: public virtual void PositionCursor()
    content.vb: Public Overridable Sub PositionCursor
  overload: Terminal.Gui.View.PositionCursor*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Terminal.Gui.View.HasFocus
  commentId: P:Terminal.Gui.View.HasFocus
  id: HasFocus
  parent: Terminal.Gui.View
  langs:
  - csharp
  - vb
  name: HasFocus
  nameWithType: View.HasFocus
  fullName: Terminal.Gui.View.HasFocus
  type: Property
  source:
    remote:
      path: Terminal.Gui/Core.cs
      branch: docs_tweaks
      repo: tig:tig/gui.cs.git
    id: HasFocus
    path: ../Terminal.Gui/Core.cs
    startLine: 911
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  example: []
  syntax:
    content: public override bool HasFocus { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Overrides ReadOnly Property HasFocus As Boolean
  overridden: Terminal.Gui.Responder.HasFocus
  overload: Terminal.Gui.View.HasFocus*
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: Terminal.Gui.View.OnEnter
  commentId: M:Terminal.Gui.View.OnEnter
  id: OnEnter
  parent: Terminal.Gui.View
  langs:
  - csharp
  - vb
  name: OnEnter()
  nameWithType: View.OnEnter()
  fullName: Terminal.Gui.View.OnEnter()
  type: Method
  source:
    remote:
      path: Terminal.Gui/Core.cs
      branch: docs_tweaks
      repo: tig:tig/gui.cs.git
    id: OnEnter
    path: ../Terminal.Gui/Core.cs
    startLine: 934
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  example: []
  syntax:
    content: public override bool OnEnter()
    return:
      type: System.Boolean
    content.vb: Public Overrides Function OnEnter As Boolean
  overridden: Terminal.Gui.Responder.OnEnter
  overload: Terminal.Gui.View.OnEnter*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Terminal.Gui.View.OnLeave
  commentId: M:Terminal.Gui.View.OnLeave
  id: OnLeave
  parent: Terminal.Gui.View
  langs:
  - csharp
  - vb
  name: OnLeave()
  nameWithType: View.OnLeave()
  fullName: Terminal.Gui.View.OnLeave()
  type: Method
  source:
    remote:
      path: Terminal.Gui/Core.cs
      branch: docs_tweaks
      repo: tig:tig/gui.cs.git
    id: OnLeave
    path: ../Terminal.Gui/Core.cs
    startLine: 941
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  example: []
  syntax:
    content: public override bool OnLeave()
    return:
      type: System.Boolean
    content.vb: Public Overrides Function OnLeave As Boolean
  overridden: Terminal.Gui.Responder.OnLeave
  overload: Terminal.Gui.View.OnLeave*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Terminal.Gui.View.Focused
  commentId: P:Terminal.Gui.View.Focused
  id: Focused
  parent: Terminal.Gui.View
  langs:
  - csharp
  - vb
  name: Focused
  nameWithType: View.Focused
  fullName: Terminal.Gui.View.Focused
  type: Property
  source:
    remote:
      path: Terminal.Gui/Core.cs
      branch: docs_tweaks
      repo: tig:tig/gui.cs.git
    id: Focused
    path: ../Terminal.Gui/Core.cs
    startLine: 951
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: "\nReturns the currently focused view inside this view, or null if nothing is focused.\n"
  example: []
  syntax:
    content: public View Focused { get; }
    parameters: []
    return:
      type: Terminal.Gui.View
      description: The focused.
    content.vb: Public ReadOnly Property Focused As View
  overload: Terminal.Gui.View.Focused*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Terminal.Gui.View.MostFocused
  commentId: P:Terminal.Gui.View.MostFocused
  id: MostFocused
  parent: Terminal.Gui.View
  langs:
  - csharp
  - vb
  name: MostFocused
  nameWithType: View.MostFocused
  fullName: Terminal.Gui.View.MostFocused
  type: Property
  source:
    remote:
      path: Terminal.Gui/Core.cs
      branch: docs_tweaks
      repo: tig:tig/gui.cs.git
    id: MostFocused
    path: ../Terminal.Gui/Core.cs
    startLine: 957
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: "\nReturns the most focused view in the chain of subviews (the leaf view that has the focus).\n"
  example: []
  syntax:
    content: public View MostFocused { get; }
    parameters: []
    return:
      type: Terminal.Gui.View
      description: The most focused.
    content.vb: Public ReadOnly Property MostFocused As View
  overload: Terminal.Gui.View.MostFocused*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Terminal.Gui.View.ColorScheme
  commentId: P:Terminal.Gui.View.ColorScheme
  id: ColorScheme
  parent: Terminal.Gui.View
  langs:
  - csharp
  - vb
  name: ColorScheme
  nameWithType: View.ColorScheme
  fullName: Terminal.Gui.View.ColorScheme
  type: Property
  source:
    remote:
      path: Terminal.Gui/Core.cs
      branch: docs_tweaks
      repo: tig:tig/gui.cs.git
    id: ColorScheme
    path: ../Terminal.Gui/Core.cs
    startLine: 972
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: "\nThe color scheme for this view, if it is not defined, it returns the parent&apos;s\ncolor scheme.\n"
  example: []
  syntax:
    content: public ColorScheme ColorScheme { get; set; }
    parameters: []
    return:
      type: Terminal.Gui.ColorScheme
    content.vb: Public Property ColorScheme As ColorScheme
  overload: Terminal.Gui.View.ColorScheme*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Terminal.Gui.View.AddRune(System.Int32,System.Int32,System.Rune)
  commentId: M:Terminal.Gui.View.AddRune(System.Int32,System.Int32,System.Rune)
  id: AddRune(System.Int32,System.Int32,System.Rune)
  parent: Terminal.Gui.View
  langs:
  - csharp
  - vb
  name: AddRune(Int32, Int32, Rune)
  nameWithType: View.AddRune(Int32, Int32, Rune)
  fullName: Terminal.Gui.View.AddRune(System.Int32, System.Int32, System.Rune)
  type: Method
  source:
    remote:
      path: Terminal.Gui/Core.cs
      branch: docs_tweaks
      repo: tig:tig/gui.cs.git
    id: AddRune
    path: ../Terminal.Gui/Core.cs
    startLine: 991
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: "\nDisplays the specified character in the specified column and row.\n"
  example: []
  syntax:
    content: public void AddRune(int col, int row, Rune ch)
    parameters:
    - id: col
      type: System.Int32
      description: Col.
    - id: row
      type: System.Int32
      description: Row.
    - id: ch
      type: System.Rune
      description: Ch.
    content.vb: Public Sub AddRune(col As Integer, row As Integer, ch As Rune)
  overload: Terminal.Gui.View.AddRune*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Terminal.Gui.View.ClearNeedsDisplay
  commentId: M:Terminal.Gui.View.ClearNeedsDisplay
  id: ClearNeedsDisplay
  parent: Terminal.Gui.View
  langs:
  - csharp
  - vb
  name: ClearNeedsDisplay()
  nameWithType: View.ClearNeedsDisplay()
  fullName: Terminal.Gui.View.ClearNeedsDisplay()
  type: Method
  source:
    remote:
      path: Terminal.Gui/Core.cs
      branch: docs_tweaks
      repo: tig:tig/gui.cs.git
    id: ClearNeedsDisplay
    path: ../Terminal.Gui/Core.cs
    startLine: 1004
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: "\nRemoves the SetNeedsDisplay and the ChildNeedsDisplay setting on this view.\n"
  example: []
  syntax:
    content: protected void ClearNeedsDisplay()
    content.vb: Protected Sub ClearNeedsDisplay
  overload: Terminal.Gui.View.ClearNeedsDisplay*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Terminal.Gui.View.Redraw(Terminal.Gui.Rect)
  commentId: M:Terminal.Gui.View.Redraw(Terminal.Gui.Rect)
  id: Redraw(Terminal.Gui.Rect)
  parent: Terminal.Gui.View
  langs:
  - csharp
  - vb
  name: Redraw(Rect)
  nameWithType: View.Redraw(Rect)
  fullName: Terminal.Gui.View.Redraw(Terminal.Gui.Rect)
  type: Method
  source:
    remote:
      path: Terminal.Gui/Core.cs
      branch: docs_tweaks
      repo: tig:tig/gui.cs.git
    id: Redraw
    path: ../Terminal.Gui/Core.cs
    startLine: 1020
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: "\nPerforms a redraw of this view and its subviews, only redraws the views that have been flagged for a re-display.\n"
  remarks: "\n<p>\n   Views should set the color that they want to use on entry, as otherwise this will inherit\n   the last color that was set globaly on the driver.\n</p>\n"
  example: []
  syntax:
    content: public virtual void Redraw(Rect region)
    parameters:
    - id: region
      type: Terminal.Gui.Rect
      description: The region to redraw, this is relative to the view itself.
    content.vb: Public Overridable Sub Redraw(region As Rect)
  overload: Terminal.Gui.View.Redraw*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Terminal.Gui.View.SetFocus(Terminal.Gui.View)
  commentId: M:Terminal.Gui.View.SetFocus(Terminal.Gui.View)
  id: SetFocus(Terminal.Gui.View)
  parent: Terminal.Gui.View
  langs:
  - csharp
  - vb
  name: SetFocus(View)
  nameWithType: View.SetFocus(View)
  fullName: Terminal.Gui.View.SetFocus(Terminal.Gui.View)
  type: Method
  source:
    remote:
      path: Terminal.Gui/Core.cs
      branch: docs_tweaks
      repo: tig:tig/gui.cs.git
    id: SetFocus
    path: ../Terminal.Gui/Core.cs
    startLine: 1047
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: "\nFocuses the specified sub-view.\n"
  example: []
  syntax:
    content: public void SetFocus(View view)
    parameters:
    - id: view
      type: Terminal.Gui.View
      description: View.
    content.vb: Public Sub SetFocus(view As View)
  overload: Terminal.Gui.View.SetFocus*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Terminal.Gui.View.KeyPress
  commentId: E:Terminal.Gui.View.KeyPress
  id: KeyPress
  parent: Terminal.Gui.View
  langs:
  - csharp
  - vb
  name: KeyPress
  nameWithType: View.KeyPress
  fullName: Terminal.Gui.View.KeyPress
  type: Event
  source:
    remote:
      path: Terminal.Gui/Core.cs
      branch: docs_tweaks
      repo: tig:tig/gui.cs.git
    id: KeyPress
    path: ../Terminal.Gui/Core.cs
    startLine: 1094
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: "\nInvoked when a character key is pressed and occurs after the key up event.\n"
  example: []
  syntax:
    content: public event EventHandler<View.KeyEventEventArgs> KeyPress
    return:
      type: System.EventHandler{Terminal.Gui.View.KeyEventEventArgs}
    content.vb: Public Event KeyPress As EventHandler(Of View.KeyEventEventArgs)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Terminal.Gui.View.ProcessKey(Terminal.Gui.KeyEvent)
  commentId: M:Terminal.Gui.View.ProcessKey(Terminal.Gui.KeyEvent)
  id: ProcessKey(Terminal.Gui.KeyEvent)
  parent: Terminal.Gui.View
  langs:
  - csharp
  - vb
  name: ProcessKey(KeyEvent)
  nameWithType: View.ProcessKey(KeyEvent)
  fullName: Terminal.Gui.View.ProcessKey(Terminal.Gui.KeyEvent)
  type: Method
  source:
    remote:
      path: Terminal.Gui/Core.cs
      branch: docs_tweaks
      repo: tig:tig/gui.cs.git
    id: ProcessKey
    path: ../Terminal.Gui/Core.cs
    startLine: 1097
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  example: []
  syntax:
    content: public override bool ProcessKey(KeyEvent keyEvent)
    parameters:
    - id: keyEvent
      type: Terminal.Gui.KeyEvent
    return:
      type: System.Boolean
    content.vb: Public Overrides Function ProcessKey(keyEvent As KeyEvent) As Boolean
  overridden: Terminal.Gui.Responder.ProcessKey(Terminal.Gui.KeyEvent)
  overload: Terminal.Gui.View.ProcessKey*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Terminal.Gui.View.ProcessHotKey(Terminal.Gui.KeyEvent)
  commentId: M:Terminal.Gui.View.ProcessHotKey(Terminal.Gui.KeyEvent)
  id: ProcessHotKey(Terminal.Gui.KeyEvent)
  parent: Terminal.Gui.View
  langs:
  - csharp
  - vb
  name: ProcessHotKey(KeyEvent)
  nameWithType: View.ProcessHotKey(KeyEvent)
  fullName: Terminal.Gui.View.ProcessHotKey(Terminal.Gui.KeyEvent)
  type: Method
  source:
    remote:
      path: Terminal.Gui/Core.cs
      branch: docs_tweaks
      repo: tig:tig/gui.cs.git
    id: ProcessHotKey
    path: ../Terminal.Gui/Core.cs
    startLine: 1107
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  example: []
  syntax:
    content: public override bool ProcessHotKey(KeyEvent keyEvent)
    parameters:
    - id: keyEvent
      type: Terminal.Gui.KeyEvent
    return:
      type: System.Boolean
    content.vb: Public Overrides Function ProcessHotKey(keyEvent As KeyEvent) As Boolean
  overridden: Terminal.Gui.Responder.ProcessHotKey(Terminal.Gui.KeyEvent)
  overload: Terminal.Gui.View.ProcessHotKey*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Terminal.Gui.View.ProcessColdKey(Terminal.Gui.KeyEvent)
  commentId: M:Terminal.Gui.View.ProcessColdKey(Terminal.Gui.KeyEvent)
  id: ProcessColdKey(Terminal.Gui.KeyEvent)
  parent: Terminal.Gui.View
  langs:
  - csharp
  - vb
  name: ProcessColdKey(KeyEvent)
  nameWithType: View.ProcessColdKey(KeyEvent)
  fullName: Terminal.Gui.View.ProcessColdKey(Terminal.Gui.KeyEvent)
  type: Method
  source:
    remote:
      path: Terminal.Gui/Core.cs
      branch: docs_tweaks
      repo: tig:tig/gui.cs.git
    id: ProcessColdKey
    path: ../Terminal.Gui/Core.cs
    startLine: 1119
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  example: []
  syntax:
    content: public override bool ProcessColdKey(KeyEvent keyEvent)
    parameters:
    - id: keyEvent
      type: Terminal.Gui.KeyEvent
    return:
      type: System.Boolean
    content.vb: Public Overrides Function ProcessColdKey(keyEvent As KeyEvent) As Boolean
  overridden: Terminal.Gui.Responder.ProcessColdKey(Terminal.Gui.KeyEvent)
  overload: Terminal.Gui.View.ProcessColdKey*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Terminal.Gui.View.KeyDown
  commentId: E:Terminal.Gui.View.KeyDown
  id: KeyDown
  parent: Terminal.Gui.View
  langs:
  - csharp
  - vb
  name: KeyDown
  nameWithType: View.KeyDown
  fullName: Terminal.Gui.View.KeyDown
  type: Event
  source:
    remote:
      path: Terminal.Gui/Core.cs
      branch: docs_tweaks
      repo: tig:tig/gui.cs.git
    id: KeyDown
    path: ../Terminal.Gui/Core.cs
    startLine: 1133
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: "\nInvoked when a key is pressed\n"
  example: []
  syntax:
    content: public event EventHandler<View.KeyEventEventArgs> KeyDown
    return:
      type: System.EventHandler{Terminal.Gui.View.KeyEventEventArgs}
    content.vb: Public Event KeyDown As EventHandler(Of View.KeyEventEventArgs)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Terminal.Gui.View.OnKeyDown(Terminal.Gui.KeyEvent)
  commentId: M:Terminal.Gui.View.OnKeyDown(Terminal.Gui.KeyEvent)
  id: OnKeyDown(Terminal.Gui.KeyEvent)
  parent: Terminal.Gui.View
  langs:
  - csharp
  - vb
  name: OnKeyDown(KeyEvent)
  nameWithType: View.OnKeyDown(KeyEvent)
  fullName: Terminal.Gui.View.OnKeyDown(Terminal.Gui.KeyEvent)
  type: Method
  source:
    remote:
      path: Terminal.Gui/Core.cs
      branch: docs_tweaks
      repo: tig:tig/gui.cs.git
    id: OnKeyDown
    path: ../Terminal.Gui/Core.cs
    startLine: 1136
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  example: []
  syntax:
    content: public override bool OnKeyDown(KeyEvent keyEvent)
    parameters:
    - id: keyEvent
      type: Terminal.Gui.KeyEvent
      description: Contains the details about the key that produced the event.
    return:
      type: System.Boolean
    content.vb: Public Overrides Function OnKeyDown(keyEvent As KeyEvent) As Boolean
  overridden: Terminal.Gui.Responder.OnKeyDown(Terminal.Gui.KeyEvent)
  overload: Terminal.Gui.View.OnKeyDown*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Terminal.Gui.View.KeyUp
  commentId: E:Terminal.Gui.View.KeyUp
  id: KeyUp
  parent: Terminal.Gui.View
  langs:
  - csharp
  - vb
  name: KeyUp
  nameWithType: View.KeyUp
  fullName: Terminal.Gui.View.KeyUp
  type: Event
  source:
    remote:
      path: Terminal.Gui/Core.cs
      branch: docs_tweaks
      repo: tig:tig/gui.cs.git
    id: KeyUp
    path: ../Terminal.Gui/Core.cs
    startLine: 1151
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: "\nInvoked when a key is released\n"
  example: []
  syntax:
    content: public event EventHandler<View.KeyEventEventArgs> KeyUp
    return:
      type: System.EventHandler{Terminal.Gui.View.KeyEventEventArgs}
    content.vb: Public Event KeyUp As EventHandler(Of View.KeyEventEventArgs)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Terminal.Gui.View.OnKeyUp(Terminal.Gui.KeyEvent)
  commentId: M:Terminal.Gui.View.OnKeyUp(Terminal.Gui.KeyEvent)
  id: OnKeyUp(Terminal.Gui.KeyEvent)
  parent: Terminal.Gui.View
  langs:
  - csharp
  - vb
  name: OnKeyUp(KeyEvent)
  nameWithType: View.OnKeyUp(KeyEvent)
  fullName: Terminal.Gui.View.OnKeyUp(Terminal.Gui.KeyEvent)
  type: Method
  source:
    remote:
      path: Terminal.Gui/Core.cs
      branch: docs_tweaks
      repo: tig:tig/gui.cs.git
    id: OnKeyUp
    path: ../Terminal.Gui/Core.cs
    startLine: 1154
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  example: []
  syntax:
    content: public override bool OnKeyUp(KeyEvent keyEvent)
    parameters:
    - id: keyEvent
      type: Terminal.Gui.KeyEvent
      description: Contains the details about the key that produced the event.
    return:
      type: System.Boolean
    content.vb: Public Overrides Function OnKeyUp(keyEvent As KeyEvent) As Boolean
  overridden: Terminal.Gui.Responder.OnKeyUp(Terminal.Gui.KeyEvent)
  overload: Terminal.Gui.View.OnKeyUp*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Terminal.Gui.View.EnsureFocus
  commentId: M:Terminal.Gui.View.EnsureFocus
  id: EnsureFocus
  parent: Terminal.Gui.View
  langs:
  - csharp
  - vb
  name: EnsureFocus()
  nameWithType: View.EnsureFocus()
  fullName: Terminal.Gui.View.EnsureFocus()
  type: Method
  source:
    remote:
      path: Terminal.Gui/Core.cs
      branch: docs_tweaks
      repo: tig:tig/gui.cs.git
    id: EnsureFocus
    path: ../Terminal.Gui/Core.cs
    startLine: 1169
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: "\nFinds the first view in the hierarchy that wants to get the focus if nothing is currently focused, otherwise, it does nothing.\n"
  example: []
  syntax:
    content: public void EnsureFocus()
    content.vb: Public Sub EnsureFocus
  overload: Terminal.Gui.View.EnsureFocus*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Terminal.Gui.View.FocusFirst
  commentId: M:Terminal.Gui.View.FocusFirst
  id: FocusFirst
  parent: Terminal.Gui.View
  langs:
  - csharp
  - vb
  name: FocusFirst()
  nameWithType: View.FocusFirst()
  fullName: Terminal.Gui.View.FocusFirst()
  type: Method
  source:
    remote:
      path: Terminal.Gui/Core.cs
      branch: docs_tweaks
      repo: tig:tig/gui.cs.git
    id: FocusFirst
    path: ../Terminal.Gui/Core.cs
    startLine: 1181
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: "\nFocuses the first focusable subview if one exists.\n"
  example: []
  syntax:
    content: public void FocusFirst()
    content.vb: Public Sub FocusFirst
  overload: Terminal.Gui.View.FocusFirst*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Terminal.Gui.View.FocusLast
  commentId: M:Terminal.Gui.View.FocusLast
  id: FocusLast
  parent: Terminal.Gui.View
  langs:
  - csharp
  - vb
  name: FocusLast()
  nameWithType: View.FocusLast()
  fullName: Terminal.Gui.View.FocusLast()
  type: Method
  source:
    remote:
      path: Terminal.Gui/Core.cs
      branch: docs_tweaks
      repo: tig:tig/gui.cs.git
    id: FocusLast
    path: ../Terminal.Gui/Core.cs
    startLine: 1199
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: "\nFocuses the last focusable subview if one exists.\n"
  example: []
  syntax:
    content: public void FocusLast()
    content.vb: Public Sub FocusLast
  overload: Terminal.Gui.View.FocusLast*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Terminal.Gui.View.FocusPrev
  commentId: M:Terminal.Gui.View.FocusPrev
  id: FocusPrev
  parent: Terminal.Gui.View
  langs:
  - csharp
  - vb
  name: FocusPrev()
  nameWithType: View.FocusPrev()
  fullName: Terminal.Gui.View.FocusPrev()
  type: Method
  source:
    remote:
      path: Terminal.Gui/Core.cs
      branch: docs_tweaks
      repo: tig:tig/gui.cs.git
    id: FocusPrev
    path: ../Terminal.Gui/Core.cs
    startLine: 1221
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: "\nFocuses the previous view.\n"
  example: []
  syntax:
    content: public bool FocusPrev()
    return:
      type: System.Boolean
      description: <code>true</code>, if previous was focused, <code>false</code> otherwise.
    content.vb: Public Function FocusPrev As Boolean
  overload: Terminal.Gui.View.FocusPrev*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Terminal.Gui.View.FocusNext
  commentId: M:Terminal.Gui.View.FocusNext
  id: FocusNext
  parent: Terminal.Gui.View
  langs:
  - csharp
  - vb
  name: FocusNext()
  nameWithType: View.FocusNext()
  fullName: Terminal.Gui.View.FocusNext()
  type: Method
  source:
    remote:
      path: Terminal.Gui/Core.cs
      branch: docs_tweaks
      repo: tig:tig/gui.cs.git
    id: FocusNext
    path: ../Terminal.Gui/Core.cs
    startLine: 1263
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: "\nFocuses the next view.\n"
  example: []
  syntax:
    content: public bool FocusNext()
    return:
      type: System.Boolean
      description: <code>true</code>, if next was focused, <code>false</code> otherwise.
    content.vb: Public Function FocusNext As Boolean
  overload: Terminal.Gui.View.FocusNext*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Terminal.Gui.View.LayoutSubviews
  commentId: M:Terminal.Gui.View.LayoutSubviews
  id: LayoutSubviews
  parent: Terminal.Gui.View
  langs:
  - csharp
  - vb
  name: LayoutSubviews()
  nameWithType: View.LayoutSubviews()
  fullName: Terminal.Gui.View.LayoutSubviews()
  type: Method
  source:
    remote:
      path: Terminal.Gui/Core.cs
      branch: docs_tweaks
      repo: tig:tig/gui.cs.git
    id: LayoutSubviews
    path: ../Terminal.Gui/Core.cs
    startLine: 1393
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: "\nThis virtual method is invoked when a view starts executing or\nwhen the dimensions of the view have changed, for example in\nresponse to the container view or terminal resizing.\n"
  example: []
  syntax:
    content: public virtual void LayoutSubviews()
    content.vb: Public Overridable Sub LayoutSubviews
  overload: Terminal.Gui.View.LayoutSubviews*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Terminal.Gui.View.ToString
  commentId: M:Terminal.Gui.View.ToString
  id: ToString
  parent: Terminal.Gui.View
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: View.ToString()
  fullName: Terminal.Gui.View.ToString()
  type: Method
  source:
    remote:
      path: Terminal.Gui/Core.cs
      branch: docs_tweaks
      repo: tig:tig/gui.cs.git
    id: ToString
    path: ../Terminal.Gui/Core.cs
    startLine: 1437
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  example: []
  syntax:
    content: public override string ToString()
    return:
      type: System.String
    content.vb: Public Overrides Function ToString As String
  overridden: System.Object.ToString
  overload: Terminal.Gui.View.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Terminal.Gui.View.OnMouseEnter(Terminal.Gui.MouseEvent)
  commentId: M:Terminal.Gui.View.OnMouseEnter(Terminal.Gui.MouseEvent)
  id: OnMouseEnter(Terminal.Gui.MouseEvent)
  parent: Terminal.Gui.View
  langs:
  - csharp
  - vb
  name: OnMouseEnter(MouseEvent)
  nameWithType: View.OnMouseEnter(MouseEvent)
  fullName: Terminal.Gui.View.OnMouseEnter(Terminal.Gui.MouseEvent)
  type: Method
  source:
    remote:
      path: Terminal.Gui/Core.cs
      branch: docs_tweaks
      repo: tig:tig/gui.cs.git
    id: OnMouseEnter
    path: ../Terminal.Gui/Core.cs
    startLine: 1443
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  example: []
  syntax:
    content: public override bool OnMouseEnter(MouseEvent mouseEvent)
    parameters:
    - id: mouseEvent
      type: Terminal.Gui.MouseEvent
    return:
      type: System.Boolean
    content.vb: Public Overrides Function OnMouseEnter(mouseEvent As MouseEvent) As Boolean
  overridden: Terminal.Gui.Responder.OnMouseEnter(Terminal.Gui.MouseEvent)
  overload: Terminal.Gui.View.OnMouseEnter*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Terminal.Gui.View.OnMouseLeave(Terminal.Gui.MouseEvent)
  commentId: M:Terminal.Gui.View.OnMouseLeave(Terminal.Gui.MouseEvent)
  id: OnMouseLeave(Terminal.Gui.MouseEvent)
  parent: Terminal.Gui.View
  langs:
  - csharp
  - vb
  name: OnMouseLeave(MouseEvent)
  nameWithType: View.OnMouseLeave(MouseEvent)
  fullName: Terminal.Gui.View.OnMouseLeave(Terminal.Gui.MouseEvent)
  type: Method
  source:
    remote:
      path: Terminal.Gui/Core.cs
      branch: docs_tweaks
      repo: tig:tig/gui.cs.git
    id: OnMouseLeave
    path: ../Terminal.Gui/Core.cs
    startLine: 1453
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  example: []
  syntax:
    content: public override bool OnMouseLeave(MouseEvent mouseEvent)
    parameters:
    - id: mouseEvent
      type: Terminal.Gui.MouseEvent
    return:
      type: System.Boolean
    content.vb: Public Overrides Function OnMouseLeave(mouseEvent As MouseEvent) As Boolean
  overridden: Terminal.Gui.Responder.OnMouseLeave(Terminal.Gui.MouseEvent)
  overload: Terminal.Gui.View.OnMouseLeave*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: Terminal.Gui.Pos
  commentId: T:Terminal.Gui.Pos
  parent: Terminal.Gui
  name: Pos
  nameWithType: Pos
  fullName: Terminal.Gui.Pos
- uid: Terminal.Gui.Dim
  commentId: T:Terminal.Gui.Dim
  parent: Terminal.Gui
  name: Dim
  nameWithType: Dim
  fullName: Terminal.Gui.Dim
- uid: Terminal.Gui
  commentId: N:Terminal.Gui
  name: Terminal.Gui
  nameWithType: Terminal.Gui
  fullName: Terminal.Gui
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Terminal.Gui.Responder
  commentId: T:Terminal.Gui.Responder
  parent: Terminal.Gui
  name: Responder
  nameWithType: Responder
  fullName: Terminal.Gui.Responder
- uid: System.Collections.IEnumerable
  commentId: T:System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: Terminal.Gui.Responder.CanFocus
  commentId: P:Terminal.Gui.Responder.CanFocus
  parent: Terminal.Gui.Responder
  name: CanFocus
  nameWithType: Responder.CanFocus
  fullName: Terminal.Gui.Responder.CanFocus
- uid: Terminal.Gui.Responder.MouseEvent(Terminal.Gui.MouseEvent)
  commentId: M:Terminal.Gui.Responder.MouseEvent(Terminal.Gui.MouseEvent)
  parent: Terminal.Gui.Responder
  name: MouseEvent(MouseEvent)
  nameWithType: Responder.MouseEvent(MouseEvent)
  fullName: Terminal.Gui.Responder.MouseEvent(Terminal.Gui.MouseEvent)
  spec.csharp:
  - uid: Terminal.Gui.Responder.MouseEvent(Terminal.Gui.MouseEvent)
    name: MouseEvent
    nameWithType: Responder.MouseEvent
    fullName: Terminal.Gui.Responder.MouseEvent
  - name: (
    nameWithType: (
    fullName: (
  - uid: Terminal.Gui.MouseEvent
    name: MouseEvent
    nameWithType: MouseEvent
    fullName: Terminal.Gui.MouseEvent
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Terminal.Gui.Responder.MouseEvent(Terminal.Gui.MouseEvent)
    name: MouseEvent
    nameWithType: Responder.MouseEvent
    fullName: Terminal.Gui.Responder.MouseEvent
  - name: (
    nameWithType: (
    fullName: (
  - uid: Terminal.Gui.MouseEvent
    name: MouseEvent
    nameWithType: MouseEvent
    fullName: Terminal.Gui.MouseEvent
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: true
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
- uid: System.EventHandler
  commentId: T:System.EventHandler
  parent: System
  isExternal: true
  name: EventHandler
  nameWithType: EventHandler
  fullName: System.EventHandler
- uid: System.EventHandler{Terminal.Gui.MouseEvent}
  commentId: T:System.EventHandler{Terminal.Gui.MouseEvent}
  parent: System
  definition: System.EventHandler`1
  name: EventHandler<MouseEvent>
  nameWithType: EventHandler<MouseEvent>
  fullName: System.EventHandler<Terminal.Gui.MouseEvent>
  nameWithType.vb: EventHandler(Of MouseEvent)
  fullName.vb: System.EventHandler(Of Terminal.Gui.MouseEvent)
  name.vb: EventHandler(Of MouseEvent)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Terminal.Gui.MouseEvent
    name: MouseEvent
    nameWithType: MouseEvent
    fullName: Terminal.Gui.MouseEvent
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Terminal.Gui.MouseEvent
    name: MouseEvent
    nameWithType: MouseEvent
    fullName: Terminal.Gui.MouseEvent
  - name: )
    nameWithType: )
    fullName: )
- uid: System.EventHandler`1
  commentId: T:System.EventHandler`1
  isExternal: true
  name: EventHandler<TEventArgs>
  nameWithType: EventHandler<TEventArgs>
  fullName: System.EventHandler<TEventArgs>
  nameWithType.vb: EventHandler(Of TEventArgs)
  fullName.vb: System.EventHandler(Of TEventArgs)
  name.vb: EventHandler(Of TEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEventArgs
    nameWithType: TEventArgs
    fullName: TEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEventArgs
    nameWithType: TEventArgs
    fullName: TEventArgs
  - name: )
    nameWithType: )
    fullName: )
- uid: Terminal.Gui.View.Driver*
  commentId: Overload:Terminal.Gui.View.Driver
  name: Driver
  nameWithType: View.Driver
  fullName: Terminal.Gui.View.Driver
- uid: Terminal.Gui.ConsoleDriver
  commentId: T:Terminal.Gui.ConsoleDriver
  parent: Terminal.Gui
  name: ConsoleDriver
  nameWithType: ConsoleDriver
  fullName: Terminal.Gui.ConsoleDriver
- uid: Terminal.Gui.View.Subviews*
  commentId: Overload:Terminal.Gui.View.Subviews
  name: Subviews
  nameWithType: View.Subviews
  fullName: Terminal.Gui.View.Subviews
- uid: System.Collections.Generic.IList{Terminal.Gui.View}
  commentId: T:System.Collections.Generic.IList{Terminal.Gui.View}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<View>
  nameWithType: IList<View>
  fullName: System.Collections.Generic.IList<Terminal.Gui.View>
  nameWithType.vb: IList(Of View)
  fullName.vb: System.Collections.Generic.IList(Of Terminal.Gui.View)
  name.vb: IList(Of View)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Terminal.Gui.View
    name: View
    nameWithType: View
    fullName: Terminal.Gui.View
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Terminal.Gui.View
    name: View
    nameWithType: View
    fullName: Terminal.Gui.View
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Terminal.Gui.View.Id*
  commentId: Overload:Terminal.Gui.View.Id
  name: Id
  nameWithType: View.Id
  fullName: Terminal.Gui.View.Id
- uid: NStack.ustring
  commentId: T:NStack.ustring
  parent: NStack
  isExternal: true
  name: ustring
  nameWithType: ustring
  fullName: NStack.ustring
- uid: NStack
  commentId: N:NStack
  isExternal: true
  name: NStack
  nameWithType: NStack
  fullName: NStack
- uid: Terminal.Gui.View.IsCurrentTop*
  commentId: Overload:Terminal.Gui.View.IsCurrentTop
  name: IsCurrentTop
  nameWithType: View.IsCurrentTop
  fullName: Terminal.Gui.View.IsCurrentTop
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Terminal.Gui.View
  commentId: T:Terminal.Gui.View
  parent: Terminal.Gui
  name: View
  nameWithType: View
  fullName: Terminal.Gui.View
- uid: Terminal.Gui.View.WantMousePositionReports*
  commentId: Overload:Terminal.Gui.View.WantMousePositionReports
  name: WantMousePositionReports
  nameWithType: View.WantMousePositionReports
  fullName: Terminal.Gui.View.WantMousePositionReports
- uid: Terminal.Gui.View.WantContinuousButtonPressed*
  commentId: Overload:Terminal.Gui.View.WantContinuousButtonPressed
  name: WantContinuousButtonPressed
  nameWithType: View.WantContinuousButtonPressed
  fullName: Terminal.Gui.View.WantContinuousButtonPressed
- uid: Terminal.Gui.View.Frame*
  commentId: Overload:Terminal.Gui.View.Frame
  name: Frame
  nameWithType: View.Frame
  fullName: Terminal.Gui.View.Frame
- uid: Terminal.Gui.Rect
  commentId: T:Terminal.Gui.Rect
  parent: Terminal.Gui
  name: Rect
  nameWithType: Rect
  fullName: Terminal.Gui.Rect
- uid: Terminal.Gui.View.GetEnumerator*
  commentId: Overload:Terminal.Gui.View.GetEnumerator
  name: GetEnumerator
  nameWithType: View.GetEnumerator
  fullName: Terminal.Gui.View.GetEnumerator
- uid: System.Collections.IEnumerable.GetEnumerator
  commentId: M:System.Collections.IEnumerable.GetEnumerator
  parent: System.Collections.IEnumerable
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable.GetEnumerator()
  fullName: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerator
  commentId: T:System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: Terminal.Gui.View.LayoutStyle*
  commentId: Overload:Terminal.Gui.View.LayoutStyle
  name: LayoutStyle
  nameWithType: View.LayoutStyle
  fullName: Terminal.Gui.View.LayoutStyle
- uid: Terminal.Gui.LayoutStyle
  commentId: T:Terminal.Gui.LayoutStyle
  parent: Terminal.Gui
  name: LayoutStyle
  nameWithType: LayoutStyle
  fullName: Terminal.Gui.LayoutStyle
- uid: Terminal.Gui.View.Bounds*
  commentId: Overload:Terminal.Gui.View.Bounds
  name: Bounds
  nameWithType: View.Bounds
  fullName: Terminal.Gui.View.Bounds
- uid: Terminal.Gui.View.X*
  commentId: Overload:Terminal.Gui.View.X
  name: X
  nameWithType: View.X
  fullName: Terminal.Gui.View.X
- uid: Terminal.Gui.View.Y*
  commentId: Overload:Terminal.Gui.View.Y
  name: Y
  nameWithType: View.Y
  fullName: Terminal.Gui.View.Y
- uid: Terminal.Gui.View.Width*
  commentId: Overload:Terminal.Gui.View.Width
  name: Width
  nameWithType: View.Width
  fullName: Terminal.Gui.View.Width
- uid: Terminal.Gui.View.Height*
  commentId: Overload:Terminal.Gui.View.Height
  name: Height
  nameWithType: View.Height
  fullName: Terminal.Gui.View.Height
- uid: Terminal.Gui.View.SuperView*
  commentId: Overload:Terminal.Gui.View.SuperView
  name: SuperView
  nameWithType: View.SuperView
  fullName: Terminal.Gui.View.SuperView
- uid: Terminal.Gui.View.#ctor*
  commentId: Overload:Terminal.Gui.View.#ctor
  name: View
  nameWithType: View.View
  fullName: Terminal.Gui.View.View
- uid: Terminal.Gui.View.SetNeedsDisplay*
  commentId: Overload:Terminal.Gui.View.SetNeedsDisplay
  name: SetNeedsDisplay
  nameWithType: View.SetNeedsDisplay
  fullName: Terminal.Gui.View.SetNeedsDisplay
- uid: Terminal.Gui.View.ChildNeedsDisplay*
  commentId: Overload:Terminal.Gui.View.ChildNeedsDisplay
  name: ChildNeedsDisplay
  nameWithType: View.ChildNeedsDisplay
  fullName: Terminal.Gui.View.ChildNeedsDisplay
- uid: Terminal.Gui.View.Add*
  commentId: Overload:Terminal.Gui.View.Add
  name: Add
  nameWithType: View.Add
  fullName: Terminal.Gui.View.Add
- uid: Terminal.Gui.View[]
  isExternal: true
  name: View[]
  nameWithType: View[]
  fullName: Terminal.Gui.View[]
  nameWithType.vb: View()
  fullName.vb: Terminal.Gui.View()
  name.vb: View()
  spec.csharp:
  - uid: Terminal.Gui.View
    name: View
    nameWithType: View
    fullName: Terminal.Gui.View
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: Terminal.Gui.View
    name: View
    nameWithType: View
    fullName: Terminal.Gui.View
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Terminal.Gui.View.RemoveAll*
  commentId: Overload:Terminal.Gui.View.RemoveAll
  name: RemoveAll
  nameWithType: View.RemoveAll
  fullName: Terminal.Gui.View.RemoveAll
- uid: Terminal.Gui.View.Remove*
  commentId: Overload:Terminal.Gui.View.Remove
  name: Remove
  nameWithType: View.Remove
  fullName: Terminal.Gui.View.Remove
- uid: Terminal.Gui.View.SendSubviewToBack(Terminal.Gui.View)
  commentId: M:Terminal.Gui.View.SendSubviewToBack(Terminal.Gui.View)
  parent: Terminal.Gui.View
  name: SendSubviewToBack(View)
  nameWithType: View.SendSubviewToBack(View)
  fullName: Terminal.Gui.View.SendSubviewToBack(Terminal.Gui.View)
  spec.csharp:
  - uid: Terminal.Gui.View.SendSubviewToBack(Terminal.Gui.View)
    name: SendSubviewToBack
    nameWithType: View.SendSubviewToBack
    fullName: Terminal.Gui.View.SendSubviewToBack
  - name: (
    nameWithType: (
    fullName: (
  - uid: Terminal.Gui.View
    name: View
    nameWithType: View
    fullName: Terminal.Gui.View
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Terminal.Gui.View.SendSubviewToBack(Terminal.Gui.View)
    name: SendSubviewToBack
    nameWithType: View.SendSubviewToBack
    fullName: Terminal.Gui.View.SendSubviewToBack
  - name: (
    nameWithType: (
    fullName: (
  - uid: Terminal.Gui.View
    name: View
    nameWithType: View
    fullName: Terminal.Gui.View
  - name: )
    nameWithType: )
    fullName: )
- uid: Terminal.Gui.View.BringSubviewToFront*
  commentId: Overload:Terminal.Gui.View.BringSubviewToFront
  name: BringSubviewToFront
  nameWithType: View.BringSubviewToFront
  fullName: Terminal.Gui.View.BringSubviewToFront
- uid: Terminal.Gui.View.BringSubviewToFront(Terminal.Gui.View)
  commentId: M:Terminal.Gui.View.BringSubviewToFront(Terminal.Gui.View)
  parent: Terminal.Gui.View
  name: BringSubviewToFront(View)
  nameWithType: View.BringSubviewToFront(View)
  fullName: Terminal.Gui.View.BringSubviewToFront(Terminal.Gui.View)
  spec.csharp:
  - uid: Terminal.Gui.View.BringSubviewToFront(Terminal.Gui.View)
    name: BringSubviewToFront
    nameWithType: View.BringSubviewToFront
    fullName: Terminal.Gui.View.BringSubviewToFront
  - name: (
    nameWithType: (
    fullName: (
  - uid: Terminal.Gui.View
    name: View
    nameWithType: View
    fullName: Terminal.Gui.View
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Terminal.Gui.View.BringSubviewToFront(Terminal.Gui.View)
    name: BringSubviewToFront
    nameWithType: View.BringSubviewToFront
    fullName: Terminal.Gui.View.BringSubviewToFront
  - name: (
    nameWithType: (
    fullName: (
  - uid: Terminal.Gui.View
    name: View
    nameWithType: View
    fullName: Terminal.Gui.View
  - name: )
    nameWithType: )
    fullName: )
- uid: Terminal.Gui.View.SendSubviewToBack*
  commentId: Overload:Terminal.Gui.View.SendSubviewToBack
  name: SendSubviewToBack
  nameWithType: View.SendSubviewToBack
  fullName: Terminal.Gui.View.SendSubviewToBack
- uid: Terminal.Gui.View.SendSubviewBackwards*
  commentId: Overload:Terminal.Gui.View.SendSubviewBackwards
  name: SendSubviewBackwards
  nameWithType: View.SendSubviewBackwards
  fullName: Terminal.Gui.View.SendSubviewBackwards
- uid: Terminal.Gui.View.BringSubviewForward*
  commentId: Overload:Terminal.Gui.View.BringSubviewForward
  name: BringSubviewForward
  nameWithType: View.BringSubviewForward
  fullName: Terminal.Gui.View.BringSubviewForward
- uid: Terminal.Gui.View.Clear*
  commentId: Overload:Terminal.Gui.View.Clear
  name: Clear
  nameWithType: View.Clear
  fullName: Terminal.Gui.View.Clear
- uid: Terminal.Gui.View.ScreenToView*
  commentId: Overload:Terminal.Gui.View.ScreenToView
  name: ScreenToView
  nameWithType: View.ScreenToView
  fullName: Terminal.Gui.View.ScreenToView
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Terminal.Gui.Point
  commentId: T:Terminal.Gui.Point
  parent: Terminal.Gui
  name: Point
  nameWithType: Point
  fullName: Terminal.Gui.Point
- uid: Terminal.Gui.View.ClipToBounds*
  commentId: Overload:Terminal.Gui.View.ClipToBounds
  name: ClipToBounds
  nameWithType: View.ClipToBounds
  fullName: Terminal.Gui.View.ClipToBounds
- uid: Terminal.Gui.View.SetClip*
  commentId: Overload:Terminal.Gui.View.SetClip
  name: SetClip
  nameWithType: View.SetClip
  fullName: Terminal.Gui.View.SetClip
- uid: Terminal.Gui.View.DrawFrame*
  commentId: Overload:Terminal.Gui.View.DrawFrame
  name: DrawFrame
  nameWithType: View.DrawFrame
  fullName: Terminal.Gui.View.DrawFrame
- uid: Terminal.Gui.View.DrawHotString*
  commentId: Overload:Terminal.Gui.View.DrawHotString
  name: DrawHotString
  nameWithType: View.DrawHotString
  fullName: Terminal.Gui.View.DrawHotString
- uid: Terminal.Gui.Attribute
  commentId: T:Terminal.Gui.Attribute
  parent: Terminal.Gui
  name: Attribute
  nameWithType: Attribute
  fullName: Terminal.Gui.Attribute
- uid: Terminal.Gui.ColorScheme
  commentId: T:Terminal.Gui.ColorScheme
  parent: Terminal.Gui
  name: ColorScheme
  nameWithType: ColorScheme
  fullName: Terminal.Gui.ColorScheme
- uid: Terminal.Gui.View.Move*
  commentId: Overload:Terminal.Gui.View.Move
  name: Move
  nameWithType: View.Move
  fullName: Terminal.Gui.View.Move
- uid: Terminal.Gui.View.PositionCursor*
  commentId: Overload:Terminal.Gui.View.PositionCursor
  name: PositionCursor
  nameWithType: View.PositionCursor
  fullName: Terminal.Gui.View.PositionCursor
- uid: Terminal.Gui.View.HasFocus
  commentId: P:Terminal.Gui.View.HasFocus
  parent: Terminal.Gui.View
  name: HasFocus
  nameWithType: View.HasFocus
  fullName: Terminal.Gui.View.HasFocus
- uid: Terminal.Gui.Responder.HasFocus
  commentId: P:Terminal.Gui.Responder.HasFocus
  parent: Terminal.Gui.Responder
  name: HasFocus
  nameWithType: Responder.HasFocus
  fullName: Terminal.Gui.Responder.HasFocus
- uid: Terminal.Gui.View.HasFocus*
  commentId: Overload:Terminal.Gui.View.HasFocus
  name: HasFocus
  nameWithType: View.HasFocus
  fullName: Terminal.Gui.View.HasFocus
- uid: Terminal.Gui.View.OnEnter
  commentId: M:Terminal.Gui.View.OnEnter
  parent: Terminal.Gui.View
  name: OnEnter()
  nameWithType: View.OnEnter()
  fullName: Terminal.Gui.View.OnEnter()
  spec.csharp:
  - uid: Terminal.Gui.View.OnEnter
    name: OnEnter
    nameWithType: View.OnEnter
    fullName: Terminal.Gui.View.OnEnter
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Terminal.Gui.View.OnEnter
    name: OnEnter
    nameWithType: View.OnEnter
    fullName: Terminal.Gui.View.OnEnter
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Terminal.Gui.Responder.OnEnter
  commentId: M:Terminal.Gui.Responder.OnEnter
  parent: Terminal.Gui.Responder
  name: OnEnter()
  nameWithType: Responder.OnEnter()
  fullName: Terminal.Gui.Responder.OnEnter()
  spec.csharp:
  - uid: Terminal.Gui.Responder.OnEnter
    name: OnEnter
    nameWithType: Responder.OnEnter
    fullName: Terminal.Gui.Responder.OnEnter
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Terminal.Gui.Responder.OnEnter
    name: OnEnter
    nameWithType: Responder.OnEnter
    fullName: Terminal.Gui.Responder.OnEnter
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Terminal.Gui.View.OnEnter*
  commentId: Overload:Terminal.Gui.View.OnEnter
  name: OnEnter
  nameWithType: View.OnEnter
  fullName: Terminal.Gui.View.OnEnter
- uid: Terminal.Gui.View.OnLeave
  commentId: M:Terminal.Gui.View.OnLeave
  parent: Terminal.Gui.View
  name: OnLeave()
  nameWithType: View.OnLeave()
  fullName: Terminal.Gui.View.OnLeave()
  spec.csharp:
  - uid: Terminal.Gui.View.OnLeave
    name: OnLeave
    nameWithType: View.OnLeave
    fullName: Terminal.Gui.View.OnLeave
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Terminal.Gui.View.OnLeave
    name: OnLeave
    nameWithType: View.OnLeave
    fullName: Terminal.Gui.View.OnLeave
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Terminal.Gui.Responder.OnLeave
  commentId: M:Terminal.Gui.Responder.OnLeave
  parent: Terminal.Gui.Responder
  name: OnLeave()
  nameWithType: Responder.OnLeave()
  fullName: Terminal.Gui.Responder.OnLeave()
  spec.csharp:
  - uid: Terminal.Gui.Responder.OnLeave
    name: OnLeave
    nameWithType: Responder.OnLeave
    fullName: Terminal.Gui.Responder.OnLeave
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Terminal.Gui.Responder.OnLeave
    name: OnLeave
    nameWithType: Responder.OnLeave
    fullName: Terminal.Gui.Responder.OnLeave
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Terminal.Gui.View.OnLeave*
  commentId: Overload:Terminal.Gui.View.OnLeave
  name: OnLeave
  nameWithType: View.OnLeave
  fullName: Terminal.Gui.View.OnLeave
- uid: Terminal.Gui.View.Focused*
  commentId: Overload:Terminal.Gui.View.Focused
  name: Focused
  nameWithType: View.Focused
  fullName: Terminal.Gui.View.Focused
- uid: Terminal.Gui.View.MostFocused*
  commentId: Overload:Terminal.Gui.View.MostFocused
  name: MostFocused
  nameWithType: View.MostFocused
  fullName: Terminal.Gui.View.MostFocused
- uid: Terminal.Gui.View.ColorScheme*
  commentId: Overload:Terminal.Gui.View.ColorScheme
  name: ColorScheme
  nameWithType: View.ColorScheme
  fullName: Terminal.Gui.View.ColorScheme
- uid: Terminal.Gui.View.AddRune*
  commentId: Overload:Terminal.Gui.View.AddRune
  name: AddRune
  nameWithType: View.AddRune
  fullName: Terminal.Gui.View.AddRune
- uid: System.Rune
  commentId: T:System.Rune
  parent: System
  isExternal: true
  name: Rune
  nameWithType: Rune
  fullName: System.Rune
- uid: Terminal.Gui.View.ClearNeedsDisplay*
  commentId: Overload:Terminal.Gui.View.ClearNeedsDisplay
  name: ClearNeedsDisplay
  nameWithType: View.ClearNeedsDisplay
  fullName: Terminal.Gui.View.ClearNeedsDisplay
- uid: Terminal.Gui.View.Redraw*
  commentId: Overload:Terminal.Gui.View.Redraw
  name: Redraw
  nameWithType: View.Redraw
  fullName: Terminal.Gui.View.Redraw
- uid: Terminal.Gui.View.SetFocus*
  commentId: Overload:Terminal.Gui.View.SetFocus
  name: SetFocus
  nameWithType: View.SetFocus
  fullName: Terminal.Gui.View.SetFocus
- uid: System.EventHandler{Terminal.Gui.View.KeyEventEventArgs}
  commentId: T:System.EventHandler{Terminal.Gui.View.KeyEventEventArgs}
  parent: System
  definition: System.EventHandler`1
  name: EventHandler<View.KeyEventEventArgs>
  nameWithType: EventHandler<View.KeyEventEventArgs>
  fullName: System.EventHandler<Terminal.Gui.View.KeyEventEventArgs>
  nameWithType.vb: EventHandler(Of View.KeyEventEventArgs)
  fullName.vb: System.EventHandler(Of Terminal.Gui.View.KeyEventEventArgs)
  name.vb: EventHandler(Of View.KeyEventEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Terminal.Gui.View.KeyEventEventArgs
    name: View.KeyEventEventArgs
    nameWithType: View.KeyEventEventArgs
    fullName: Terminal.Gui.View.KeyEventEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Terminal.Gui.View.KeyEventEventArgs
    name: View.KeyEventEventArgs
    nameWithType: View.KeyEventEventArgs
    fullName: Terminal.Gui.View.KeyEventEventArgs
  - name: )
    nameWithType: )
    fullName: )
- uid: Terminal.Gui.View.ProcessKey(Terminal.Gui.KeyEvent)
  commentId: M:Terminal.Gui.View.ProcessKey(Terminal.Gui.KeyEvent)
  parent: Terminal.Gui.View
  name: ProcessKey(KeyEvent)
  nameWithType: View.ProcessKey(KeyEvent)
  fullName: Terminal.Gui.View.ProcessKey(Terminal.Gui.KeyEvent)
  spec.csharp:
  - uid: Terminal.Gui.View.ProcessKey(Terminal.Gui.KeyEvent)
    name: ProcessKey
    nameWithType: View.ProcessKey
    fullName: Terminal.Gui.View.ProcessKey
  - name: (
    nameWithType: (
    fullName: (
  - uid: Terminal.Gui.KeyEvent
    name: KeyEvent
    nameWithType: KeyEvent
    fullName: Terminal.Gui.KeyEvent
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Terminal.Gui.View.ProcessKey(Terminal.Gui.KeyEvent)
    name: ProcessKey
    nameWithType: View.ProcessKey
    fullName: Terminal.Gui.View.ProcessKey
  - name: (
    nameWithType: (
    fullName: (
  - uid: Terminal.Gui.KeyEvent
    name: KeyEvent
    nameWithType: KeyEvent
    fullName: Terminal.Gui.KeyEvent
  - name: )
    nameWithType: )
    fullName: )
- uid: Terminal.Gui.Responder.ProcessKey(Terminal.Gui.KeyEvent)
  commentId: M:Terminal.Gui.Responder.ProcessKey(Terminal.Gui.KeyEvent)
  parent: Terminal.Gui.Responder
  name: ProcessKey(KeyEvent)
  nameWithType: Responder.ProcessKey(KeyEvent)
  fullName: Terminal.Gui.Responder.ProcessKey(Terminal.Gui.KeyEvent)
  spec.csharp:
  - uid: Terminal.Gui.Responder.ProcessKey(Terminal.Gui.KeyEvent)
    name: ProcessKey
    nameWithType: Responder.ProcessKey
    fullName: Terminal.Gui.Responder.ProcessKey
  - name: (
    nameWithType: (
    fullName: (
  - uid: Terminal.Gui.KeyEvent
    name: KeyEvent
    nameWithType: KeyEvent
    fullName: Terminal.Gui.KeyEvent
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Terminal.Gui.Responder.ProcessKey(Terminal.Gui.KeyEvent)
    name: ProcessKey
    nameWithType: Responder.ProcessKey
    fullName: Terminal.Gui.Responder.ProcessKey
  - name: (
    nameWithType: (
    fullName: (
  - uid: Terminal.Gui.KeyEvent
    name: KeyEvent
    nameWithType: KeyEvent
    fullName: Terminal.Gui.KeyEvent
  - name: )
    nameWithType: )
    fullName: )
- uid: Terminal.Gui.View.ProcessKey*
  commentId: Overload:Terminal.Gui.View.ProcessKey
  name: ProcessKey
  nameWithType: View.ProcessKey
  fullName: Terminal.Gui.View.ProcessKey
- uid: Terminal.Gui.KeyEvent
  commentId: T:Terminal.Gui.KeyEvent
  parent: Terminal.Gui
  name: KeyEvent
  nameWithType: KeyEvent
  fullName: Terminal.Gui.KeyEvent
- uid: Terminal.Gui.View.ProcessHotKey(Terminal.Gui.KeyEvent)
  commentId: M:Terminal.Gui.View.ProcessHotKey(Terminal.Gui.KeyEvent)
  parent: Terminal.Gui.View
  name: ProcessHotKey(KeyEvent)
  nameWithType: View.ProcessHotKey(KeyEvent)
  fullName: Terminal.Gui.View.ProcessHotKey(Terminal.Gui.KeyEvent)
  spec.csharp:
  - uid: Terminal.Gui.View.ProcessHotKey(Terminal.Gui.KeyEvent)
    name: ProcessHotKey
    nameWithType: View.ProcessHotKey
    fullName: Terminal.Gui.View.ProcessHotKey
  - name: (
    nameWithType: (
    fullName: (
  - uid: Terminal.Gui.KeyEvent
    name: KeyEvent
    nameWithType: KeyEvent
    fullName: Terminal.Gui.KeyEvent
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Terminal.Gui.View.ProcessHotKey(Terminal.Gui.KeyEvent)
    name: ProcessHotKey
    nameWithType: View.ProcessHotKey
    fullName: Terminal.Gui.View.ProcessHotKey
  - name: (
    nameWithType: (
    fullName: (
  - uid: Terminal.Gui.KeyEvent
    name: KeyEvent
    nameWithType: KeyEvent
    fullName: Terminal.Gui.KeyEvent
  - name: )
    nameWithType: )
    fullName: )
- uid: Terminal.Gui.Responder.ProcessHotKey(Terminal.Gui.KeyEvent)
  commentId: M:Terminal.Gui.Responder.ProcessHotKey(Terminal.Gui.KeyEvent)
  parent: Terminal.Gui.Responder
  name: ProcessHotKey(KeyEvent)
  nameWithType: Responder.ProcessHotKey(KeyEvent)
  fullName: Terminal.Gui.Responder.ProcessHotKey(Terminal.Gui.KeyEvent)
  spec.csharp:
  - uid: Terminal.Gui.Responder.ProcessHotKey(Terminal.Gui.KeyEvent)
    name: ProcessHotKey
    nameWithType: Responder.ProcessHotKey
    fullName: Terminal.Gui.Responder.ProcessHotKey
  - name: (
    nameWithType: (
    fullName: (
  - uid: Terminal.Gui.KeyEvent
    name: KeyEvent
    nameWithType: KeyEvent
    fullName: Terminal.Gui.KeyEvent
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Terminal.Gui.Responder.ProcessHotKey(Terminal.Gui.KeyEvent)
    name: ProcessHotKey
    nameWithType: Responder.ProcessHotKey
    fullName: Terminal.Gui.Responder.ProcessHotKey
  - name: (
    nameWithType: (
    fullName: (
  - uid: Terminal.Gui.KeyEvent
    name: KeyEvent
    nameWithType: KeyEvent
    fullName: Terminal.Gui.KeyEvent
  - name: )
    nameWithType: )
    fullName: )
- uid: Terminal.Gui.View.ProcessHotKey*
  commentId: Overload:Terminal.Gui.View.ProcessHotKey
  name: ProcessHotKey
  nameWithType: View.ProcessHotKey
  fullName: Terminal.Gui.View.ProcessHotKey
- uid: Terminal.Gui.View.ProcessColdKey(Terminal.Gui.KeyEvent)
  commentId: M:Terminal.Gui.View.ProcessColdKey(Terminal.Gui.KeyEvent)
  parent: Terminal.Gui.View
  name: ProcessColdKey(KeyEvent)
  nameWithType: View.ProcessColdKey(KeyEvent)
  fullName: Terminal.Gui.View.ProcessColdKey(Terminal.Gui.KeyEvent)
  spec.csharp:
  - uid: Terminal.Gui.View.ProcessColdKey(Terminal.Gui.KeyEvent)
    name: ProcessColdKey
    nameWithType: View.ProcessColdKey
    fullName: Terminal.Gui.View.ProcessColdKey
  - name: (
    nameWithType: (
    fullName: (
  - uid: Terminal.Gui.KeyEvent
    name: KeyEvent
    nameWithType: KeyEvent
    fullName: Terminal.Gui.KeyEvent
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Terminal.Gui.View.ProcessColdKey(Terminal.Gui.KeyEvent)
    name: ProcessColdKey
    nameWithType: View.ProcessColdKey
    fullName: Terminal.Gui.View.ProcessColdKey
  - name: (
    nameWithType: (
    fullName: (
  - uid: Terminal.Gui.KeyEvent
    name: KeyEvent
    nameWithType: KeyEvent
    fullName: Terminal.Gui.KeyEvent
  - name: )
    nameWithType: )
    fullName: )
- uid: Terminal.Gui.Responder.ProcessColdKey(Terminal.Gui.KeyEvent)
  commentId: M:Terminal.Gui.Responder.ProcessColdKey(Terminal.Gui.KeyEvent)
  parent: Terminal.Gui.Responder
  name: ProcessColdKey(KeyEvent)
  nameWithType: Responder.ProcessColdKey(KeyEvent)
  fullName: Terminal.Gui.Responder.ProcessColdKey(Terminal.Gui.KeyEvent)
  spec.csharp:
  - uid: Terminal.Gui.Responder.ProcessColdKey(Terminal.Gui.KeyEvent)
    name: ProcessColdKey
    nameWithType: Responder.ProcessColdKey
    fullName: Terminal.Gui.Responder.ProcessColdKey
  - name: (
    nameWithType: (
    fullName: (
  - uid: Terminal.Gui.KeyEvent
    name: KeyEvent
    nameWithType: KeyEvent
    fullName: Terminal.Gui.KeyEvent
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Terminal.Gui.Responder.ProcessColdKey(Terminal.Gui.KeyEvent)
    name: ProcessColdKey
    nameWithType: Responder.ProcessColdKey
    fullName: Terminal.Gui.Responder.ProcessColdKey
  - name: (
    nameWithType: (
    fullName: (
  - uid: Terminal.Gui.KeyEvent
    name: KeyEvent
    nameWithType: KeyEvent
    fullName: Terminal.Gui.KeyEvent
  - name: )
    nameWithType: )
    fullName: )
- uid: Terminal.Gui.View.ProcessColdKey*
  commentId: Overload:Terminal.Gui.View.ProcessColdKey
  name: ProcessColdKey
  nameWithType: View.ProcessColdKey
  fullName: Terminal.Gui.View.ProcessColdKey
- uid: Terminal.Gui.Responder.OnKeyDown(Terminal.Gui.KeyEvent)
  commentId: M:Terminal.Gui.Responder.OnKeyDown(Terminal.Gui.KeyEvent)
  parent: Terminal.Gui.Responder
  name: OnKeyDown(KeyEvent)
  nameWithType: Responder.OnKeyDown(KeyEvent)
  fullName: Terminal.Gui.Responder.OnKeyDown(Terminal.Gui.KeyEvent)
  spec.csharp:
  - uid: Terminal.Gui.Responder.OnKeyDown(Terminal.Gui.KeyEvent)
    name: OnKeyDown
    nameWithType: Responder.OnKeyDown
    fullName: Terminal.Gui.Responder.OnKeyDown
  - name: (
    nameWithType: (
    fullName: (
  - uid: Terminal.Gui.KeyEvent
    name: KeyEvent
    nameWithType: KeyEvent
    fullName: Terminal.Gui.KeyEvent
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Terminal.Gui.Responder.OnKeyDown(Terminal.Gui.KeyEvent)
    name: OnKeyDown
    nameWithType: Responder.OnKeyDown
    fullName: Terminal.Gui.Responder.OnKeyDown
  - name: (
    nameWithType: (
    fullName: (
  - uid: Terminal.Gui.KeyEvent
    name: KeyEvent
    nameWithType: KeyEvent
    fullName: Terminal.Gui.KeyEvent
  - name: )
    nameWithType: )
    fullName: )
- uid: Terminal.Gui.View.OnKeyDown*
  commentId: Overload:Terminal.Gui.View.OnKeyDown
  name: OnKeyDown
  nameWithType: View.OnKeyDown
  fullName: Terminal.Gui.View.OnKeyDown
- uid: Terminal.Gui.Responder.OnKeyUp(Terminal.Gui.KeyEvent)
  commentId: M:Terminal.Gui.Responder.OnKeyUp(Terminal.Gui.KeyEvent)
  parent: Terminal.Gui.Responder
  name: OnKeyUp(KeyEvent)
  nameWithType: Responder.OnKeyUp(KeyEvent)
  fullName: Terminal.Gui.Responder.OnKeyUp(Terminal.Gui.KeyEvent)
  spec.csharp:
  - uid: Terminal.Gui.Responder.OnKeyUp(Terminal.Gui.KeyEvent)
    name: OnKeyUp
    nameWithType: Responder.OnKeyUp
    fullName: Terminal.Gui.Responder.OnKeyUp
  - name: (
    nameWithType: (
    fullName: (
  - uid: Terminal.Gui.KeyEvent
    name: KeyEvent
    nameWithType: KeyEvent
    fullName: Terminal.Gui.KeyEvent
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Terminal.Gui.Responder.OnKeyUp(Terminal.Gui.KeyEvent)
    name: OnKeyUp
    nameWithType: Responder.OnKeyUp
    fullName: Terminal.Gui.Responder.OnKeyUp
  - name: (
    nameWithType: (
    fullName: (
  - uid: Terminal.Gui.KeyEvent
    name: KeyEvent
    nameWithType: KeyEvent
    fullName: Terminal.Gui.KeyEvent
  - name: )
    nameWithType: )
    fullName: )
- uid: Terminal.Gui.View.OnKeyUp*
  commentId: Overload:Terminal.Gui.View.OnKeyUp
  name: OnKeyUp
  nameWithType: View.OnKeyUp
  fullName: Terminal.Gui.View.OnKeyUp
- uid: Terminal.Gui.View.EnsureFocus*
  commentId: Overload:Terminal.Gui.View.EnsureFocus
  name: EnsureFocus
  nameWithType: View.EnsureFocus
  fullName: Terminal.Gui.View.EnsureFocus
- uid: Terminal.Gui.View.FocusFirst*
  commentId: Overload:Terminal.Gui.View.FocusFirst
  name: FocusFirst
  nameWithType: View.FocusFirst
  fullName: Terminal.Gui.View.FocusFirst
- uid: Terminal.Gui.View.FocusLast*
  commentId: Overload:Terminal.Gui.View.FocusLast
  name: FocusLast
  nameWithType: View.FocusLast
  fullName: Terminal.Gui.View.FocusLast
- uid: Terminal.Gui.View.FocusPrev*
  commentId: Overload:Terminal.Gui.View.FocusPrev
  name: FocusPrev
  nameWithType: View.FocusPrev
  fullName: Terminal.Gui.View.FocusPrev
- uid: Terminal.Gui.View.FocusNext*
  commentId: Overload:Terminal.Gui.View.FocusNext
  name: FocusNext
  nameWithType: View.FocusNext
  fullName: Terminal.Gui.View.FocusNext
- uid: Terminal.Gui.View.LayoutSubviews*
  commentId: Overload:Terminal.Gui.View.LayoutSubviews
  name: LayoutSubviews
  nameWithType: View.LayoutSubviews
  fullName: Terminal.Gui.View.LayoutSubviews
- uid: Terminal.Gui.View.ToString
  commentId: M:Terminal.Gui.View.ToString
  parent: Terminal.Gui.View
  name: ToString()
  nameWithType: View.ToString()
  fullName: Terminal.Gui.View.ToString()
  spec.csharp:
  - uid: Terminal.Gui.View.ToString
    name: ToString
    nameWithType: View.ToString
    fullName: Terminal.Gui.View.ToString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Terminal.Gui.View.ToString
    name: ToString
    nameWithType: View.ToString
    fullName: Terminal.Gui.View.ToString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Terminal.Gui.View.ToString*
  commentId: Overload:Terminal.Gui.View.ToString
  name: ToString
  nameWithType: View.ToString
  fullName: Terminal.Gui.View.ToString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Terminal.Gui.View.OnMouseEnter(Terminal.Gui.MouseEvent)
  commentId: M:Terminal.Gui.View.OnMouseEnter(Terminal.Gui.MouseEvent)
  parent: Terminal.Gui.View
  name: OnMouseEnter(MouseEvent)
  nameWithType: View.OnMouseEnter(MouseEvent)
  fullName: Terminal.Gui.View.OnMouseEnter(Terminal.Gui.MouseEvent)
  spec.csharp:
  - uid: Terminal.Gui.View.OnMouseEnter(Terminal.Gui.MouseEvent)
    name: OnMouseEnter
    nameWithType: View.OnMouseEnter
    fullName: Terminal.Gui.View.OnMouseEnter
  - name: (
    nameWithType: (
    fullName: (
  - uid: Terminal.Gui.MouseEvent
    name: MouseEvent
    nameWithType: MouseEvent
    fullName: Terminal.Gui.MouseEvent
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Terminal.Gui.View.OnMouseEnter(Terminal.Gui.MouseEvent)
    name: OnMouseEnter
    nameWithType: View.OnMouseEnter
    fullName: Terminal.Gui.View.OnMouseEnter
  - name: (
    nameWithType: (
    fullName: (
  - uid: Terminal.Gui.MouseEvent
    name: MouseEvent
    nameWithType: MouseEvent
    fullName: Terminal.Gui.MouseEvent
  - name: )
    nameWithType: )
    fullName: )
- uid: Terminal.Gui.Responder.OnMouseEnter(Terminal.Gui.MouseEvent)
  commentId: M:Terminal.Gui.Responder.OnMouseEnter(Terminal.Gui.MouseEvent)
  parent: Terminal.Gui.Responder
  name: OnMouseEnter(MouseEvent)
  nameWithType: Responder.OnMouseEnter(MouseEvent)
  fullName: Terminal.Gui.Responder.OnMouseEnter(Terminal.Gui.MouseEvent)
  spec.csharp:
  - uid: Terminal.Gui.Responder.OnMouseEnter(Terminal.Gui.MouseEvent)
    name: OnMouseEnter
    nameWithType: Responder.OnMouseEnter
    fullName: Terminal.Gui.Responder.OnMouseEnter
  - name: (
    nameWithType: (
    fullName: (
  - uid: Terminal.Gui.MouseEvent
    name: MouseEvent
    nameWithType: MouseEvent
    fullName: Terminal.Gui.MouseEvent
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Terminal.Gui.Responder.OnMouseEnter(Terminal.Gui.MouseEvent)
    name: OnMouseEnter
    nameWithType: Responder.OnMouseEnter
    fullName: Terminal.Gui.Responder.OnMouseEnter
  - name: (
    nameWithType: (
    fullName: (
  - uid: Terminal.Gui.MouseEvent
    name: MouseEvent
    nameWithType: MouseEvent
    fullName: Terminal.Gui.MouseEvent
  - name: )
    nameWithType: )
    fullName: )
- uid: Terminal.Gui.View.OnMouseEnter*
  commentId: Overload:Terminal.Gui.View.OnMouseEnter
  name: OnMouseEnter
  nameWithType: View.OnMouseEnter
  fullName: Terminal.Gui.View.OnMouseEnter
- uid: Terminal.Gui.MouseEvent
  commentId: T:Terminal.Gui.MouseEvent
  parent: Terminal.Gui
  name: MouseEvent
  nameWithType: MouseEvent
  fullName: Terminal.Gui.MouseEvent
- uid: Terminal.Gui.View.OnMouseLeave(Terminal.Gui.MouseEvent)
  commentId: M:Terminal.Gui.View.OnMouseLeave(Terminal.Gui.MouseEvent)
  parent: Terminal.Gui.View
  name: OnMouseLeave(MouseEvent)
  nameWithType: View.OnMouseLeave(MouseEvent)
  fullName: Terminal.Gui.View.OnMouseLeave(Terminal.Gui.MouseEvent)
  spec.csharp:
  - uid: Terminal.Gui.View.OnMouseLeave(Terminal.Gui.MouseEvent)
    name: OnMouseLeave
    nameWithType: View.OnMouseLeave
    fullName: Terminal.Gui.View.OnMouseLeave
  - name: (
    nameWithType: (
    fullName: (
  - uid: Terminal.Gui.MouseEvent
    name: MouseEvent
    nameWithType: MouseEvent
    fullName: Terminal.Gui.MouseEvent
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Terminal.Gui.View.OnMouseLeave(Terminal.Gui.MouseEvent)
    name: OnMouseLeave
    nameWithType: View.OnMouseLeave
    fullName: Terminal.Gui.View.OnMouseLeave
  - name: (
    nameWithType: (
    fullName: (
  - uid: Terminal.Gui.MouseEvent
    name: MouseEvent
    nameWithType: MouseEvent
    fullName: Terminal.Gui.MouseEvent
  - name: )
    nameWithType: )
    fullName: )
- uid: Terminal.Gui.Responder.OnMouseLeave(Terminal.Gui.MouseEvent)
  commentId: M:Terminal.Gui.Responder.OnMouseLeave(Terminal.Gui.MouseEvent)
  parent: Terminal.Gui.Responder
  name: OnMouseLeave(MouseEvent)
  nameWithType: Responder.OnMouseLeave(MouseEvent)
  fullName: Terminal.Gui.Responder.OnMouseLeave(Terminal.Gui.MouseEvent)
  spec.csharp:
  - uid: Terminal.Gui.Responder.OnMouseLeave(Terminal.Gui.MouseEvent)
    name: OnMouseLeave
    nameWithType: Responder.OnMouseLeave
    fullName: Terminal.Gui.Responder.OnMouseLeave
  - name: (
    nameWithType: (
    fullName: (
  - uid: Terminal.Gui.MouseEvent
    name: MouseEvent
    nameWithType: MouseEvent
    fullName: Terminal.Gui.MouseEvent
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Terminal.Gui.Responder.OnMouseLeave(Terminal.Gui.MouseEvent)
    name: OnMouseLeave
    nameWithType: Responder.OnMouseLeave
    fullName: Terminal.Gui.Responder.OnMouseLeave
  - name: (
    nameWithType: (
    fullName: (
  - uid: Terminal.Gui.MouseEvent
    name: MouseEvent
    nameWithType: MouseEvent
    fullName: Terminal.Gui.MouseEvent
  - name: )
    nameWithType: )
    fullName: )
- uid: Terminal.Gui.View.OnMouseLeave*
  commentId: Overload:Terminal.Gui.View.OnMouseLeave
  name: OnMouseLeave
  nameWithType: View.OnMouseLeave
  fullName: Terminal.Gui.View.OnMouseLeave
shouldSkipMarkup: true
