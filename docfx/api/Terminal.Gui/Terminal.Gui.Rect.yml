### YamlMime:ManagedReference
items:
- uid: Terminal.Gui.Rect
  commentId: T:Terminal.Gui.Rect
  id: Rect
  parent: Terminal.Gui
  children:
  - Terminal.Gui.Rect.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)
  - Terminal.Gui.Rect.#ctor(Terminal.Gui.Point,Terminal.Gui.Size)
  - Terminal.Gui.Rect.Bottom
  - Terminal.Gui.Rect.Contains(System.Int32,System.Int32)
  - Terminal.Gui.Rect.Contains(Terminal.Gui.Point)
  - Terminal.Gui.Rect.Contains(Terminal.Gui.Rect)
  - Terminal.Gui.Rect.Empty
  - Terminal.Gui.Rect.Equals(System.Object)
  - Terminal.Gui.Rect.FromLTRB(System.Int32,System.Int32,System.Int32,System.Int32)
  - Terminal.Gui.Rect.GetHashCode
  - Terminal.Gui.Rect.Height
  - Terminal.Gui.Rect.Inflate(System.Int32,System.Int32)
  - Terminal.Gui.Rect.Inflate(Terminal.Gui.Rect,System.Int32,System.Int32)
  - Terminal.Gui.Rect.Inflate(Terminal.Gui.Size)
  - Terminal.Gui.Rect.Intersect(Terminal.Gui.Rect)
  - Terminal.Gui.Rect.Intersect(Terminal.Gui.Rect,Terminal.Gui.Rect)
  - Terminal.Gui.Rect.IntersectsWith(Terminal.Gui.Rect)
  - Terminal.Gui.Rect.IsEmpty
  - Terminal.Gui.Rect.Left
  - Terminal.Gui.Rect.Location
  - Terminal.Gui.Rect.Offset(System.Int32,System.Int32)
  - Terminal.Gui.Rect.Offset(Terminal.Gui.Point)
  - Terminal.Gui.Rect.op_Equality(Terminal.Gui.Rect,Terminal.Gui.Rect)
  - Terminal.Gui.Rect.op_Inequality(Terminal.Gui.Rect,Terminal.Gui.Rect)
  - Terminal.Gui.Rect.Right
  - Terminal.Gui.Rect.Size
  - Terminal.Gui.Rect.Top
  - Terminal.Gui.Rect.ToString
  - Terminal.Gui.Rect.Union(Terminal.Gui.Rect,Terminal.Gui.Rect)
  - Terminal.Gui.Rect.Width
  - Terminal.Gui.Rect.X
  - Terminal.Gui.Rect.Y
  langs:
  - csharp
  - vb
  name: Rect
  nameWithType: Rect
  fullName: Terminal.Gui.Rect
  type: Struct
  source:
    remote:
      path: Terminal.Gui/Types/Rect.cs
      branch: docs
      repo: tig:tig/gui.cs.git
    id: Rect
    path: ../Terminal.Gui/Types/Rect.cs
    startLine: 17
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: "\nStores a set of four integers that represent the location and size of a rectangle\n"
  example: []
  syntax:
    content: public struct Rect
    content.vb: Public Structure Rect
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.ReferenceEquals(System.Object,System.Object)
  modifiers.csharp:
  - public
  - struct
  modifiers.vb:
  - Public
  - Structure
- uid: Terminal.Gui.Rect.X
  commentId: F:Terminal.Gui.Rect.X
  id: X
  parent: Terminal.Gui.Rect
  langs:
  - csharp
  - vb
  name: X
  nameWithType: Rect.X
  fullName: Terminal.Gui.Rect.X
  type: Field
  source:
    remote:
      path: Terminal.Gui/Types/Rect.cs
      branch: docs
      repo: tig:tig/gui.cs.git
    id: X
    path: ../Terminal.Gui/Types/Rect.cs
    startLine: 22
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: "\nGets or sets the x-coordinate of the upper-left corner of this Rectangle structure.\n"
  example: []
  syntax:
    content: public int X
    return:
      type: System.Int32
    content.vb: Public X As Integer
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Terminal.Gui.Rect.Y
  commentId: F:Terminal.Gui.Rect.Y
  id: Y
  parent: Terminal.Gui.Rect
  langs:
  - csharp
  - vb
  name: Y
  nameWithType: Rect.Y
  fullName: Terminal.Gui.Rect.Y
  type: Field
  source:
    remote:
      path: Terminal.Gui/Types/Rect.cs
      branch: docs
      repo: tig:tig/gui.cs.git
    id: Y
    path: ../Terminal.Gui/Types/Rect.cs
    startLine: 26
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: "\nGets or sets the y-coordinate of the upper-left corner of this Rectangle structure.\n"
  example: []
  syntax:
    content: public int Y
    return:
      type: System.Int32
    content.vb: Public Y As Integer
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Terminal.Gui.Rect.Width
  commentId: F:Terminal.Gui.Rect.Width
  id: Width
  parent: Terminal.Gui.Rect
  langs:
  - csharp
  - vb
  name: Width
  nameWithType: Rect.Width
  fullName: Terminal.Gui.Rect.Width
  type: Field
  source:
    remote:
      path: Terminal.Gui/Types/Rect.cs
      branch: docs
      repo: tig:tig/gui.cs.git
    id: Width
    path: ../Terminal.Gui/Types/Rect.cs
    startLine: 31
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: "\nGets or sets the width of this Rect structure.\n"
  example: []
  syntax:
    content: public int Width
    return:
      type: System.Int32
    content.vb: Public Width As Integer
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Terminal.Gui.Rect.Height
  commentId: F:Terminal.Gui.Rect.Height
  id: Height
  parent: Terminal.Gui.Rect
  langs:
  - csharp
  - vb
  name: Height
  nameWithType: Rect.Height
  fullName: Terminal.Gui.Rect.Height
  type: Field
  source:
    remote:
      path: Terminal.Gui/Types/Rect.cs
      branch: docs
      repo: tig:tig/gui.cs.git
    id: Height
    path: ../Terminal.Gui/Types/Rect.cs
    startLine: 36
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: "\nGets or sets the height of this Rectangle structure.\n"
  example: []
  syntax:
    content: public int Height
    return:
      type: System.Int32
    content.vb: Public Height As Integer
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Terminal.Gui.Rect.Empty
  commentId: F:Terminal.Gui.Rect.Empty
  id: Empty
  parent: Terminal.Gui.Rect
  langs:
  - csharp
  - vb
  name: Empty
  nameWithType: Rect.Empty
  fullName: Terminal.Gui.Rect.Empty
  type: Field
  source:
    remote:
      path: Terminal.Gui/Types/Rect.cs
      branch: docs
      repo: tig:tig/gui.cs.git
    id: Empty
    path: ../Terminal.Gui/Types/Rect.cs
    startLine: 46
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: "\nEmpty Shared Field\n"
  remarks: "\nAn uninitialized Rectangle Structure.\n"
  example: []
  syntax:
    content: public static readonly Rect Empty
    return:
      type: Terminal.Gui.Rect
    content.vb: Public Shared ReadOnly Empty As Rect
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Terminal.Gui.Rect.FromLTRB(System.Int32,System.Int32,System.Int32,System.Int32)
  commentId: M:Terminal.Gui.Rect.FromLTRB(System.Int32,System.Int32,System.Int32,System.Int32)
  id: FromLTRB(System.Int32,System.Int32,System.Int32,System.Int32)
  parent: Terminal.Gui.Rect
  langs:
  - csharp
  - vb
  name: FromLTRB(Int32, Int32, Int32, Int32)
  nameWithType: Rect.FromLTRB(Int32, Int32, Int32, Int32)
  fullName: Terminal.Gui.Rect.FromLTRB(System.Int32, System.Int32, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: Terminal.Gui/Types/Rect.cs
      branch: docs
      repo: tig:tig/gui.cs.git
    id: FromLTRB
    path: ../Terminal.Gui/Types/Rect.cs
    startLine: 57
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: "\nFromLTRB Shared Method\n"
  remarks: "\nProduces a Rectangle structure from left, top, right\nand bottom coordinates.\n"
  example: []
  syntax:
    content: public static Rect FromLTRB(int left, int top, int right, int bottom)
    parameters:
    - id: left
      type: System.Int32
    - id: top
      type: System.Int32
    - id: right
      type: System.Int32
    - id: bottom
      type: System.Int32
    return:
      type: Terminal.Gui.Rect
    content.vb: Public Shared Function FromLTRB(left As Integer, top As Integer, right As Integer, bottom As Integer) As Rect
  overload: Terminal.Gui.Rect.FromLTRB*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Terminal.Gui.Rect.Inflate(Terminal.Gui.Rect,System.Int32,System.Int32)
  commentId: M:Terminal.Gui.Rect.Inflate(Terminal.Gui.Rect,System.Int32,System.Int32)
  id: Inflate(Terminal.Gui.Rect,System.Int32,System.Int32)
  parent: Terminal.Gui.Rect
  langs:
  - csharp
  - vb
  name: Inflate(Rect, Int32, Int32)
  nameWithType: Rect.Inflate(Rect, Int32, Int32)
  fullName: Terminal.Gui.Rect.Inflate(Terminal.Gui.Rect, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: Terminal.Gui/Types/Rect.cs
      branch: docs
      repo: tig:tig/gui.cs.git
    id: Inflate
    path: ../Terminal.Gui/Types/Rect.cs
    startLine: 73
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: "\nInflate Shared Method\n"
  remarks: "\nProduces a new Rectangle by inflating an existing \nRectangle by the specified coordinate values.\n"
  example: []
  syntax:
    content: public static Rect Inflate(Rect rect, int x, int y)
    parameters:
    - id: rect
      type: Terminal.Gui.Rect
    - id: x
      type: System.Int32
    - id: y
      type: System.Int32
    return:
      type: Terminal.Gui.Rect
    content.vb: Public Shared Function Inflate(rect As Rect, x As Integer, y As Integer) As Rect
  overload: Terminal.Gui.Rect.Inflate*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Terminal.Gui.Rect.Inflate(System.Int32,System.Int32)
  commentId: M:Terminal.Gui.Rect.Inflate(System.Int32,System.Int32)
  id: Inflate(System.Int32,System.Int32)
  parent: Terminal.Gui.Rect
  langs:
  - csharp
  - vb
  name: Inflate(Int32, Int32)
  nameWithType: Rect.Inflate(Int32, Int32)
  fullName: Terminal.Gui.Rect.Inflate(System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: Terminal.Gui/Types/Rect.cs
      branch: docs
      repo: tig:tig/gui.cs.git
    id: Inflate
    path: ../Terminal.Gui/Types/Rect.cs
    startLine: 88
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: "\nInflate Method\n"
  remarks: "\nInflates the Rectangle by a specified width and height.\n"
  example: []
  syntax:
    content: public void Inflate(int width, int height)
    parameters:
    - id: width
      type: System.Int32
    - id: height
      type: System.Int32
    content.vb: Public Sub Inflate(width As Integer, height As Integer)
  overload: Terminal.Gui.Rect.Inflate*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Terminal.Gui.Rect.Inflate(Terminal.Gui.Size)
  commentId: M:Terminal.Gui.Rect.Inflate(Terminal.Gui.Size)
  id: Inflate(Terminal.Gui.Size)
  parent: Terminal.Gui.Rect
  langs:
  - csharp
  - vb
  name: Inflate(Size)
  nameWithType: Rect.Inflate(Size)
  fullName: Terminal.Gui.Rect.Inflate(Terminal.Gui.Size)
  type: Method
  source:
    remote:
      path: Terminal.Gui/Types/Rect.cs
      branch: docs
      repo: tig:tig/gui.cs.git
    id: Inflate
    path: ../Terminal.Gui/Types/Rect.cs
    startLine: 101
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: "\nInflate Method\n"
  remarks: "\nInflates the Rectangle by a specified Size.\n"
  example: []
  syntax:
    content: public void Inflate(Size size)
    parameters:
    - id: size
      type: Terminal.Gui.Size
    content.vb: Public Sub Inflate(size As Size)
  overload: Terminal.Gui.Rect.Inflate*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Terminal.Gui.Rect.Intersect(Terminal.Gui.Rect,Terminal.Gui.Rect)
  commentId: M:Terminal.Gui.Rect.Intersect(Terminal.Gui.Rect,Terminal.Gui.Rect)
  id: Intersect(Terminal.Gui.Rect,Terminal.Gui.Rect)
  parent: Terminal.Gui.Rect
  langs:
  - csharp
  - vb
  name: Intersect(Rect, Rect)
  nameWithType: Rect.Intersect(Rect, Rect)
  fullName: Terminal.Gui.Rect.Intersect(Terminal.Gui.Rect, Terminal.Gui.Rect)
  type: Method
  source:
    remote:
      path: Terminal.Gui/Types/Rect.cs
      branch: docs
      repo: tig:tig/gui.cs.git
    id: Intersect
    path: ../Terminal.Gui/Types/Rect.cs
    startLine: 118
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: "\nIntersect Shared Method\n"
  remarks: "\nProduces a new Rectangle by intersecting 2 existing \nRectangles. Returns null if there is no	intersection.\n"
  example: []
  syntax:
    content: public static Rect Intersect(Rect a, Rect b)
    parameters:
    - id: a
      type: Terminal.Gui.Rect
    - id: b
      type: Terminal.Gui.Rect
    return:
      type: Terminal.Gui.Rect
    content.vb: Public Shared Function Intersect(a As Rect, b As Rect) As Rect
  overload: Terminal.Gui.Rect.Intersect*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Terminal.Gui.Rect.Intersect(Terminal.Gui.Rect)
  commentId: M:Terminal.Gui.Rect.Intersect(Terminal.Gui.Rect)
  id: Intersect(Terminal.Gui.Rect)
  parent: Terminal.Gui.Rect
  langs:
  - csharp
  - vb
  name: Intersect(Rect)
  nameWithType: Rect.Intersect(Rect)
  fullName: Terminal.Gui.Rect.Intersect(Terminal.Gui.Rect)
  type: Method
  source:
    remote:
      path: Terminal.Gui/Types/Rect.cs
      branch: docs
      repo: tig:tig/gui.cs.git
    id: Intersect
    path: ../Terminal.Gui/Types/Rect.cs
    startLine: 141
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: "\nIntersect Method\n"
  remarks: "\nReplaces the Rectangle with the intersection of itself\nand another Rectangle.\n"
  example: []
  syntax:
    content: public void Intersect(Rect rect)
    parameters:
    - id: rect
      type: Terminal.Gui.Rect
    content.vb: Public Sub Intersect(rect As Rect)
  overload: Terminal.Gui.Rect.Intersect*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Terminal.Gui.Rect.Union(Terminal.Gui.Rect,Terminal.Gui.Rect)
  commentId: M:Terminal.Gui.Rect.Union(Terminal.Gui.Rect,Terminal.Gui.Rect)
  id: Union(Terminal.Gui.Rect,Terminal.Gui.Rect)
  parent: Terminal.Gui.Rect
  langs:
  - csharp
  - vb
  name: Union(Rect, Rect)
  nameWithType: Rect.Union(Rect, Rect)
  fullName: Terminal.Gui.Rect.Union(Terminal.Gui.Rect, Terminal.Gui.Rect)
  type: Method
  source:
    remote:
      path: Terminal.Gui/Types/Rect.cs
      branch: docs
      repo: tig:tig/gui.cs.git
    id: Union
    path: ../Terminal.Gui/Types/Rect.cs
    startLine: 155
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: "\nUnion Shared Method\n"
  remarks: "\nProduces a new Rectangle from the union of 2 existing \nRectangles.\n"
  example: []
  syntax:
    content: public static Rect Union(Rect a, Rect b)
    parameters:
    - id: a
      type: Terminal.Gui.Rect
    - id: b
      type: Terminal.Gui.Rect
    return:
      type: Terminal.Gui.Rect
    content.vb: Public Shared Function Union(a As Rect, b As Rect) As Rect
  overload: Terminal.Gui.Rect.Union*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Terminal.Gui.Rect.op_Equality(Terminal.Gui.Rect,Terminal.Gui.Rect)
  commentId: M:Terminal.Gui.Rect.op_Equality(Terminal.Gui.Rect,Terminal.Gui.Rect)
  id: op_Equality(Terminal.Gui.Rect,Terminal.Gui.Rect)
  parent: Terminal.Gui.Rect
  langs:
  - csharp
  - vb
  name: Equality(Rect, Rect)
  nameWithType: Rect.Equality(Rect, Rect)
  fullName: Terminal.Gui.Rect.Equality(Terminal.Gui.Rect, Terminal.Gui.Rect)
  type: Operator
  source:
    remote:
      path: Terminal.Gui/Types/Rect.cs
      branch: docs
      repo: tig:tig/gui.cs.git
    id: op_Equality
    path: ../Terminal.Gui/Types/Rect.cs
    startLine: 173
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: "\nEquality Operator\n"
  remarks: "\nCompares two Rectangle objects. The return value is\nbased on the equivalence of the Location and Size \nproperties of the two Rectangles.\n"
  example: []
  syntax:
    content: public static bool operator ==(Rect left, Rect right)
    parameters:
    - id: left
      type: Terminal.Gui.Rect
    - id: right
      type: Terminal.Gui.Rect
    return:
      type: System.Boolean
    content.vb: Public Shared Operator =(left As Rect, right As Rect) As Boolean
  overload: Terminal.Gui.Rect.op_Equality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Terminal.Gui.Rect.op_Inequality(Terminal.Gui.Rect,Terminal.Gui.Rect)
  commentId: M:Terminal.Gui.Rect.op_Inequality(Terminal.Gui.Rect,Terminal.Gui.Rect)
  id: op_Inequality(Terminal.Gui.Rect,Terminal.Gui.Rect)
  parent: Terminal.Gui.Rect
  langs:
  - csharp
  - vb
  name: Inequality(Rect, Rect)
  nameWithType: Rect.Inequality(Rect, Rect)
  fullName: Terminal.Gui.Rect.Inequality(Terminal.Gui.Rect, Terminal.Gui.Rect)
  type: Operator
  source:
    remote:
      path: Terminal.Gui/Types/Rect.cs
      branch: docs
      repo: tig:tig/gui.cs.git
    id: op_Inequality
    path: ../Terminal.Gui/Types/Rect.cs
    startLine: 189
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: "\nInequality Operator\n"
  remarks: "\nCompares two Rectangle objects. The return value is\nbased on the equivalence of the Location and Size \nproperties of the two Rectangles.\n"
  example: []
  syntax:
    content: public static bool operator !=(Rect left, Rect right)
    parameters:
    - id: left
      type: Terminal.Gui.Rect
    - id: right
      type: Terminal.Gui.Rect
    return:
      type: System.Boolean
    content.vb: Public Shared Operator <>(left As Rect, right As Rect) As Boolean
  overload: Terminal.Gui.Rect.op_Inequality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Terminal.Gui.Rect.#ctor(Terminal.Gui.Point,Terminal.Gui.Size)
  commentId: M:Terminal.Gui.Rect.#ctor(Terminal.Gui.Point,Terminal.Gui.Size)
  id: '#ctor(Terminal.Gui.Point,Terminal.Gui.Size)'
  parent: Terminal.Gui.Rect
  langs:
  - csharp
  - vb
  name: Rect(Point, Size)
  nameWithType: Rect.Rect(Point, Size)
  fullName: Terminal.Gui.Rect.Rect(Terminal.Gui.Point, Terminal.Gui.Size)
  type: Constructor
  source:
    remote:
      path: Terminal.Gui/Types/Rect.cs
      branch: docs
      repo: tig:tig/gui.cs.git
    id: .ctor
    path: ../Terminal.Gui/Types/Rect.cs
    startLine: 207
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: "\nRectangle Constructor\n"
  remarks: "\nCreates a Rectangle from Point and Size values.\n"
  example: []
  syntax:
    content: public Rect(Point location, Size size)
    parameters:
    - id: location
      type: Terminal.Gui.Point
    - id: size
      type: Terminal.Gui.Size
    content.vb: Public Sub New(location As Point, size As Size)
  overload: Terminal.Gui.Rect.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Terminal.Gui.Rect.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)
  commentId: M:Terminal.Gui.Rect.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)
  id: '#ctor(System.Int32,System.Int32,System.Int32,System.Int32)'
  parent: Terminal.Gui.Rect
  langs:
  - csharp
  - vb
  name: Rect(Int32, Int32, Int32, Int32)
  nameWithType: Rect.Rect(Int32, Int32, Int32, Int32)
  fullName: Terminal.Gui.Rect.Rect(System.Int32, System.Int32, System.Int32, System.Int32)
  type: Constructor
  source:
    remote:
      path: Terminal.Gui/Types/Rect.cs
      branch: docs
      repo: tig:tig/gui.cs.git
    id: .ctor
    path: ../Terminal.Gui/Types/Rect.cs
    startLine: 224
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: "\nRectangle Constructor\n"
  remarks: "\nCreates a Rectangle from a specified x,y location and\nwidth and height values.\n"
  example: []
  syntax:
    content: public Rect(int x, int y, int width, int height)
    parameters:
    - id: x
      type: System.Int32
    - id: y
      type: System.Int32
    - id: width
      type: System.Int32
    - id: height
      type: System.Int32
    content.vb: Public Sub New(x As Integer, y As Integer, width As Integer, height As Integer)
  overload: Terminal.Gui.Rect.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Terminal.Gui.Rect.Bottom
  commentId: P:Terminal.Gui.Rect.Bottom
  id: Bottom
  parent: Terminal.Gui.Rect
  langs:
  - csharp
  - vb
  name: Bottom
  nameWithType: Rect.Bottom
  fullName: Terminal.Gui.Rect.Bottom
  type: Property
  source:
    remote:
      path: Terminal.Gui/Types/Rect.cs
      branch: docs
      repo: tig:tig/gui.cs.git
    id: Bottom
    path: ../Terminal.Gui/Types/Rect.cs
    startLine: 242
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: "\nBottom Property\n"
  remarks: "\nThe Y coordinate of the bottom edge of the Rectangle.\nRead only.\n"
  example: []
  syntax:
    content: public int Bottom { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property Bottom As Integer
  overload: Terminal.Gui.Rect.Bottom*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Terminal.Gui.Rect.IsEmpty
  commentId: P:Terminal.Gui.Rect.IsEmpty
  id: IsEmpty
  parent: Terminal.Gui.Rect
  langs:
  - csharp
  - vb
  name: IsEmpty
  nameWithType: Rect.IsEmpty
  fullName: Terminal.Gui.Rect.IsEmpty
  type: Property
  source:
    remote:
      path: Terminal.Gui/Types/Rect.cs
      branch: docs
      repo: tig:tig/gui.cs.git
    id: IsEmpty
    path: ../Terminal.Gui/Types/Rect.cs
    startLine: 255
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: "\nIsEmpty Property\n"
  remarks: "\nIndicates if the width or height are zero. Read only.\n"
  example: []
  syntax:
    content: public bool IsEmpty { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsEmpty As Boolean
  overload: Terminal.Gui.Rect.IsEmpty*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Terminal.Gui.Rect.Left
  commentId: P:Terminal.Gui.Rect.Left
  id: Left
  parent: Terminal.Gui.Rect
  langs:
  - csharp
  - vb
  name: Left
  nameWithType: Rect.Left
  fullName: Terminal.Gui.Rect.Left
  type: Property
  source:
    remote:
      path: Terminal.Gui/Types/Rect.cs
      branch: docs
      repo: tig:tig/gui.cs.git
    id: Left
    path: ../Terminal.Gui/Types/Rect.cs
    startLine: 270
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: "\nLeft Property\n"
  remarks: "\nThe X coordinate of the left edge of the Rectangle.\nRead only.\n"
  example: []
  syntax:
    content: public int Left { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property Left As Integer
  overload: Terminal.Gui.Rect.Left*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Terminal.Gui.Rect.Location
  commentId: P:Terminal.Gui.Rect.Location
  id: Location
  parent: Terminal.Gui.Rect
  langs:
  - csharp
  - vb
  name: Location
  nameWithType: Rect.Location
  fullName: Terminal.Gui.Rect.Location
  type: Property
  source:
    remote:
      path: Terminal.Gui/Types/Rect.cs
      branch: docs
      repo: tig:tig/gui.cs.git
    id: Location
    path: ../Terminal.Gui/Types/Rect.cs
    startLine: 284
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: "\nLocation Property\n"
  remarks: "\nThe Location of the top-left corner of the Rectangle.\n"
  example: []
  syntax:
    content: public Point Location { get; set; }
    parameters: []
    return:
      type: Terminal.Gui.Point
    content.vb: Public Property Location As Point
  overload: Terminal.Gui.Rect.Location*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Terminal.Gui.Rect.Right
  commentId: P:Terminal.Gui.Rect.Right
  id: Right
  parent: Terminal.Gui.Rect
  langs:
  - csharp
  - vb
  name: Right
  nameWithType: Rect.Right
  fullName: Terminal.Gui.Rect.Right
  type: Property
  source:
    remote:
      path: Terminal.Gui/Types/Rect.cs
      branch: docs
      repo: tig:tig/gui.cs.git
    id: Right
    path: ../Terminal.Gui/Types/Rect.cs
    startLine: 303
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: "\nRight Property\n"
  remarks: "\nThe X coordinate of the right edge of the Rectangle.\nRead only.\n"
  example: []
  syntax:
    content: public int Right { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property Right As Integer
  overload: Terminal.Gui.Rect.Right*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Terminal.Gui.Rect.Size
  commentId: P:Terminal.Gui.Rect.Size
  id: Size
  parent: Terminal.Gui.Rect
  langs:
  - csharp
  - vb
  name: Size
  nameWithType: Rect.Size
  fullName: Terminal.Gui.Rect.Size
  type: Property
  source:
    remote:
      path: Terminal.Gui/Types/Rect.cs
      branch: docs
      repo: tig:tig/gui.cs.git
    id: Size
    path: ../Terminal.Gui/Types/Rect.cs
    startLine: 317
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: "\nSize Property\n"
  remarks: "\nThe Size of the Rectangle.\n"
  example: []
  syntax:
    content: public Size Size { get; set; }
    parameters: []
    return:
      type: Terminal.Gui.Size
    content.vb: Public Property Size As Size
  overload: Terminal.Gui.Rect.Size*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Terminal.Gui.Rect.Top
  commentId: P:Terminal.Gui.Rect.Top
  id: Top
  parent: Terminal.Gui.Rect
  langs:
  - csharp
  - vb
  name: Top
  nameWithType: Rect.Top
  fullName: Terminal.Gui.Rect.Top
  type: Property
  source:
    remote:
      path: Terminal.Gui/Types/Rect.cs
      branch: docs
      repo: tig:tig/gui.cs.git
    id: Top
    path: ../Terminal.Gui/Types/Rect.cs
    startLine: 336
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: "\nTop Property\n"
  remarks: "\nThe Y coordinate of the top edge of the Rectangle.\nRead only.\n"
  example: []
  syntax:
    content: public int Top { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property Top As Integer
  overload: Terminal.Gui.Rect.Top*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Terminal.Gui.Rect.Contains(System.Int32,System.Int32)
  commentId: M:Terminal.Gui.Rect.Contains(System.Int32,System.Int32)
  id: Contains(System.Int32,System.Int32)
  parent: Terminal.Gui.Rect
  langs:
  - csharp
  - vb
  name: Contains(Int32, Int32)
  nameWithType: Rect.Contains(Int32, Int32)
  fullName: Terminal.Gui.Rect.Contains(System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: Terminal.Gui/Types/Rect.cs
      branch: docs
      repo: tig:tig/gui.cs.git
    id: Contains
    path: ../Terminal.Gui/Types/Rect.cs
    startLine: 350
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: "\nContains Method\n"
  remarks: "\nChecks if an x,y coordinate lies within this Rectangle.\n"
  example: []
  syntax:
    content: public bool Contains(int x, int y)
    parameters:
    - id: x
      type: System.Int32
    - id: y
      type: System.Int32
    return:
      type: System.Boolean
    content.vb: Public Function Contains(x As Integer, y As Integer) As Boolean
  overload: Terminal.Gui.Rect.Contains*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Terminal.Gui.Rect.Contains(Terminal.Gui.Point)
  commentId: M:Terminal.Gui.Rect.Contains(Terminal.Gui.Point)
  id: Contains(Terminal.Gui.Point)
  parent: Terminal.Gui.Rect
  langs:
  - csharp
  - vb
  name: Contains(Point)
  nameWithType: Rect.Contains(Point)
  fullName: Terminal.Gui.Rect.Contains(Terminal.Gui.Point)
  type: Method
  source:
    remote:
      path: Terminal.Gui/Types/Rect.cs
      branch: docs
      repo: tig:tig/gui.cs.git
    id: Contains
    path: ../Terminal.Gui/Types/Rect.cs
    startLine: 364
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: "\nContains Method\n"
  remarks: "\nChecks if a Point lies within this Rectangle.\n"
  example: []
  syntax:
    content: public bool Contains(Point pt)
    parameters:
    - id: pt
      type: Terminal.Gui.Point
    return:
      type: System.Boolean
    content.vb: Public Function Contains(pt As Point) As Boolean
  overload: Terminal.Gui.Rect.Contains*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Terminal.Gui.Rect.Contains(Terminal.Gui.Rect)
  commentId: M:Terminal.Gui.Rect.Contains(Terminal.Gui.Rect)
  id: Contains(Terminal.Gui.Rect)
  parent: Terminal.Gui.Rect
  langs:
  - csharp
  - vb
  name: Contains(Rect)
  nameWithType: Rect.Contains(Rect)
  fullName: Terminal.Gui.Rect.Contains(Terminal.Gui.Rect)
  type: Method
  source:
    remote:
      path: Terminal.Gui/Types/Rect.cs
      branch: docs
      repo: tig:tig/gui.cs.git
    id: Contains
    path: ../Terminal.Gui/Types/Rect.cs
    startLine: 378
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: "\nContains Method\n"
  remarks: "\nChecks if a Rectangle lies entirely within this \nRectangle.\n"
  example: []
  syntax:
    content: public bool Contains(Rect rect)
    parameters:
    - id: rect
      type: Terminal.Gui.Rect
    return:
      type: System.Boolean
    content.vb: Public Function Contains(rect As Rect) As Boolean
  overload: Terminal.Gui.Rect.Contains*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Terminal.Gui.Rect.Equals(System.Object)
  commentId: M:Terminal.Gui.Rect.Equals(System.Object)
  id: Equals(System.Object)
  parent: Terminal.Gui.Rect
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: Rect.Equals(Object)
  fullName: Terminal.Gui.Rect.Equals(System.Object)
  type: Method
  source:
    remote:
      path: Terminal.Gui/Types/Rect.cs
      branch: docs
      repo: tig:tig/gui.cs.git
    id: Equals
    path: ../Terminal.Gui/Types/Rect.cs
    startLine: 391
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: "\nEquals Method\n"
  remarks: "\nChecks equivalence of this Rectangle and another object.\n"
  example: []
  syntax:
    content: public override bool Equals(object obj)
    parameters:
    - id: obj
      type: System.Object
    return:
      type: System.Boolean
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
  overridden: System.ValueType.Equals(System.Object)
  overload: Terminal.Gui.Rect.Equals*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Terminal.Gui.Rect.GetHashCode
  commentId: M:Terminal.Gui.Rect.GetHashCode
  id: GetHashCode
  parent: Terminal.Gui.Rect
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: Rect.GetHashCode()
  fullName: Terminal.Gui.Rect.GetHashCode()
  type: Method
  source:
    remote:
      path: Terminal.Gui/Types/Rect.cs
      branch: docs
      repo: tig:tig/gui.cs.git
    id: GetHashCode
    path: ../Terminal.Gui/Types/Rect.cs
    startLine: 407
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: "\nGetHashCode Method\n"
  remarks: "\nCalculates a hashing value.\n"
  example: []
  syntax:
    content: public override int GetHashCode()
    return:
      type: System.Int32
    content.vb: Public Overrides Function GetHashCode As Integer
  overridden: System.ValueType.GetHashCode
  overload: Terminal.Gui.Rect.GetHashCode*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Terminal.Gui.Rect.IntersectsWith(Terminal.Gui.Rect)
  commentId: M:Terminal.Gui.Rect.IntersectsWith(Terminal.Gui.Rect)
  id: IntersectsWith(Terminal.Gui.Rect)
  parent: Terminal.Gui.Rect
  langs:
  - csharp
  - vb
  name: IntersectsWith(Rect)
  nameWithType: Rect.IntersectsWith(Rect)
  fullName: Terminal.Gui.Rect.IntersectsWith(Terminal.Gui.Rect)
  type: Method
  source:
    remote:
      path: Terminal.Gui/Types/Rect.cs
      branch: docs
      repo: tig:tig/gui.cs.git
    id: IntersectsWith
    path: ../Terminal.Gui/Types/Rect.cs
    startLine: 420
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: "\nIntersectsWith Method\n"
  remarks: "\nChecks if a Rectangle intersects with this one.\n"
  example: []
  syntax:
    content: public bool IntersectsWith(Rect rect)
    parameters:
    - id: rect
      type: Terminal.Gui.Rect
    return:
      type: System.Boolean
    content.vb: Public Function IntersectsWith(rect As Rect) As Boolean
  overload: Terminal.Gui.Rect.IntersectsWith*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Terminal.Gui.Rect.Offset(System.Int32,System.Int32)
  commentId: M:Terminal.Gui.Rect.Offset(System.Int32,System.Int32)
  id: Offset(System.Int32,System.Int32)
  parent: Terminal.Gui.Rect
  langs:
  - csharp
  - vb
  name: Offset(Int32, Int32)
  nameWithType: Rect.Offset(Int32, Int32)
  fullName: Terminal.Gui.Rect.Offset(System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: Terminal.Gui/Types/Rect.cs
      branch: docs
      repo: tig:tig/gui.cs.git
    id: Offset
    path: ../Terminal.Gui/Types/Rect.cs
    startLine: 440
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: "\nOffset Method\n"
  remarks: "\nMoves the Rectangle a specified distance.\n"
  example: []
  syntax:
    content: public void Offset(int x, int y)
    parameters:
    - id: x
      type: System.Int32
    - id: y
      type: System.Int32
    content.vb: Public Sub Offset(x As Integer, y As Integer)
  overload: Terminal.Gui.Rect.Offset*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Terminal.Gui.Rect.Offset(Terminal.Gui.Point)
  commentId: M:Terminal.Gui.Rect.Offset(Terminal.Gui.Point)
  id: Offset(Terminal.Gui.Point)
  parent: Terminal.Gui.Rect
  langs:
  - csharp
  - vb
  name: Offset(Point)
  nameWithType: Rect.Offset(Point)
  fullName: Terminal.Gui.Rect.Offset(Terminal.Gui.Point)
  type: Method
  source:
    remote:
      path: Terminal.Gui/Types/Rect.cs
      branch: docs
      repo: tig:tig/gui.cs.git
    id: Offset
    path: ../Terminal.Gui/Types/Rect.cs
    startLine: 454
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: "\nOffset Method\n"
  remarks: "\nMoves the Rectangle a specified distance.\n"
  example: []
  syntax:
    content: public void Offset(Point pos)
    parameters:
    - id: pos
      type: Terminal.Gui.Point
    content.vb: Public Sub Offset(pos As Point)
  overload: Terminal.Gui.Rect.Offset*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Terminal.Gui.Rect.ToString
  commentId: M:Terminal.Gui.Rect.ToString
  id: ToString
  parent: Terminal.Gui.Rect
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: Rect.ToString()
  fullName: Terminal.Gui.Rect.ToString()
  type: Method
  source:
    remote:
      path: Terminal.Gui/Types/Rect.cs
      branch: docs
      repo: tig:tig/gui.cs.git
    id: ToString
    path: ../Terminal.Gui/Types/Rect.cs
    startLine: 468
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: "\nToString Method\n"
  remarks: "\nFormats the Rectangle as a string in (x,y,w,h) notation.\n"
  example: []
  syntax:
    content: public override string ToString()
    return:
      type: System.String
    content.vb: Public Overrides Function ToString As String
  overridden: System.ValueType.ToString
  overload: Terminal.Gui.Rect.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: Terminal.Gui
  commentId: N:Terminal.Gui
  name: Terminal.Gui
  nameWithType: Terminal.Gui
  fullName: Terminal.Gui
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Terminal.Gui.Rect
  commentId: T:Terminal.Gui.Rect
  parent: Terminal.Gui
  name: Rect
  nameWithType: Rect
  fullName: Terminal.Gui.Rect
- uid: Terminal.Gui.Rect.FromLTRB*
  commentId: Overload:Terminal.Gui.Rect.FromLTRB
  name: FromLTRB
  nameWithType: Rect.FromLTRB
  fullName: Terminal.Gui.Rect.FromLTRB
- uid: Terminal.Gui.Rect.Inflate*
  commentId: Overload:Terminal.Gui.Rect.Inflate
  name: Inflate
  nameWithType: Rect.Inflate
  fullName: Terminal.Gui.Rect.Inflate
- uid: Terminal.Gui.Size
  commentId: T:Terminal.Gui.Size
  parent: Terminal.Gui
  name: Size
  nameWithType: Size
  fullName: Terminal.Gui.Size
- uid: Terminal.Gui.Rect.Intersect*
  commentId: Overload:Terminal.Gui.Rect.Intersect
  name: Intersect
  nameWithType: Rect.Intersect
  fullName: Terminal.Gui.Rect.Intersect
- uid: Terminal.Gui.Rect.Union*
  commentId: Overload:Terminal.Gui.Rect.Union
  name: Union
  nameWithType: Rect.Union
  fullName: Terminal.Gui.Rect.Union
- uid: Terminal.Gui.Rect.op_Equality*
  commentId: Overload:Terminal.Gui.Rect.op_Equality
  name: Equality
  nameWithType: Rect.Equality
  fullName: Terminal.Gui.Rect.Equality
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Terminal.Gui.Rect.op_Inequality*
  commentId: Overload:Terminal.Gui.Rect.op_Inequality
  name: Inequality
  nameWithType: Rect.Inequality
  fullName: Terminal.Gui.Rect.Inequality
- uid: Terminal.Gui.Rect.#ctor*
  commentId: Overload:Terminal.Gui.Rect.#ctor
  name: Rect
  nameWithType: Rect.Rect
  fullName: Terminal.Gui.Rect.Rect
- uid: Terminal.Gui.Point
  commentId: T:Terminal.Gui.Point
  parent: Terminal.Gui
  name: Point
  nameWithType: Point
  fullName: Terminal.Gui.Point
- uid: Terminal.Gui.Rect.Bottom*
  commentId: Overload:Terminal.Gui.Rect.Bottom
  name: Bottom
  nameWithType: Rect.Bottom
  fullName: Terminal.Gui.Rect.Bottom
- uid: Terminal.Gui.Rect.IsEmpty*
  commentId: Overload:Terminal.Gui.Rect.IsEmpty
  name: IsEmpty
  nameWithType: Rect.IsEmpty
  fullName: Terminal.Gui.Rect.IsEmpty
- uid: Terminal.Gui.Rect.Left*
  commentId: Overload:Terminal.Gui.Rect.Left
  name: Left
  nameWithType: Rect.Left
  fullName: Terminal.Gui.Rect.Left
- uid: Terminal.Gui.Rect.Location*
  commentId: Overload:Terminal.Gui.Rect.Location
  name: Location
  nameWithType: Rect.Location
  fullName: Terminal.Gui.Rect.Location
- uid: Terminal.Gui.Rect.Right*
  commentId: Overload:Terminal.Gui.Rect.Right
  name: Right
  nameWithType: Rect.Right
  fullName: Terminal.Gui.Rect.Right
- uid: Terminal.Gui.Rect.Size*
  commentId: Overload:Terminal.Gui.Rect.Size
  name: Size
  nameWithType: Rect.Size
  fullName: Terminal.Gui.Rect.Size
- uid: Terminal.Gui.Rect.Top*
  commentId: Overload:Terminal.Gui.Rect.Top
  name: Top
  nameWithType: Rect.Top
  fullName: Terminal.Gui.Rect.Top
- uid: Terminal.Gui.Rect.Contains*
  commentId: Overload:Terminal.Gui.Rect.Contains
  name: Contains
  nameWithType: Rect.Contains
  fullName: Terminal.Gui.Rect.Contains
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(Object)
  nameWithType: ValueType.Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Terminal.Gui.Rect.Equals*
  commentId: Overload:Terminal.Gui.Rect.Equals
  name: Equals
  nameWithType: Rect.Equals
  fullName: Terminal.Gui.Rect.Equals
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Terminal.Gui.Rect.GetHashCode*
  commentId: Overload:Terminal.Gui.Rect.GetHashCode
  name: GetHashCode
  nameWithType: Rect.GetHashCode
  fullName: Terminal.Gui.Rect.GetHashCode
- uid: Terminal.Gui.Rect.IntersectsWith*
  commentId: Overload:Terminal.Gui.Rect.IntersectsWith
  name: IntersectsWith
  nameWithType: Rect.IntersectsWith
  fullName: Terminal.Gui.Rect.IntersectsWith
- uid: Terminal.Gui.Rect.Offset*
  commentId: Overload:Terminal.Gui.Rect.Offset
  name: Offset
  nameWithType: Rect.Offset
  fullName: Terminal.Gui.Rect.Offset
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Terminal.Gui.Rect.ToString*
  commentId: Overload:Terminal.Gui.Rect.ToString
  name: ToString
  nameWithType: Rect.ToString
  fullName: Terminal.Gui.Rect.ToString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
shouldSkipMarkup: true
