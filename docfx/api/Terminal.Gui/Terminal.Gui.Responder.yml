### YamlMime:ManagedReference
items:
- uid: Terminal.Gui.Responder
  commentId: T:Terminal.Gui.Responder
  id: Responder
  parent: Terminal.Gui
  children:
  - Terminal.Gui.Responder.CanFocus
  - Terminal.Gui.Responder.HasFocus
  - Terminal.Gui.Responder.MouseEvent(Terminal.Gui.MouseEvent)
  - Terminal.Gui.Responder.OnEnter
  - Terminal.Gui.Responder.OnKeyDown(Terminal.Gui.KeyEvent)
  - Terminal.Gui.Responder.OnKeyUp(Terminal.Gui.KeyEvent)
  - Terminal.Gui.Responder.OnLeave
  - Terminal.Gui.Responder.OnMouseEnter(Terminal.Gui.MouseEvent)
  - Terminal.Gui.Responder.OnMouseLeave(Terminal.Gui.MouseEvent)
  - Terminal.Gui.Responder.ProcessColdKey(Terminal.Gui.KeyEvent)
  - Terminal.Gui.Responder.ProcessHotKey(Terminal.Gui.KeyEvent)
  - Terminal.Gui.Responder.ProcessKey(Terminal.Gui.KeyEvent)
  langs:
  - csharp
  - vb
  name: Responder
  nameWithType: Responder
  fullName: Terminal.Gui.Responder
  type: Class
  source:
    remote:
      path: Terminal.Gui/Core/Responder.cs
      branch: refactor_core
      repo: tig:tig/gui.cs.git
    id: Responder
    path: ../Terminal.Gui/Core/Responder.cs
    startLine: 17
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: "\nResponder base class implemented by objects that want to participate on keyboard and mouse input.\n"
  example: []
  syntax:
    content: public class Responder
    content.vb: Public Class Responder
  inheritance:
  - System.Object
  derivedClasses:
  - Terminal.Gui.View
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Terminal.Gui.Responder.CanFocus
  commentId: P:Terminal.Gui.Responder.CanFocus
  id: CanFocus
  parent: Terminal.Gui.Responder
  langs:
  - csharp
  - vb
  name: CanFocus
  nameWithType: Responder.CanFocus
  fullName: Terminal.Gui.Responder.CanFocus
  type: Property
  source:
    remote:
      path: Terminal.Gui/Core/Responder.cs
      branch: refactor_core
      repo: tig:tig/gui.cs.git
    id: CanFocus
    path: ../Terminal.Gui/Core/Responder.cs
    startLine: 22
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: "\nGets or sets a value indicating whether this <xref href=\"Terminal.Gui.Responder\" data-throw-if-not-resolved=\"false\"></xref> can focus.\n"
  example: []
  syntax:
    content: public virtual bool CanFocus { get; set; }
    parameters: []
    return:
      type: System.Boolean
      description: <code>true</code> if can focus; otherwise, <code>false</code>.
    content.vb: Public Overridable Property CanFocus As Boolean
  overload: Terminal.Gui.Responder.CanFocus*
  modifiers.csharp:
  - public
  - virtual
  - get
  - set
  modifiers.vb:
  - Public
  - Overridable
- uid: Terminal.Gui.Responder.HasFocus
  commentId: P:Terminal.Gui.Responder.HasFocus
  id: HasFocus
  parent: Terminal.Gui.Responder
  langs:
  - csharp
  - vb
  name: HasFocus
  nameWithType: Responder.HasFocus
  fullName: Terminal.Gui.Responder.HasFocus
  type: Property
  source:
    remote:
      path: Terminal.Gui/Core/Responder.cs
      branch: refactor_core
      repo: tig:tig/gui.cs.git
    id: HasFocus
    path: ../Terminal.Gui/Core/Responder.cs
    startLine: 28
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: "\nGets or sets a value indicating whether this <xref href=\"Terminal.Gui.Responder\" data-throw-if-not-resolved=\"false\"></xref> has focus.\n"
  example: []
  syntax:
    content: public virtual bool HasFocus { get; }
    parameters: []
    return:
      type: System.Boolean
      description: <code>true</code> if has focus; otherwise, <code>false</code>.
    content.vb: Public Overridable ReadOnly Property HasFocus As Boolean
  overload: Terminal.Gui.Responder.HasFocus*
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Terminal.Gui.Responder.ProcessHotKey(Terminal.Gui.KeyEvent)
  commentId: M:Terminal.Gui.Responder.ProcessHotKey(Terminal.Gui.KeyEvent)
  id: ProcessHotKey(Terminal.Gui.KeyEvent)
  parent: Terminal.Gui.Responder
  langs:
  - csharp
  - vb
  name: ProcessHotKey(KeyEvent)
  nameWithType: Responder.ProcessHotKey(KeyEvent)
  fullName: Terminal.Gui.Responder.ProcessHotKey(Terminal.Gui.KeyEvent)
  type: Method
  source:
    remote:
      path: Terminal.Gui/Core/Responder.cs
      branch: refactor_core
      repo: tig:tig/gui.cs.git
    id: ProcessHotKey
    path: ../Terminal.Gui/Core/Responder.cs
    startLine: 53
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: "\nThis method can be overwritten by view that\nwant to provide accelerator functionality\n(Alt-key for example).\n"
  remarks: "\n<p>\n  Before keys are sent to the subview on the\n  current view, all the views are\n  processed and the key is passed to the widgets\n  to allow some of them to process the keystroke\n  as a hot-key. </p>\n<p>\n   For example, if you implement a button that\n   has a hotkey ok &quot;o&quot;, you would catch the\n   combination Alt-o here.  If the event is\n   caught, you must return true to stop the\n   keystroke from being dispatched to other\n   views.\n</p>\n"
  example: []
  syntax:
    content: public virtual bool ProcessHotKey(KeyEvent kb)
    parameters:
    - id: kb
      type: Terminal.Gui.KeyEvent
    return:
      type: System.Boolean
    content.vb: Public Overridable Function ProcessHotKey(kb As KeyEvent) As Boolean
  overload: Terminal.Gui.Responder.ProcessHotKey*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Terminal.Gui.Responder.ProcessKey(Terminal.Gui.KeyEvent)
  commentId: M:Terminal.Gui.Responder.ProcessKey(Terminal.Gui.KeyEvent)
  id: ProcessKey(Terminal.Gui.KeyEvent)
  parent: Terminal.Gui.Responder
  langs:
  - csharp
  - vb
  name: ProcessKey(KeyEvent)
  nameWithType: Responder.ProcessKey(KeyEvent)
  fullName: Terminal.Gui.Responder.ProcessKey(Terminal.Gui.KeyEvent)
  type: Method
  source:
    remote:
      path: Terminal.Gui/Core/Responder.cs
      branch: refactor_core
      repo: tig:tig/gui.cs.git
    id: ProcessKey
    path: ../Terminal.Gui/Core/Responder.cs
    startLine: 81
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: "\nIf the view is focused, gives the view a\nchance to process the keystroke.\n"
  remarks: "\n<p>\n  Views can override this method if they are\n  interested in processing the given keystroke.\n  If they consume the keystroke, they must\n  return true to stop the keystroke from being\n  processed by other widgets or consumed by the\n  widget engine.    If they return false, the\n  keystroke will be passed using the ProcessColdKey\n  method to other views to process.\n</p>\n<p>\n  The View implementation does nothing but return false,\n  so it is not necessary to call base.ProcessKey if you\n  derive directly from View, but you should if you derive\n  other View subclasses.\n</p>\n"
  example: []
  syntax:
    content: public virtual bool ProcessKey(KeyEvent keyEvent)
    parameters:
    - id: keyEvent
      type: Terminal.Gui.KeyEvent
      description: Contains the details about the key that produced the event.
    return:
      type: System.Boolean
    content.vb: Public Overridable Function ProcessKey(keyEvent As KeyEvent) As Boolean
  overload: Terminal.Gui.Responder.ProcessKey*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Terminal.Gui.Responder.ProcessColdKey(Terminal.Gui.KeyEvent)
  commentId: M:Terminal.Gui.Responder.ProcessColdKey(Terminal.Gui.KeyEvent)
  id: ProcessColdKey(Terminal.Gui.KeyEvent)
  parent: Terminal.Gui.Responder
  langs:
  - csharp
  - vb
  name: ProcessColdKey(KeyEvent)
  nameWithType: Responder.ProcessColdKey(KeyEvent)
  fullName: Terminal.Gui.Responder.ProcessColdKey(Terminal.Gui.KeyEvent)
  type: Method
  source:
    remote:
      path: Terminal.Gui/Core/Responder.cs
      branch: refactor_core
      repo: tig:tig/gui.cs.git
    id: ProcessColdKey
    path: ../Terminal.Gui/Core/Responder.cs
    startLine: 108
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: "\nThis method can be overwritten by views that\nwant to provide accelerator functionality\n(Alt-key for example), but without\ninterefering with normal ProcessKey behavior.\n"
  remarks: "\n<p>\n  After keys are sent to the subviews on the\n  current view, all the view are\n  processed and the key is passed to the views\n  to allow some of them to process the keystroke\n  as a cold-key. </p>\n<p>\n  This functionality is used, for example, by\n  default buttons to act on the enter key.\n  Processing this as a hot-key would prevent\n  non-default buttons from consuming the enter\n  keypress when they have the focus.\n</p>\n"
  example: []
  syntax:
    content: public virtual bool ProcessColdKey(KeyEvent keyEvent)
    parameters:
    - id: keyEvent
      type: Terminal.Gui.KeyEvent
      description: Contains the details about the key that produced the event.
    return:
      type: System.Boolean
    content.vb: Public Overridable Function ProcessColdKey(keyEvent As KeyEvent) As Boolean
  overload: Terminal.Gui.Responder.ProcessColdKey*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Terminal.Gui.Responder.OnKeyDown(Terminal.Gui.KeyEvent)
  commentId: M:Terminal.Gui.Responder.OnKeyDown(Terminal.Gui.KeyEvent)
  id: OnKeyDown(Terminal.Gui.KeyEvent)
  parent: Terminal.Gui.Responder
  langs:
  - csharp
  - vb
  name: OnKeyDown(KeyEvent)
  nameWithType: Responder.OnKeyDown(KeyEvent)
  fullName: Terminal.Gui.Responder.OnKeyDown(Terminal.Gui.KeyEvent)
  type: Method
  source:
    remote:
      path: Terminal.Gui/Core/Responder.cs
      branch: refactor_core
      repo: tig:tig/gui.cs.git
    id: OnKeyDown
    path: ../Terminal.Gui/Core/Responder.cs
    startLine: 118
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: "\nMethod invoked when a key is pressed.\n"
  example: []
  syntax:
    content: public virtual bool OnKeyDown(KeyEvent keyEvent)
    parameters:
    - id: keyEvent
      type: Terminal.Gui.KeyEvent
      description: Contains the details about the key that produced the event.
    return:
      type: System.Boolean
      description: true if the event was handled
    content.vb: Public Overridable Function OnKeyDown(keyEvent As KeyEvent) As Boolean
  overload: Terminal.Gui.Responder.OnKeyDown*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Terminal.Gui.Responder.OnKeyUp(Terminal.Gui.KeyEvent)
  commentId: M:Terminal.Gui.Responder.OnKeyUp(Terminal.Gui.KeyEvent)
  id: OnKeyUp(Terminal.Gui.KeyEvent)
  parent: Terminal.Gui.Responder
  langs:
  - csharp
  - vb
  name: OnKeyUp(KeyEvent)
  nameWithType: Responder.OnKeyUp(KeyEvent)
  fullName: Terminal.Gui.Responder.OnKeyUp(Terminal.Gui.KeyEvent)
  type: Method
  source:
    remote:
      path: Terminal.Gui/Core/Responder.cs
      branch: refactor_core
      repo: tig:tig/gui.cs.git
    id: OnKeyUp
    path: ../Terminal.Gui/Core/Responder.cs
    startLine: 128
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: "\nMethod invoked when a key is released.\n"
  example: []
  syntax:
    content: public virtual bool OnKeyUp(KeyEvent keyEvent)
    parameters:
    - id: keyEvent
      type: Terminal.Gui.KeyEvent
      description: Contains the details about the key that produced the event.
    return:
      type: System.Boolean
      description: true if the event was handled
    content.vb: Public Overridable Function OnKeyUp(keyEvent As KeyEvent) As Boolean
  overload: Terminal.Gui.Responder.OnKeyUp*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Terminal.Gui.Responder.MouseEvent(Terminal.Gui.MouseEvent)
  commentId: M:Terminal.Gui.Responder.MouseEvent(Terminal.Gui.MouseEvent)
  id: MouseEvent(Terminal.Gui.MouseEvent)
  parent: Terminal.Gui.Responder
  langs:
  - csharp
  - vb
  name: MouseEvent(MouseEvent)
  nameWithType: Responder.MouseEvent(MouseEvent)
  fullName: Terminal.Gui.Responder.MouseEvent(Terminal.Gui.MouseEvent)
  type: Method
  source:
    remote:
      path: Terminal.Gui/Core/Responder.cs
      branch: refactor_core
      repo: tig:tig/gui.cs.git
    id: MouseEvent
    path: ../Terminal.Gui/Core/Responder.cs
    startLine: 139
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: "\nMethod invoked when a mouse event is generated\n"
  example: []
  syntax:
    content: public virtual bool MouseEvent(MouseEvent mouseEvent)
    parameters:
    - id: mouseEvent
      type: Terminal.Gui.MouseEvent
      description: Contains the details about the mouse event.
    return:
      type: System.Boolean
      description: <code>true</code>, if the event was handled, <code>false</code> otherwise.
    content.vb: Public Overridable Function MouseEvent(mouseEvent As MouseEvent) As Boolean
  overload: Terminal.Gui.Responder.MouseEvent*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Terminal.Gui.Responder.OnMouseEnter(Terminal.Gui.MouseEvent)
  commentId: M:Terminal.Gui.Responder.OnMouseEnter(Terminal.Gui.MouseEvent)
  id: OnMouseEnter(Terminal.Gui.MouseEvent)
  parent: Terminal.Gui.Responder
  langs:
  - csharp
  - vb
  name: OnMouseEnter(MouseEvent)
  nameWithType: Responder.OnMouseEnter(MouseEvent)
  fullName: Terminal.Gui.Responder.OnMouseEnter(Terminal.Gui.MouseEvent)
  type: Method
  source:
    remote:
      path: Terminal.Gui/Core/Responder.cs
      branch: refactor_core
      repo: tig:tig/gui.cs.git
    id: OnMouseEnter
    path: ../Terminal.Gui/Core/Responder.cs
    startLine: 149
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: "\nMethod invoked when a mouse event is generated for the first time.\n"
  example: []
  syntax:
    content: public virtual bool OnMouseEnter(MouseEvent mouseEvent)
    parameters:
    - id: mouseEvent
      type: Terminal.Gui.MouseEvent
      description: ''
    return:
      type: System.Boolean
      description: <code>true</code>, if the event was handled, <code>false</code> otherwise.
    content.vb: Public Overridable Function OnMouseEnter(mouseEvent As MouseEvent) As Boolean
  overload: Terminal.Gui.Responder.OnMouseEnter*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Terminal.Gui.Responder.OnMouseLeave(Terminal.Gui.MouseEvent)
  commentId: M:Terminal.Gui.Responder.OnMouseLeave(Terminal.Gui.MouseEvent)
  id: OnMouseLeave(Terminal.Gui.MouseEvent)
  parent: Terminal.Gui.Responder
  langs:
  - csharp
  - vb
  name: OnMouseLeave(MouseEvent)
  nameWithType: Responder.OnMouseLeave(MouseEvent)
  fullName: Terminal.Gui.Responder.OnMouseLeave(Terminal.Gui.MouseEvent)
  type: Method
  source:
    remote:
      path: Terminal.Gui/Core/Responder.cs
      branch: refactor_core
      repo: tig:tig/gui.cs.git
    id: OnMouseLeave
    path: ../Terminal.Gui/Core/Responder.cs
    startLine: 159
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: "\nMethod invoked when a mouse event is generated for the last time.\n"
  example: []
  syntax:
    content: public virtual bool OnMouseLeave(MouseEvent mouseEvent)
    parameters:
    - id: mouseEvent
      type: Terminal.Gui.MouseEvent
      description: ''
    return:
      type: System.Boolean
      description: <code>true</code>, if the event was handled, <code>false</code> otherwise.
    content.vb: Public Overridable Function OnMouseLeave(mouseEvent As MouseEvent) As Boolean
  overload: Terminal.Gui.Responder.OnMouseLeave*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Terminal.Gui.Responder.OnEnter
  commentId: M:Terminal.Gui.Responder.OnEnter
  id: OnEnter
  parent: Terminal.Gui.Responder
  langs:
  - csharp
  - vb
  name: OnEnter()
  nameWithType: Responder.OnEnter()
  fullName: Terminal.Gui.Responder.OnEnter()
  type: Method
  source:
    remote:
      path: Terminal.Gui/Core/Responder.cs
      branch: refactor_core
      repo: tig:tig/gui.cs.git
    id: OnEnter
    path: ../Terminal.Gui/Core/Responder.cs
    startLine: 168
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: "\nMethod invoked when a view gets focus.\n"
  example: []
  syntax:
    content: public virtual bool OnEnter()
    return:
      type: System.Boolean
      description: <code>true</code>, if the event was handled, <code>false</code> otherwise.
    content.vb: Public Overridable Function OnEnter As Boolean
  overload: Terminal.Gui.Responder.OnEnter*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Terminal.Gui.Responder.OnLeave
  commentId: M:Terminal.Gui.Responder.OnLeave
  id: OnLeave
  parent: Terminal.Gui.Responder
  langs:
  - csharp
  - vb
  name: OnLeave()
  nameWithType: Responder.OnLeave()
  fullName: Terminal.Gui.Responder.OnLeave()
  type: Method
  source:
    remote:
      path: Terminal.Gui/Core/Responder.cs
      branch: refactor_core
      repo: tig:tig/gui.cs.git
    id: OnLeave
    path: ../Terminal.Gui/Core/Responder.cs
    startLine: 177
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: "\nMethod invoked when a view loses focus.\n"
  example: []
  syntax:
    content: public virtual bool OnLeave()
    return:
      type: System.Boolean
      description: <code>true</code>, if the event was handled, <code>false</code> otherwise.
    content.vb: Public Overridable Function OnLeave As Boolean
  overload: Terminal.Gui.Responder.OnLeave*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
references:
- uid: Terminal.Gui
  commentId: N:Terminal.Gui
  name: Terminal.Gui
  nameWithType: Terminal.Gui
  fullName: Terminal.Gui
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Terminal.Gui.Responder
  commentId: T:Terminal.Gui.Responder
  parent: Terminal.Gui
  name: Responder
  nameWithType: Responder
  fullName: Terminal.Gui.Responder
- uid: Terminal.Gui.Responder.CanFocus*
  commentId: Overload:Terminal.Gui.Responder.CanFocus
  name: CanFocus
  nameWithType: Responder.CanFocus
  fullName: Terminal.Gui.Responder.CanFocus
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Terminal.Gui.Responder.HasFocus*
  commentId: Overload:Terminal.Gui.Responder.HasFocus
  name: HasFocus
  nameWithType: Responder.HasFocus
  fullName: Terminal.Gui.Responder.HasFocus
- uid: Terminal.Gui.Responder.ProcessHotKey*
  commentId: Overload:Terminal.Gui.Responder.ProcessHotKey
  name: ProcessHotKey
  nameWithType: Responder.ProcessHotKey
  fullName: Terminal.Gui.Responder.ProcessHotKey
- uid: Terminal.Gui.KeyEvent
  commentId: T:Terminal.Gui.KeyEvent
  parent: Terminal.Gui
  name: KeyEvent
  nameWithType: KeyEvent
  fullName: Terminal.Gui.KeyEvent
- uid: Terminal.Gui.Responder.ProcessKey*
  commentId: Overload:Terminal.Gui.Responder.ProcessKey
  name: ProcessKey
  nameWithType: Responder.ProcessKey
  fullName: Terminal.Gui.Responder.ProcessKey
- uid: Terminal.Gui.Responder.ProcessColdKey*
  commentId: Overload:Terminal.Gui.Responder.ProcessColdKey
  name: ProcessColdKey
  nameWithType: Responder.ProcessColdKey
  fullName: Terminal.Gui.Responder.ProcessColdKey
- uid: Terminal.Gui.Responder.OnKeyDown*
  commentId: Overload:Terminal.Gui.Responder.OnKeyDown
  name: OnKeyDown
  nameWithType: Responder.OnKeyDown
  fullName: Terminal.Gui.Responder.OnKeyDown
- uid: Terminal.Gui.Responder.OnKeyUp*
  commentId: Overload:Terminal.Gui.Responder.OnKeyUp
  name: OnKeyUp
  nameWithType: Responder.OnKeyUp
  fullName: Terminal.Gui.Responder.OnKeyUp
- uid: Terminal.Gui.Responder.MouseEvent*
  commentId: Overload:Terminal.Gui.Responder.MouseEvent
  name: MouseEvent
  nameWithType: Responder.MouseEvent
  fullName: Terminal.Gui.Responder.MouseEvent
- uid: Terminal.Gui.MouseEvent
  commentId: T:Terminal.Gui.MouseEvent
  parent: Terminal.Gui
  name: MouseEvent
  nameWithType: MouseEvent
  fullName: Terminal.Gui.MouseEvent
- uid: Terminal.Gui.Responder.OnMouseEnter*
  commentId: Overload:Terminal.Gui.Responder.OnMouseEnter
  name: OnMouseEnter
  nameWithType: Responder.OnMouseEnter
  fullName: Terminal.Gui.Responder.OnMouseEnter
- uid: Terminal.Gui.Responder.OnMouseLeave*
  commentId: Overload:Terminal.Gui.Responder.OnMouseLeave
  name: OnMouseLeave
  nameWithType: Responder.OnMouseLeave
  fullName: Terminal.Gui.Responder.OnMouseLeave
- uid: Terminal.Gui.Responder.OnEnter*
  commentId: Overload:Terminal.Gui.Responder.OnEnter
  name: OnEnter
  nameWithType: Responder.OnEnter
  fullName: Terminal.Gui.Responder.OnEnter
- uid: Terminal.Gui.Responder.OnLeave*
  commentId: Overload:Terminal.Gui.Responder.OnLeave
  name: OnLeave
  nameWithType: Responder.OnLeave
  fullName: Terminal.Gui.Responder.OnLeave
shouldSkipMarkup: true
