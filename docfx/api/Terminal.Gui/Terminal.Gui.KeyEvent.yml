### YamlMime:ManagedReference
items:
- uid: Terminal.Gui.KeyEvent
  commentId: T:Terminal.Gui.KeyEvent
  id: KeyEvent
  parent: Terminal.Gui
  children:
  - Terminal.Gui.KeyEvent.#ctor
  - Terminal.Gui.KeyEvent.#ctor(Terminal.Gui.Key)
  - Terminal.Gui.KeyEvent.IsAlt
  - Terminal.Gui.KeyEvent.IsCtrl
  - Terminal.Gui.KeyEvent.IsShift
  - Terminal.Gui.KeyEvent.Key
  - Terminal.Gui.KeyEvent.KeyValue
  - Terminal.Gui.KeyEvent.ToString
  langs:
  - csharp
  - vb
  name: KeyEvent
  nameWithType: KeyEvent
  fullName: Terminal.Gui.KeyEvent
  type: Class
  source:
    remote:
      path: Terminal.Gui/Core/Event.cs
      branch: refactor_core
      repo: tig:tig/gui.cs.git
    id: KeyEvent
    path: ../Terminal.Gui/Core/Event.cs
    startLine: 298
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: "\nDescribes a keyboard event.\n"
  example: []
  syntax:
    content: public class KeyEvent
    content.vb: Public Class KeyEvent
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Terminal.Gui.KeyEvent.Key
  commentId: F:Terminal.Gui.KeyEvent.Key
  id: Key
  parent: Terminal.Gui.KeyEvent
  langs:
  - csharp
  - vb
  name: Key
  nameWithType: KeyEvent.Key
  fullName: Terminal.Gui.KeyEvent.Key
  type: Field
  source:
    remote:
      path: Terminal.Gui/Core/Event.cs
      branch: refactor_core
      repo: tig:tig/gui.cs.git
    id: Key
    path: ../Terminal.Gui/Core/Event.cs
    startLine: 302
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: "\nSymb olid definition for the key.\n"
  example: []
  syntax:
    content: public Key Key
    return:
      type: Terminal.Gui.Key
    content.vb: Public Key As Key
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Terminal.Gui.KeyEvent.KeyValue
  commentId: P:Terminal.Gui.KeyEvent.KeyValue
  id: KeyValue
  parent: Terminal.Gui.KeyEvent
  langs:
  - csharp
  - vb
  name: KeyValue
  nameWithType: KeyEvent.KeyValue
  fullName: Terminal.Gui.KeyEvent.KeyValue
  type: Property
  source:
    remote:
      path: Terminal.Gui/Core/Event.cs
      branch: refactor_core
      repo: tig:tig/gui.cs.git
    id: KeyValue
    path: ../Terminal.Gui/Core/Event.cs
    startLine: 309
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: "\nThe key value cast to an integer, you will typical use this for\nextracting the Unicode rune value out of a key, when none of the\nsymbolic options are in use.\n"
  example: []
  syntax:
    content: public int KeyValue { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property KeyValue As Integer
  overload: Terminal.Gui.KeyEvent.KeyValue*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Terminal.Gui.KeyEvent.IsShift
  commentId: P:Terminal.Gui.KeyEvent.IsShift
  id: IsShift
  parent: Terminal.Gui.KeyEvent
  langs:
  - csharp
  - vb
  name: IsShift
  nameWithType: KeyEvent.IsShift
  fullName: Terminal.Gui.KeyEvent.IsShift
  type: Property
  source:
    remote:
      path: Terminal.Gui/Core/Event.cs
      branch: refactor_core
      repo: tig:tig/gui.cs.git
    id: IsShift
    path: ../Terminal.Gui/Core/Event.cs
    startLine: 315
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: "\nGets a value indicating whether the Shift key was pressed.\n"
  example: []
  syntax:
    content: public bool IsShift { get; }
    parameters: []
    return:
      type: System.Boolean
      description: <code>true</code> if is shift; otherwise, <code>false</code>.
    content.vb: Public ReadOnly Property IsShift As Boolean
  overload: Terminal.Gui.KeyEvent.IsShift*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Terminal.Gui.KeyEvent.IsAlt
  commentId: P:Terminal.Gui.KeyEvent.IsAlt
  id: IsAlt
  parent: Terminal.Gui.KeyEvent
  langs:
  - csharp
  - vb
  name: IsAlt
  nameWithType: KeyEvent.IsAlt
  fullName: Terminal.Gui.KeyEvent.IsAlt
  type: Property
  source:
    remote:
      path: Terminal.Gui/Core/Event.cs
      branch: refactor_core
      repo: tig:tig/gui.cs.git
    id: IsAlt
    path: ../Terminal.Gui/Core/Event.cs
    startLine: 321
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: "\nGets a value indicating whether the Alt key was pressed (real or synthesized)\n"
  example: []
  syntax:
    content: public bool IsAlt { get; }
    parameters: []
    return:
      type: System.Boolean
      description: <code>true</code> if is alternate; otherwise, <code>false</code>.
    content.vb: Public ReadOnly Property IsAlt As Boolean
  overload: Terminal.Gui.KeyEvent.IsAlt*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Terminal.Gui.KeyEvent.IsCtrl
  commentId: P:Terminal.Gui.KeyEvent.IsCtrl
  id: IsCtrl
  parent: Terminal.Gui.KeyEvent
  langs:
  - csharp
  - vb
  name: IsCtrl
  nameWithType: KeyEvent.IsCtrl
  fullName: Terminal.Gui.KeyEvent.IsCtrl
  type: Property
  source:
    remote:
      path: Terminal.Gui/Core/Event.cs
      branch: refactor_core
      repo: tig:tig/gui.cs.git
    id: IsCtrl
    path: ../Terminal.Gui/Core/Event.cs
    startLine: 328
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: "\nDetermines whether the value is a control key (and NOT just the ctrl key)\n"
  example: []
  syntax:
    content: public bool IsCtrl { get; }
    parameters: []
    return:
      type: System.Boolean
      description: <code>true</code> if is ctrl; otherwise, <code>false</code>.
    content.vb: Public ReadOnly Property IsCtrl As Boolean
  overload: Terminal.Gui.KeyEvent.IsCtrl*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Terminal.Gui.KeyEvent.#ctor
  commentId: M:Terminal.Gui.KeyEvent.#ctor
  id: '#ctor'
  parent: Terminal.Gui.KeyEvent
  langs:
  - csharp
  - vb
  name: KeyEvent()
  nameWithType: KeyEvent.KeyEvent()
  fullName: Terminal.Gui.KeyEvent.KeyEvent()
  type: Constructor
  source:
    remote:
      path: Terminal.Gui/Core/Event.cs
      branch: refactor_core
      repo: tig:tig/gui.cs.git
    id: .ctor
    path: ../Terminal.Gui/Core/Event.cs
    startLine: 333
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: "\nConstructs a new <xref href=\"Terminal.Gui.KeyEvent\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public KeyEvent()
    content.vb: Public Sub New
  overload: Terminal.Gui.KeyEvent.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Terminal.Gui.KeyEvent.#ctor(Terminal.Gui.Key)
  commentId: M:Terminal.Gui.KeyEvent.#ctor(Terminal.Gui.Key)
  id: '#ctor(Terminal.Gui.Key)'
  parent: Terminal.Gui.KeyEvent
  langs:
  - csharp
  - vb
  name: KeyEvent(Key)
  nameWithType: KeyEvent.KeyEvent(Key)
  fullName: Terminal.Gui.KeyEvent.KeyEvent(Terminal.Gui.Key)
  type: Constructor
  source:
    remote:
      path: Terminal.Gui/Core/Event.cs
      branch: refactor_core
      repo: tig:tig/gui.cs.git
    id: .ctor
    path: ../Terminal.Gui/Core/Event.cs
    startLine: 341
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: "\nConstructs a new <xref href=\"Terminal.Gui.KeyEvent\" data-throw-if-not-resolved=\"false\"></xref> from the provided Key value - can be a rune cast into a Key value\n"
  example: []
  syntax:
    content: public KeyEvent(Key k)
    parameters:
    - id: k
      type: Terminal.Gui.Key
    content.vb: Public Sub New(k As Key)
  overload: Terminal.Gui.KeyEvent.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Terminal.Gui.KeyEvent.ToString
  commentId: M:Terminal.Gui.KeyEvent.ToString
  id: ToString
  parent: Terminal.Gui.KeyEvent
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: KeyEvent.ToString()
  fullName: Terminal.Gui.KeyEvent.ToString()
  type: Method
  source:
    remote:
      path: Terminal.Gui/Core/Event.cs
      branch: refactor_core
      repo: tig:tig/gui.cs.git
    id: ToString
    path: ../Terminal.Gui/Core/Event.cs
    startLine: 347
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  example: []
  syntax:
    content: public override string ToString()
    return:
      type: System.String
    content.vb: Public Overrides Function ToString As String
  overridden: System.Object.ToString
  overload: Terminal.Gui.KeyEvent.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: Terminal.Gui
  commentId: N:Terminal.Gui
  name: Terminal.Gui
  nameWithType: Terminal.Gui
  fullName: Terminal.Gui
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Terminal.Gui.Key
  commentId: T:Terminal.Gui.Key
  parent: Terminal.Gui
  name: Key
  nameWithType: Key
  fullName: Terminal.Gui.Key
- uid: Terminal.Gui.KeyEvent.KeyValue*
  commentId: Overload:Terminal.Gui.KeyEvent.KeyValue
  name: KeyValue
  nameWithType: KeyEvent.KeyValue
  fullName: Terminal.Gui.KeyEvent.KeyValue
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Terminal.Gui.KeyEvent.IsShift*
  commentId: Overload:Terminal.Gui.KeyEvent.IsShift
  name: IsShift
  nameWithType: KeyEvent.IsShift
  fullName: Terminal.Gui.KeyEvent.IsShift
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Terminal.Gui.KeyEvent.IsAlt*
  commentId: Overload:Terminal.Gui.KeyEvent.IsAlt
  name: IsAlt
  nameWithType: KeyEvent.IsAlt
  fullName: Terminal.Gui.KeyEvent.IsAlt
- uid: Terminal.Gui.KeyEvent.IsCtrl*
  commentId: Overload:Terminal.Gui.KeyEvent.IsCtrl
  name: IsCtrl
  nameWithType: KeyEvent.IsCtrl
  fullName: Terminal.Gui.KeyEvent.IsCtrl
- uid: Terminal.Gui.KeyEvent
  commentId: T:Terminal.Gui.KeyEvent
  parent: Terminal.Gui
  name: KeyEvent
  nameWithType: KeyEvent
  fullName: Terminal.Gui.KeyEvent
- uid: Terminal.Gui.KeyEvent.#ctor*
  commentId: Overload:Terminal.Gui.KeyEvent.#ctor
  name: KeyEvent
  nameWithType: KeyEvent.KeyEvent
  fullName: Terminal.Gui.KeyEvent.KeyEvent
- uid: Terminal.Gui.KeyEvent.ToString
  commentId: M:Terminal.Gui.KeyEvent.ToString
  isExternal: true
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Terminal.Gui.KeyEvent.ToString*
  commentId: Overload:Terminal.Gui.KeyEvent.ToString
  name: ToString
  nameWithType: KeyEvent.ToString
  fullName: Terminal.Gui.KeyEvent.ToString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
shouldSkipMarkup: true
