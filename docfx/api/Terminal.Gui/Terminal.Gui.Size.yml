### YamlMime:ManagedReference
items:
- uid: Terminal.Gui.Size
  commentId: T:Terminal.Gui.Size
  id: Size
  parent: Terminal.Gui
  children:
  - Terminal.Gui.Size.#ctor(System.Int32,System.Int32)
  - Terminal.Gui.Size.#ctor(Terminal.Gui.Point)
  - Terminal.Gui.Size.Add(Terminal.Gui.Size,Terminal.Gui.Size)
  - Terminal.Gui.Size.Empty
  - Terminal.Gui.Size.Equals(System.Object)
  - Terminal.Gui.Size.GetHashCode
  - Terminal.Gui.Size.Height
  - Terminal.Gui.Size.IsEmpty
  - Terminal.Gui.Size.op_Addition(Terminal.Gui.Size,Terminal.Gui.Size)
  - Terminal.Gui.Size.op_Equality(Terminal.Gui.Size,Terminal.Gui.Size)
  - Terminal.Gui.Size.op_Explicit(Terminal.Gui.Size)~Terminal.Gui.Point
  - Terminal.Gui.Size.op_Inequality(Terminal.Gui.Size,Terminal.Gui.Size)
  - Terminal.Gui.Size.op_Subtraction(Terminal.Gui.Size,Terminal.Gui.Size)
  - Terminal.Gui.Size.Subtract(Terminal.Gui.Size,Terminal.Gui.Size)
  - Terminal.Gui.Size.ToString
  - Terminal.Gui.Size.Width
  langs:
  - csharp
  - vb
  name: Size
  nameWithType: Size
  fullName: Terminal.Gui.Size
  type: Struct
  source:
    remote:
      path: Terminal.Gui/Types/Size.cs
      branch: reorg
      repo: tig:tig/gui.cs.git
    id: Size
    path: ../Terminal.Gui/Types/Size.cs
    startLine: 16
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: "\nStores an ordered pair of integers, which specify a Height and Width.\n"
  example: []
  syntax:
    content: public struct Size
    content.vb: Public Structure Size
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.ReferenceEquals(System.Object,System.Object)
  modifiers.csharp:
  - public
  - struct
  modifiers.vb:
  - Public
  - Structure
- uid: Terminal.Gui.Size.Empty
  commentId: F:Terminal.Gui.Size.Empty
  id: Empty
  parent: Terminal.Gui.Size
  langs:
  - csharp
  - vb
  name: Empty
  nameWithType: Size.Empty
  fullName: Terminal.Gui.Size.Empty
  type: Field
  source:
    remote:
      path: Terminal.Gui/Types/Size.cs
      branch: reorg
      repo: tig:tig/gui.cs.git
    id: Empty
    path: ../Terminal.Gui/Types/Size.cs
    startLine: 23
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: "\nGets a Size structure that has a Height and Width value of 0.\n"
  example: []
  syntax:
    content: public static readonly Size Empty
    return:
      type: Terminal.Gui.Size
    content.vb: Public Shared ReadOnly Empty As Size
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Terminal.Gui.Size.op_Addition(Terminal.Gui.Size,Terminal.Gui.Size)
  commentId: M:Terminal.Gui.Size.op_Addition(Terminal.Gui.Size,Terminal.Gui.Size)
  id: op_Addition(Terminal.Gui.Size,Terminal.Gui.Size)
  parent: Terminal.Gui.Size
  langs:
  - csharp
  - vb
  name: Addition(Size, Size)
  nameWithType: Size.Addition(Size, Size)
  fullName: Terminal.Gui.Size.Addition(Terminal.Gui.Size, Terminal.Gui.Size)
  type: Operator
  source:
    remote:
      path: Terminal.Gui/Types/Size.cs
      branch: reorg
      repo: tig:tig/gui.cs.git
    id: op_Addition
    path: ../Terminal.Gui/Types/Size.cs
    startLine: 33
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: "\nAddition Operator\n"
  remarks: "\nAddition of two Size structures.\n"
  example: []
  syntax:
    content: public static Size operator +(Size sz1, Size sz2)
    parameters:
    - id: sz1
      type: Terminal.Gui.Size
    - id: sz2
      type: Terminal.Gui.Size
    return:
      type: Terminal.Gui.Size
    content.vb: Public Shared Operator +(sz1 As Size, sz2 As Size) As Size
  overload: Terminal.Gui.Size.op_Addition*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Terminal.Gui.Size.op_Equality(Terminal.Gui.Size,Terminal.Gui.Size)
  commentId: M:Terminal.Gui.Size.op_Equality(Terminal.Gui.Size,Terminal.Gui.Size)
  id: op_Equality(Terminal.Gui.Size,Terminal.Gui.Size)
  parent: Terminal.Gui.Size
  langs:
  - csharp
  - vb
  name: Equality(Size, Size)
  nameWithType: Size.Equality(Size, Size)
  fullName: Terminal.Gui.Size.Equality(Terminal.Gui.Size, Terminal.Gui.Size)
  type: Operator
  source:
    remote:
      path: Terminal.Gui/Types/Size.cs
      branch: reorg
      repo: tig:tig/gui.cs.git
    id: op_Equality
    path: ../Terminal.Gui/Types/Size.cs
    startLine: 49
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: "\nEquality Operator\n"
  remarks: "\nCompares two Size objects. The return value is\nbased on the equivalence of the Width and Height \nproperties of the two Sizes.\n"
  example: []
  syntax:
    content: public static bool operator ==(Size sz1, Size sz2)
    parameters:
    - id: sz1
      type: Terminal.Gui.Size
    - id: sz2
      type: Terminal.Gui.Size
    return:
      type: System.Boolean
    content.vb: Public Shared Operator =(sz1 As Size, sz2 As Size) As Boolean
  overload: Terminal.Gui.Size.op_Equality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Terminal.Gui.Size.op_Inequality(Terminal.Gui.Size,Terminal.Gui.Size)
  commentId: M:Terminal.Gui.Size.op_Inequality(Terminal.Gui.Size,Terminal.Gui.Size)
  id: op_Inequality(Terminal.Gui.Size,Terminal.Gui.Size)
  parent: Terminal.Gui.Size
  langs:
  - csharp
  - vb
  name: Inequality(Size, Size)
  nameWithType: Size.Inequality(Size, Size)
  fullName: Terminal.Gui.Size.Inequality(Terminal.Gui.Size, Terminal.Gui.Size)
  type: Operator
  source:
    remote:
      path: Terminal.Gui/Types/Size.cs
      branch: reorg
      repo: tig:tig/gui.cs.git
    id: op_Inequality
    path: ../Terminal.Gui/Types/Size.cs
    startLine: 65
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: "\nInequality Operator\n"
  remarks: "\nCompares two Size objects. The return value is\nbased on the equivalence of the Width and Height \nproperties of the two Sizes.\n"
  example: []
  syntax:
    content: public static bool operator !=(Size sz1, Size sz2)
    parameters:
    - id: sz1
      type: Terminal.Gui.Size
    - id: sz2
      type: Terminal.Gui.Size
    return:
      type: System.Boolean
    content.vb: Public Shared Operator <>(sz1 As Size, sz2 As Size) As Boolean
  overload: Terminal.Gui.Size.op_Inequality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Terminal.Gui.Size.op_Subtraction(Terminal.Gui.Size,Terminal.Gui.Size)
  commentId: M:Terminal.Gui.Size.op_Subtraction(Terminal.Gui.Size,Terminal.Gui.Size)
  id: op_Subtraction(Terminal.Gui.Size,Terminal.Gui.Size)
  parent: Terminal.Gui.Size
  langs:
  - csharp
  - vb
  name: Subtraction(Size, Size)
  nameWithType: Size.Subtraction(Size, Size)
  fullName: Terminal.Gui.Size.Subtraction(Terminal.Gui.Size, Terminal.Gui.Size)
  type: Operator
  source:
    remote:
      path: Terminal.Gui/Types/Size.cs
      branch: reorg
      repo: tig:tig/gui.cs.git
    id: op_Subtraction
    path: ../Terminal.Gui/Types/Size.cs
    startLine: 79
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: "\nSubtraction Operator\n"
  remarks: "\nSubtracts two Size structures.\n"
  example: []
  syntax:
    content: public static Size operator -(Size sz1, Size sz2)
    parameters:
    - id: sz1
      type: Terminal.Gui.Size
    - id: sz2
      type: Terminal.Gui.Size
    return:
      type: Terminal.Gui.Size
    content.vb: Public Shared Operator -(sz1 As Size, sz2 As Size) As Size
  overload: Terminal.Gui.Size.op_Subtraction*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Terminal.Gui.Size.op_Explicit(Terminal.Gui.Size)~Terminal.Gui.Point
  commentId: M:Terminal.Gui.Size.op_Explicit(Terminal.Gui.Size)~Terminal.Gui.Point
  id: op_Explicit(Terminal.Gui.Size)~Terminal.Gui.Point
  parent: Terminal.Gui.Size
  langs:
  - csharp
  - vb
  name: Explicit(Size to Point)
  nameWithType: Size.Explicit(Size to Point)
  fullName: Terminal.Gui.Size.Explicit(Terminal.Gui.Size to Terminal.Gui.Point)
  type: Operator
  source:
    remote:
      path: Terminal.Gui/Types/Size.cs
      branch: reorg
      repo: tig:tig/gui.cs.git
    id: op_Explicit
    path: ../Terminal.Gui/Types/Size.cs
    startLine: 94
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: "\nSize to Point Conversion\n"
  remarks: "\nReturns a Point based on the dimensions of a given \nSize. Requires explicit cast.\n"
  example: []
  syntax:
    content: public static explicit operator Point(Size size)
    parameters:
    - id: size
      type: Terminal.Gui.Size
    return:
      type: Terminal.Gui.Point
    content.vb: Public Shared Narrowing Operator CType(size As Size) As Point
  overload: Terminal.Gui.Size.op_Explicit*
  nameWithType.vb: Size.Narrowing(Size to Point)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Terminal.Gui.Size.Narrowing(Terminal.Gui.Size to Terminal.Gui.Point)
  name.vb: Narrowing(Size to Point)
- uid: Terminal.Gui.Size.#ctor(Terminal.Gui.Point)
  commentId: M:Terminal.Gui.Size.#ctor(Terminal.Gui.Point)
  id: '#ctor(Terminal.Gui.Point)'
  parent: Terminal.Gui.Size
  langs:
  - csharp
  - vb
  name: Size(Point)
  nameWithType: Size.Size(Point)
  fullName: Terminal.Gui.Size.Size(Terminal.Gui.Point)
  type: Constructor
  source:
    remote:
      path: Terminal.Gui/Types/Size.cs
      branch: reorg
      repo: tig:tig/gui.cs.git
    id: .ctor
    path: ../Terminal.Gui/Types/Size.cs
    startLine: 107
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: "\nSize Constructor\n"
  remarks: "\nCreates a Size from a Point value.\n"
  example: []
  syntax:
    content: public Size(Point pt)
    parameters:
    - id: pt
      type: Terminal.Gui.Point
    content.vb: Public Sub New(pt As Point)
  overload: Terminal.Gui.Size.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Terminal.Gui.Size.#ctor(System.Int32,System.Int32)
  commentId: M:Terminal.Gui.Size.#ctor(System.Int32,System.Int32)
  id: '#ctor(System.Int32,System.Int32)'
  parent: Terminal.Gui.Size
  langs:
  - csharp
  - vb
  name: Size(Int32, Int32)
  nameWithType: Size.Size(Int32, Int32)
  fullName: Terminal.Gui.Size.Size(System.Int32, System.Int32)
  type: Constructor
  source:
    remote:
      path: Terminal.Gui/Types/Size.cs
      branch: reorg
      repo: tig:tig/gui.cs.git
    id: .ctor
    path: ../Terminal.Gui/Types/Size.cs
    startLine: 121
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: "\nSize Constructor\n"
  remarks: "\nCreates a Size from specified dimensions.\n"
  example: []
  syntax:
    content: public Size(int width, int height)
    parameters:
    - id: width
      type: System.Int32
    - id: height
      type: System.Int32
    content.vb: Public Sub New(width As Integer, height As Integer)
  overload: Terminal.Gui.Size.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Terminal.Gui.Size.IsEmpty
  commentId: P:Terminal.Gui.Size.IsEmpty
  id: IsEmpty
  parent: Terminal.Gui.Size
  langs:
  - csharp
  - vb
  name: IsEmpty
  nameWithType: Size.IsEmpty
  fullName: Terminal.Gui.Size.IsEmpty
  type: Property
  source:
    remote:
      path: Terminal.Gui/Types/Size.cs
      branch: reorg
      repo: tig:tig/gui.cs.git
    id: IsEmpty
    path: ../Terminal.Gui/Types/Size.cs
    startLine: 135
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: "\nIsEmpty Property\n"
  remarks: "\nIndicates if both Width and Height are zero.\n"
  example: []
  syntax:
    content: public bool IsEmpty { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsEmpty As Boolean
  overload: Terminal.Gui.Size.IsEmpty*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Terminal.Gui.Size.Width
  commentId: P:Terminal.Gui.Size.Width
  id: Width
  parent: Terminal.Gui.Size
  langs:
  - csharp
  - vb
  name: Width
  nameWithType: Size.Width
  fullName: Terminal.Gui.Size.Width
  type: Property
  source:
    remote:
      path: Terminal.Gui/Types/Size.cs
      branch: reorg
      repo: tig:tig/gui.cs.git
    id: Width
    path: ../Terminal.Gui/Types/Size.cs
    startLine: 149
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: "\nWidth Property\n"
  remarks: "\nThe Width coordinate of the Size.\n"
  example: []
  syntax:
    content: public int Width { get; set; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Property Width As Integer
  overload: Terminal.Gui.Size.Width*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Terminal.Gui.Size.Height
  commentId: P:Terminal.Gui.Size.Height
  id: Height
  parent: Terminal.Gui.Size
  langs:
  - csharp
  - vb
  name: Height
  nameWithType: Size.Height
  fullName: Terminal.Gui.Size.Height
  type: Property
  source:
    remote:
      path: Terminal.Gui/Types/Size.cs
      branch: reorg
      repo: tig:tig/gui.cs.git
    id: Height
    path: ../Terminal.Gui/Types/Size.cs
    startLine: 166
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: "\nHeight Property\n"
  remarks: "\nThe Height coordinate of the Size.\n"
  example: []
  syntax:
    content: public int Height { get; set; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Property Height As Integer
  overload: Terminal.Gui.Size.Height*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Terminal.Gui.Size.Equals(System.Object)
  commentId: M:Terminal.Gui.Size.Equals(System.Object)
  id: Equals(System.Object)
  parent: Terminal.Gui.Size
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: Size.Equals(Object)
  fullName: Terminal.Gui.Size.Equals(System.Object)
  type: Method
  source:
    remote:
      path: Terminal.Gui/Types/Size.cs
      branch: reorg
      repo: tig:tig/gui.cs.git
    id: Equals
    path: ../Terminal.Gui/Types/Size.cs
    startLine: 183
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: "\nEquals Method\n"
  remarks: "\nChecks equivalence of this Size and another object.\n"
  example: []
  syntax:
    content: public override bool Equals(object obj)
    parameters:
    - id: obj
      type: System.Object
    return:
      type: System.Boolean
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
  overridden: System.ValueType.Equals(System.Object)
  overload: Terminal.Gui.Size.Equals*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Terminal.Gui.Size.GetHashCode
  commentId: M:Terminal.Gui.Size.GetHashCode
  id: GetHashCode
  parent: Terminal.Gui.Size
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: Size.GetHashCode()
  fullName: Terminal.Gui.Size.GetHashCode()
  type: Method
  source:
    remote:
      path: Terminal.Gui/Types/Size.cs
      branch: reorg
      repo: tig:tig/gui.cs.git
    id: GetHashCode
    path: ../Terminal.Gui/Types/Size.cs
    startLine: 199
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: "\nGetHashCode Method\n"
  remarks: "\nCalculates a hashing value.\n"
  example: []
  syntax:
    content: public override int GetHashCode()
    return:
      type: System.Int32
    content.vb: Public Overrides Function GetHashCode As Integer
  overridden: System.ValueType.GetHashCode
  overload: Terminal.Gui.Size.GetHashCode*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Terminal.Gui.Size.ToString
  commentId: M:Terminal.Gui.Size.ToString
  id: ToString
  parent: Terminal.Gui.Size
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: Size.ToString()
  fullName: Terminal.Gui.Size.ToString()
  type: Method
  source:
    remote:
      path: Terminal.Gui/Types/Size.cs
      branch: reorg
      repo: tig:tig/gui.cs.git
    id: ToString
    path: ../Terminal.Gui/Types/Size.cs
    startLine: 212
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: "\nToString Method\n"
  remarks: "\nFormats the Size as a string in coordinate notation.\n"
  example: []
  syntax:
    content: public override string ToString()
    return:
      type: System.String
    content.vb: Public Overrides Function ToString As String
  overridden: System.ValueType.ToString
  overload: Terminal.Gui.Size.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Terminal.Gui.Size.Add(Terminal.Gui.Size,Terminal.Gui.Size)
  commentId: M:Terminal.Gui.Size.Add(Terminal.Gui.Size,Terminal.Gui.Size)
  id: Add(Terminal.Gui.Size,Terminal.Gui.Size)
  parent: Terminal.Gui.Size
  langs:
  - csharp
  - vb
  name: Add(Size, Size)
  nameWithType: Size.Add(Size, Size)
  fullName: Terminal.Gui.Size.Add(Terminal.Gui.Size, Terminal.Gui.Size)
  type: Method
  source:
    remote:
      path: Terminal.Gui/Types/Size.cs
      branch: reorg
      repo: tig:tig/gui.cs.git
    id: Add
    path: ../Terminal.Gui/Types/Size.cs
    startLine: 223
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: "\nAdds the width and height of one Size structure to the width and height of another Size structure.\n"
  example: []
  syntax:
    content: public static Size Add(Size sz1, Size sz2)
    parameters:
    - id: sz1
      type: Terminal.Gui.Size
      description: The first Size structure to add.
    - id: sz2
      type: Terminal.Gui.Size
      description: The second Size structure to add.
    return:
      type: Terminal.Gui.Size
      description: The add.
    content.vb: Public Shared Function Add(sz1 As Size, sz2 As Size) As Size
  overload: Terminal.Gui.Size.Add*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Terminal.Gui.Size.Subtract(Terminal.Gui.Size,Terminal.Gui.Size)
  commentId: M:Terminal.Gui.Size.Subtract(Terminal.Gui.Size,Terminal.Gui.Size)
  id: Subtract(Terminal.Gui.Size,Terminal.Gui.Size)
  parent: Terminal.Gui.Size
  langs:
  - csharp
  - vb
  name: Subtract(Size, Size)
  nameWithType: Size.Subtract(Size, Size)
  fullName: Terminal.Gui.Size.Subtract(Terminal.Gui.Size, Terminal.Gui.Size)
  type: Method
  source:
    remote:
      path: Terminal.Gui/Types/Size.cs
      branch: reorg
      repo: tig:tig/gui.cs.git
    id: Subtract
    path: ../Terminal.Gui/Types/Size.cs
    startLine: 236
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: "\nSubtracts the width and height of one Size structure to the width and height of another Size structure.\n"
  example: []
  syntax:
    content: public static Size Subtract(Size sz1, Size sz2)
    parameters:
    - id: sz1
      type: Terminal.Gui.Size
      description: The first Size structure to subtract.
    - id: sz2
      type: Terminal.Gui.Size
      description: The second Size structure to subtract.
    return:
      type: Terminal.Gui.Size
      description: The subtract.
    content.vb: Public Shared Function Subtract(sz1 As Size, sz2 As Size) As Size
  overload: Terminal.Gui.Size.Subtract*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: Terminal.Gui
  commentId: N:Terminal.Gui
  name: Terminal.Gui
  nameWithType: Terminal.Gui
  fullName: Terminal.Gui
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Terminal.Gui.Size
  commentId: T:Terminal.Gui.Size
  parent: Terminal.Gui
  name: Size
  nameWithType: Size
  fullName: Terminal.Gui.Size
- uid: Terminal.Gui.Size.op_Addition*
  commentId: Overload:Terminal.Gui.Size.op_Addition
  name: Addition
  nameWithType: Size.Addition
  fullName: Terminal.Gui.Size.Addition
- uid: Terminal.Gui.Size.op_Equality*
  commentId: Overload:Terminal.Gui.Size.op_Equality
  name: Equality
  nameWithType: Size.Equality
  fullName: Terminal.Gui.Size.Equality
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Terminal.Gui.Size.op_Inequality*
  commentId: Overload:Terminal.Gui.Size.op_Inequality
  name: Inequality
  nameWithType: Size.Inequality
  fullName: Terminal.Gui.Size.Inequality
- uid: Terminal.Gui.Size.op_Subtraction*
  commentId: Overload:Terminal.Gui.Size.op_Subtraction
  name: Subtraction
  nameWithType: Size.Subtraction
  fullName: Terminal.Gui.Size.Subtraction
- uid: Terminal.Gui.Size.op_Explicit*
  commentId: Overload:Terminal.Gui.Size.op_Explicit
  name: Explicit
  nameWithType: Size.Explicit
  fullName: Terminal.Gui.Size.Explicit
  nameWithType.vb: Size.Narrowing
  fullName.vb: Terminal.Gui.Size.Narrowing
  name.vb: Narrowing
- uid: Terminal.Gui.Point
  commentId: T:Terminal.Gui.Point
  parent: Terminal.Gui
  name: Point
  nameWithType: Point
  fullName: Terminal.Gui.Point
- uid: Terminal.Gui.Size.#ctor*
  commentId: Overload:Terminal.Gui.Size.#ctor
  name: Size
  nameWithType: Size.Size
  fullName: Terminal.Gui.Size.Size
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Terminal.Gui.Size.IsEmpty*
  commentId: Overload:Terminal.Gui.Size.IsEmpty
  name: IsEmpty
  nameWithType: Size.IsEmpty
  fullName: Terminal.Gui.Size.IsEmpty
- uid: Terminal.Gui.Size.Width*
  commentId: Overload:Terminal.Gui.Size.Width
  name: Width
  nameWithType: Size.Width
  fullName: Terminal.Gui.Size.Width
- uid: Terminal.Gui.Size.Height*
  commentId: Overload:Terminal.Gui.Size.Height
  name: Height
  nameWithType: Size.Height
  fullName: Terminal.Gui.Size.Height
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(Object)
  nameWithType: ValueType.Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Terminal.Gui.Size.Equals*
  commentId: Overload:Terminal.Gui.Size.Equals
  name: Equals
  nameWithType: Size.Equals
  fullName: Terminal.Gui.Size.Equals
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Terminal.Gui.Size.GetHashCode*
  commentId: Overload:Terminal.Gui.Size.GetHashCode
  name: GetHashCode
  nameWithType: Size.GetHashCode
  fullName: Terminal.Gui.Size.GetHashCode
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Terminal.Gui.Size.ToString*
  commentId: Overload:Terminal.Gui.Size.ToString
  name: ToString
  nameWithType: Size.ToString
  fullName: Terminal.Gui.Size.ToString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Terminal.Gui.Size.Add*
  commentId: Overload:Terminal.Gui.Size.Add
  name: Add
  nameWithType: Size.Add
  fullName: Terminal.Gui.Size.Add
- uid: Terminal.Gui.Size.Subtract*
  commentId: Overload:Terminal.Gui.Size.Subtract
  name: Subtract
  nameWithType: Size.Subtract
  fullName: Terminal.Gui.Size.Subtract
shouldSkipMarkup: true
