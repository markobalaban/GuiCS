### YamlMime:ManagedReference
items:
- uid: Terminal.Gui.MainLoop
  commentId: T:Terminal.Gui.MainLoop
  id: MainLoop
  parent: Terminal.Gui
  children:
  - Terminal.Gui.MainLoop.#ctor(Terminal.Gui.IMainLoopDriver)
  - Terminal.Gui.MainLoop.AddIdle(System.Func{System.Boolean})
  - Terminal.Gui.MainLoop.AddTimeout(System.TimeSpan,System.Func{Terminal.Gui.MainLoop,System.Boolean})
  - Terminal.Gui.MainLoop.Driver
  - Terminal.Gui.MainLoop.EventsPending(System.Boolean)
  - Terminal.Gui.MainLoop.Invoke(System.Action)
  - Terminal.Gui.MainLoop.MainIteration
  - Terminal.Gui.MainLoop.RemoveIdle(System.Func{System.Boolean})
  - Terminal.Gui.MainLoop.RemoveTimeout(System.Object)
  - Terminal.Gui.MainLoop.Run
  - Terminal.Gui.MainLoop.Stop
  langs:
  - csharp
  - vb
  name: MainLoop
  nameWithType: MainLoop
  fullName: Terminal.Gui.MainLoop
  type: Class
  source:
    remote:
      path: Terminal.Gui/Core/MainLoop.cs
      branch: reorg
      repo: tig:tig/gui.cs.git
    id: MainLoop
    path: ../Terminal.Gui/Core/MainLoop.cs
    startLine: 46
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: "\nSimple main loop implementation that can be used to monitor\nfile descriptor, run timers and idle handlers.\n"
  remarks: "\nMonitoring of file descriptors is only available on Unix, there\ndoes not seem to be a way of supporting this on Windows.\n"
  example: []
  syntax:
    content: public class MainLoop
    content.vb: Public Class MainLoop
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Terminal.Gui.MainLoop.Driver
  commentId: P:Terminal.Gui.MainLoop.Driver
  id: Driver
  parent: Terminal.Gui.MainLoop
  langs:
  - csharp
  - vb
  name: Driver
  nameWithType: MainLoop.Driver
  fullName: Terminal.Gui.MainLoop.Driver
  type: Property
  source:
    remote:
      path: Terminal.Gui/Core/MainLoop.cs
      branch: reorg
      repo: tig:tig/gui.cs.git
    id: Driver
    path: ../Terminal.Gui/Core/MainLoop.cs
    startLine: 61
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: "\nThe current IMainLoopDriver in use.\n"
  example: []
  syntax:
    content: public IMainLoopDriver Driver { get; }
    parameters: []
    return:
      type: Terminal.Gui.IMainLoopDriver
      description: The driver.
    content.vb: Public ReadOnly Property Driver As IMainLoopDriver
  overload: Terminal.Gui.MainLoop.Driver*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Terminal.Gui.MainLoop.#ctor(Terminal.Gui.IMainLoopDriver)
  commentId: M:Terminal.Gui.MainLoop.#ctor(Terminal.Gui.IMainLoopDriver)
  id: '#ctor(Terminal.Gui.IMainLoopDriver)'
  parent: Terminal.Gui.MainLoop
  langs:
  - csharp
  - vb
  name: MainLoop(IMainLoopDriver)
  nameWithType: MainLoop.MainLoop(IMainLoopDriver)
  fullName: Terminal.Gui.MainLoop.MainLoop(Terminal.Gui.IMainLoopDriver)
  type: Constructor
  source:
    remote:
      path: Terminal.Gui/Core/MainLoop.cs
      branch: reorg
      repo: tig:tig/gui.cs.git
    id: .ctor
    path: ../Terminal.Gui/Core/MainLoop.cs
    startLine: 67
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: "\nCreates a new Mainloop, to run it you must provide a driver, and choose\none of the implementations UnixMainLoop, NetMainLoop or WindowsMainLoop.\n"
  example: []
  syntax:
    content: public MainLoop(IMainLoopDriver driver)
    parameters:
    - id: driver
      type: Terminal.Gui.IMainLoopDriver
    content.vb: Public Sub New(driver As IMainLoopDriver)
  overload: Terminal.Gui.MainLoop.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Terminal.Gui.MainLoop.Invoke(System.Action)
  commentId: M:Terminal.Gui.MainLoop.Invoke(System.Action)
  id: Invoke(System.Action)
  parent: Terminal.Gui.MainLoop
  langs:
  - csharp
  - vb
  name: Invoke(Action)
  nameWithType: MainLoop.Invoke(Action)
  fullName: Terminal.Gui.MainLoop.Invoke(System.Action)
  type: Method
  source:
    remote:
      path: Terminal.Gui/Core/MainLoop.cs
      branch: reorg
      repo: tig:tig/gui.cs.git
    id: Invoke
    path: ../Terminal.Gui/Core/MainLoop.cs
    startLine: 76
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: "\nRuns @action on the thread that is processing events\n"
  example: []
  syntax:
    content: public void Invoke(Action action)
    parameters:
    - id: action
      type: System.Action
    content.vb: Public Sub Invoke(action As Action)
  overload: Terminal.Gui.MainLoop.Invoke*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Terminal.Gui.MainLoop.AddIdle(System.Func{System.Boolean})
  commentId: M:Terminal.Gui.MainLoop.AddIdle(System.Func{System.Boolean})
  id: AddIdle(System.Func{System.Boolean})
  parent: Terminal.Gui.MainLoop
  langs:
  - csharp
  - vb
  name: AddIdle(Func<Boolean>)
  nameWithType: MainLoop.AddIdle(Func<Boolean>)
  fullName: Terminal.Gui.MainLoop.AddIdle(System.Func<System.Boolean>)
  type: Method
  source:
    remote:
      path: Terminal.Gui/Core/MainLoop.cs
      branch: reorg
      repo: tig:tig/gui.cs.git
    id: AddIdle
    path: ../Terminal.Gui/Core/MainLoop.cs
    startLine: 87
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: "\nExecutes the specified @idleHandler on the idle loop.  The return value is a token to remove it.\n"
  example: []
  syntax:
    content: public Func<bool> AddIdle(Func<bool> idleHandler)
    parameters:
    - id: idleHandler
      type: System.Func{System.Boolean}
    return:
      type: System.Func{System.Boolean}
    content.vb: Public Function AddIdle(idleHandler As Func(Of Boolean)) As Func(Of Boolean)
  overload: Terminal.Gui.MainLoop.AddIdle*
  nameWithType.vb: MainLoop.AddIdle(Func(Of Boolean))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Terminal.Gui.MainLoop.AddIdle(System.Func(Of System.Boolean))
  name.vb: AddIdle(Func(Of Boolean))
- uid: Terminal.Gui.MainLoop.RemoveIdle(System.Func{System.Boolean})
  commentId: M:Terminal.Gui.MainLoop.RemoveIdle(System.Func{System.Boolean})
  id: RemoveIdle(System.Func{System.Boolean})
  parent: Terminal.Gui.MainLoop
  langs:
  - csharp
  - vb
  name: RemoveIdle(Func<Boolean>)
  nameWithType: MainLoop.RemoveIdle(Func<Boolean>)
  fullName: Terminal.Gui.MainLoop.RemoveIdle(System.Func<System.Boolean>)
  type: Method
  source:
    remote:
      path: Terminal.Gui/Core/MainLoop.cs
      branch: reorg
      repo: tig:tig/gui.cs.git
    id: RemoveIdle
    path: ../Terminal.Gui/Core/MainLoop.cs
    startLine: 98
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: "\nRemoves the specified idleHandler from processing.\n"
  example: []
  syntax:
    content: public void RemoveIdle(Func<bool> idleHandler)
    parameters:
    - id: idleHandler
      type: System.Func{System.Boolean}
    content.vb: Public Sub RemoveIdle(idleHandler As Func(Of Boolean))
  overload: Terminal.Gui.MainLoop.RemoveIdle*
  nameWithType.vb: MainLoop.RemoveIdle(Func(Of Boolean))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Terminal.Gui.MainLoop.RemoveIdle(System.Func(Of System.Boolean))
  name.vb: RemoveIdle(Func(Of Boolean))
- uid: Terminal.Gui.MainLoop.AddTimeout(System.TimeSpan,System.Func{Terminal.Gui.MainLoop,System.Boolean})
  commentId: M:Terminal.Gui.MainLoop.AddTimeout(System.TimeSpan,System.Func{Terminal.Gui.MainLoop,System.Boolean})
  id: AddTimeout(System.TimeSpan,System.Func{Terminal.Gui.MainLoop,System.Boolean})
  parent: Terminal.Gui.MainLoop
  langs:
  - csharp
  - vb
  name: AddTimeout(TimeSpan, Func<MainLoop, Boolean>)
  nameWithType: MainLoop.AddTimeout(TimeSpan, Func<MainLoop, Boolean>)
  fullName: Terminal.Gui.MainLoop.AddTimeout(System.TimeSpan, System.Func<Terminal.Gui.MainLoop, System.Boolean>)
  type: Method
  source:
    remote:
      path: Terminal.Gui/Core/MainLoop.cs
      branch: reorg
      repo: tig:tig/gui.cs.git
    id: AddTimeout
    path: ../Terminal.Gui/Core/MainLoop.cs
    startLine: 120
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: "\nAdds a timeout to the mainloop.\n"
  remarks: "\nWhen time time specified passes, the callback will be invoked.\nIf the callback returns true, the timeout will be reset, repeating\nthe invocation. If it returns false, the timeout will stop.\n\nThe returned value is a token that can be used to stop the timeout\nby calling RemoveTimeout.\n"
  example: []
  syntax:
    content: public object AddTimeout(TimeSpan time, Func<MainLoop, bool> callback)
    parameters:
    - id: time
      type: System.TimeSpan
    - id: callback
      type: System.Func{Terminal.Gui.MainLoop,System.Boolean}
    return:
      type: System.Object
    content.vb: Public Function AddTimeout(time As TimeSpan, callback As Func(Of MainLoop, Boolean)) As Object
  overload: Terminal.Gui.MainLoop.AddTimeout*
  nameWithType.vb: MainLoop.AddTimeout(TimeSpan, Func(Of MainLoop, Boolean))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Terminal.Gui.MainLoop.AddTimeout(System.TimeSpan, System.Func(Of Terminal.Gui.MainLoop, System.Boolean))
  name.vb: AddTimeout(TimeSpan, Func(Of MainLoop, Boolean))
- uid: Terminal.Gui.MainLoop.RemoveTimeout(System.Object)
  commentId: M:Terminal.Gui.MainLoop.RemoveTimeout(System.Object)
  id: RemoveTimeout(System.Object)
  parent: Terminal.Gui.MainLoop
  langs:
  - csharp
  - vb
  name: RemoveTimeout(Object)
  nameWithType: MainLoop.RemoveTimeout(Object)
  fullName: Terminal.Gui.MainLoop.RemoveTimeout(System.Object)
  type: Method
  source:
    remote:
      path: Terminal.Gui/Core/MainLoop.cs
      branch: reorg
      repo: tig:tig/gui.cs.git
    id: RemoveTimeout
    path: ../Terminal.Gui/Core/MainLoop.cs
    startLine: 138
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: "\nRemoves a previously scheduled timeout\n"
  remarks: "\nThe token parameter is the value returned by AddTimeout.\n"
  example: []
  syntax:
    content: public void RemoveTimeout(object token)
    parameters:
    - id: token
      type: System.Object
    content.vb: Public Sub RemoveTimeout(token As Object)
  overload: Terminal.Gui.MainLoop.RemoveTimeout*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Terminal.Gui.MainLoop.Stop
  commentId: M:Terminal.Gui.MainLoop.Stop
  id: Stop
  parent: Terminal.Gui.MainLoop
  langs:
  - csharp
  - vb
  name: Stop()
  nameWithType: MainLoop.Stop()
  fullName: Terminal.Gui.MainLoop.Stop()
  type: Method
  source:
    remote:
      path: Terminal.Gui/Core/MainLoop.cs
      branch: reorg
      repo: tig:tig/gui.cs.git
    id: Stop
    path: ../Terminal.Gui/Core/MainLoop.cs
    startLine: 181
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: "\nStops the mainloop.\n"
  example: []
  syntax:
    content: public void Stop()
    content.vb: Public Sub Stop
  overload: Terminal.Gui.MainLoop.Stop*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Terminal.Gui.MainLoop.EventsPending(System.Boolean)
  commentId: M:Terminal.Gui.MainLoop.EventsPending(System.Boolean)
  id: EventsPending(System.Boolean)
  parent: Terminal.Gui.MainLoop
  langs:
  - csharp
  - vb
  name: EventsPending(Boolean)
  nameWithType: MainLoop.EventsPending(Boolean)
  fullName: Terminal.Gui.MainLoop.EventsPending(System.Boolean)
  type: Method
  source:
    remote:
      path: Terminal.Gui/Core/MainLoop.cs
      branch: reorg
      repo: tig:tig/gui.cs.git
    id: EventsPending
    path: ../Terminal.Gui/Core/MainLoop.cs
    startLine: 195
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: "\nDetermines whether there are pending events to be processed.\n"
  remarks: "\nYou can use this method if you want to probe if events are pending.\nTypically used if you need to flush the input queue while still\nrunning some of your own code in your main thread.\n"
  example: []
  syntax:
    content: public bool EventsPending(bool wait = false)
    parameters:
    - id: wait
      type: System.Boolean
    return:
      type: System.Boolean
    content.vb: Public Function EventsPending(wait As Boolean = False) As Boolean
  overload: Terminal.Gui.MainLoop.EventsPending*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Terminal.Gui.MainLoop.MainIteration
  commentId: M:Terminal.Gui.MainLoop.MainIteration
  id: MainIteration
  parent: Terminal.Gui.MainLoop
  langs:
  - csharp
  - vb
  name: MainIteration()
  nameWithType: MainLoop.MainIteration()
  fullName: Terminal.Gui.MainLoop.MainIteration()
  type: Method
  source:
    remote:
      path: Terminal.Gui/Core/MainLoop.cs
      branch: reorg
      repo: tig:tig/gui.cs.git
    id: MainIteration
    path: ../Terminal.Gui/Core/MainLoop.cs
    startLine: 209
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: "\nRuns one iteration of timers and file watches\n"
  remarks: "\nYou use this to process all pending events (timers, idle handlers and file watches).\n\nYou can use it like this:\nwhile (main.EvensPending ()) MainIteration ();\n"
  example: []
  syntax:
    content: public void MainIteration()
    content.vb: Public Sub MainIteration
  overload: Terminal.Gui.MainLoop.MainIteration*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Terminal.Gui.MainLoop.Run
  commentId: M:Terminal.Gui.MainLoop.Run
  id: Run
  parent: Terminal.Gui.MainLoop
  langs:
  - csharp
  - vb
  name: Run()
  nameWithType: MainLoop.Run()
  fullName: Terminal.Gui.MainLoop.Run()
  type: Method
  source:
    remote:
      path: Terminal.Gui/Core/MainLoop.cs
      branch: reorg
      repo: tig:tig/gui.cs.git
    id: Run
    path: ../Terminal.Gui/Core/MainLoop.cs
    startLine: 225
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: "\nRuns the mainloop.\n"
  example: []
  syntax:
    content: public void Run()
    content.vb: Public Sub Run
  overload: Terminal.Gui.MainLoop.Run*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Terminal.Gui
  commentId: N:Terminal.Gui
  name: Terminal.Gui
  nameWithType: Terminal.Gui
  fullName: Terminal.Gui
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Terminal.Gui.MainLoop.Driver*
  commentId: Overload:Terminal.Gui.MainLoop.Driver
  name: Driver
  nameWithType: MainLoop.Driver
  fullName: Terminal.Gui.MainLoop.Driver
- uid: Terminal.Gui.IMainLoopDriver
  commentId: T:Terminal.Gui.IMainLoopDriver
  parent: Terminal.Gui
  name: IMainLoopDriver
  nameWithType: IMainLoopDriver
  fullName: Terminal.Gui.IMainLoopDriver
- uid: Terminal.Gui.MainLoop.#ctor*
  commentId: Overload:Terminal.Gui.MainLoop.#ctor
  name: MainLoop
  nameWithType: MainLoop.MainLoop
  fullName: Terminal.Gui.MainLoop.MainLoop
- uid: Terminal.Gui.MainLoop.Invoke*
  commentId: Overload:Terminal.Gui.MainLoop.Invoke
  name: Invoke
  nameWithType: MainLoop.Invoke
  fullName: Terminal.Gui.MainLoop.Invoke
- uid: System.Action
  commentId: T:System.Action
  parent: System
  isExternal: true
  name: Action
  nameWithType: Action
  fullName: System.Action
- uid: Terminal.Gui.MainLoop.AddIdle*
  commentId: Overload:Terminal.Gui.MainLoop.AddIdle
  name: AddIdle
  nameWithType: MainLoop.AddIdle
  fullName: Terminal.Gui.MainLoop.AddIdle
- uid: System.Func{System.Boolean}
  commentId: T:System.Func{System.Boolean}
  parent: System
  definition: System.Func`1
  name: Func<Boolean>
  nameWithType: Func<Boolean>
  fullName: System.Func<System.Boolean>
  nameWithType.vb: Func(Of Boolean)
  fullName.vb: System.Func(Of System.Boolean)
  name.vb: Func(Of Boolean)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`1
  commentId: T:System.Func`1
  isExternal: true
  name: Func<TResult>
  nameWithType: Func<TResult>
  fullName: System.Func<TResult>
  nameWithType.vb: Func(Of TResult)
  fullName.vb: System.Func(Of TResult)
  name.vb: Func(Of TResult)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Terminal.Gui.MainLoop.RemoveIdle*
  commentId: Overload:Terminal.Gui.MainLoop.RemoveIdle
  name: RemoveIdle
  nameWithType: MainLoop.RemoveIdle
  fullName: Terminal.Gui.MainLoop.RemoveIdle
- uid: Terminal.Gui.MainLoop.AddTimeout*
  commentId: Overload:Terminal.Gui.MainLoop.AddTimeout
  name: AddTimeout
  nameWithType: MainLoop.AddTimeout
  fullName: Terminal.Gui.MainLoop.AddTimeout
- uid: System.TimeSpan
  commentId: T:System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Func{Terminal.Gui.MainLoop,System.Boolean}
  commentId: T:System.Func{Terminal.Gui.MainLoop,System.Boolean}
  parent: System
  definition: System.Func`2
  name: Func<MainLoop, Boolean>
  nameWithType: Func<MainLoop, Boolean>
  fullName: System.Func<Terminal.Gui.MainLoop, System.Boolean>
  nameWithType.vb: Func(Of MainLoop, Boolean)
  fullName.vb: System.Func(Of Terminal.Gui.MainLoop, System.Boolean)
  name.vb: Func(Of MainLoop, Boolean)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Terminal.Gui.MainLoop
    name: MainLoop
    nameWithType: MainLoop
    fullName: Terminal.Gui.MainLoop
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Terminal.Gui.MainLoop
    name: MainLoop
    nameWithType: MainLoop
    fullName: Terminal.Gui.MainLoop
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Terminal.Gui.MainLoop.RemoveTimeout*
  commentId: Overload:Terminal.Gui.MainLoop.RemoveTimeout
  name: RemoveTimeout
  nameWithType: MainLoop.RemoveTimeout
  fullName: Terminal.Gui.MainLoop.RemoveTimeout
- uid: Terminal.Gui.MainLoop.Stop*
  commentId: Overload:Terminal.Gui.MainLoop.Stop
  name: Stop
  nameWithType: MainLoop.Stop
  fullName: Terminal.Gui.MainLoop.Stop
- uid: Terminal.Gui.MainLoop.EventsPending*
  commentId: Overload:Terminal.Gui.MainLoop.EventsPending
  name: EventsPending
  nameWithType: MainLoop.EventsPending
  fullName: Terminal.Gui.MainLoop.EventsPending
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Terminal.Gui.MainLoop.MainIteration*
  commentId: Overload:Terminal.Gui.MainLoop.MainIteration
  name: MainIteration
  nameWithType: MainLoop.MainIteration
  fullName: Terminal.Gui.MainLoop.MainIteration
- uid: Terminal.Gui.MainLoop.Run*
  commentId: Overload:Terminal.Gui.MainLoop.Run
  name: Run
  nameWithType: MainLoop.Run
  fullName: Terminal.Gui.MainLoop.Run
shouldSkipMarkup: true
