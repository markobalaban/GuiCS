<Type Name="View" FullName="Terminal.Gui.View">
  <TypeSignature Language="C#" Value="public class View : Terminal.Gui.Responder, System.Collections.IEnumerable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit View extends Terminal.Gui.Responder implements class System.Collections.IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>Terminal.Gui</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Terminal.Gui.Responder</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
            View is the base class for all views on the screen and represents a visible element that can render itself and contains zero or more nested views.
            </summary>
    <remarks>
      <para>
               The View defines the base functionality for user interface elements in Terminal/gui.cs.  Views
               can contain one or more subviews, can respond to user input and render themselves on the screen.
            </para>
      <para>
               Views can either be created with an absolute position, by calling the constructor that takes a
               Rect parameter to specify the absolute position and size (the Frame of the View) or by setting the
               X, Y, Width and Height properties on the view.    Both approaches use coordinates that are relative 
               to the container they are being added to.
            </para>
      <para>
               When you do not specify a Rect frame you can use the more flexible 
               Dim and Pos objects that can dynamically update the position of a view.   
               The X and Y properties are of type <see cref="T:Terminal.Gui.Pos" />
               and you can use either absolute positions, percentages or anchor
               points.   The Width and Height properties are of type 
               <see cref="T:Terminal.Gui.Dim" /> and can use absolute position, 
               percentages and anchors.  These are useful as they will take
               care of repositioning your views if your view's frames are resized
               or if the terminal size changes.
            </para>
      <para>
               When you specify the Rect parameter to a view, you are setting the LayoutStyle to Absolute, and the 
               view will always stay in the position that you placed it.   To change the position change the 
               Frame property to the new position.
            </para>
      <para>
               Subviews can be added to a View by calling the Add method.   The container of a view is the 
               Superview.
            </para>
      <para>
               Developers can call the SetNeedsDisplay method on the view to flag a region or the entire view
               as requiring to be redrawn.
            </para>
      <para>
               Views have a ColorScheme property that defines the default colors that subviews
               should use for rendering.   This ensures that the views fit in the context where
               they are being used, and allows for themes to be plugged in.   For example, the
               default colors for windows and toplevels uses a blue background, while it uses 
               a white background for dialog boxes and a red background for errors.
            </para>
      <para>
               If a ColorScheme is not set on a view, the result of the ColorScheme is the
               value of the SuperView and the value might only be valid once a view has been
               added to a SuperView, so your subclasses should not rely on ColorScheme being
               set at construction time.
            </para>
      <para>
               Using ColorSchemes has the advantage that your application will work both
               in color as well as black and white displays.
            </para>
      <para>
               Views that are focusable should implement the PositionCursor to make sure that
               the cursor is placed in a location that makes sense.   Unix terminals do not have
               a way of hiding the cursor, so it can be distracting to have the cursor left at 
               the last focused view.   So views should make sure that they place the cursor
               in a visually sensible place.
            </para>
      <para>
               The metnod LayoutSubviews is invoked when the size or layout of a view has
               changed.   The default processing system will keep the size and dimensions
               for views that use the LayoutKind.Absolute, and will recompute the
               frames for the vies that use LayoutKind.Computed.
            </para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public View ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
            Initializes a new instance of the <see cref="T:Terminal.Gui.View" /> class and sets the
            view up for Computed layout, which will use the values in X, Y, Width and Height to 
            compute the View's Frame.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public View (Terminal.Gui.Rect frame);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype Terminal.Gui.Rect frame) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="frame" Type="Terminal.Gui.Rect" />
      </Parameters>
      <Docs>
        <param name="frame">The region covered by this view.</param>
        <summary>
            Initializes a new instance of the <see cref="T:Terminal.Gui.View" /> class with the absolute
            dimensions specified in the frame.   If you want to have Views that can be positioned with
            Pos and Dim properties on X, Y, Width and Height, use the empty constructor.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public virtual void Add (Terminal.Gui.View view);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Add(class Terminal.Gui.View view) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="view" Type="Terminal.Gui.View" />
      </Parameters>
      <Docs>
        <param name="view">To be added.</param>
        <summary>
              Adds a subview to this view.
            </summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (Terminal.Gui.View[] views);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(class Terminal.Gui.View[] views) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="views" Type="Terminal.Gui.View[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="views">Array of one or more views (can be optional parameter).</param>
        <summary>
            Adds the specified views to the view.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddRune">
      <MemberSignature Language="C#" Value="public void AddRune (int col, int row, Rune ch);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddRune(int32 col, int32 row, valuetype System.Rune ch) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="col" Type="System.Int32" />
        <Parameter Name="row" Type="System.Int32" />
        <Parameter Name="ch" Type="System.Rune" />
      </Parameters>
      <Docs>
        <param name="col">Col.</param>
        <param name="row">Row.</param>
        <param name="ch">Ch.</param>
        <summary>
            Displays the specified character in the specified column and row.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Bounds">
      <MemberSignature Language="C#" Value="public Terminal.Gui.Rect Bounds { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Terminal.Gui.Rect Bounds" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Terminal.Gui.Rect</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The bounds represent the View-relative rectangle used for this view.   Updates to the Bounds update the Frame, and has the same side effects as updating the frame.
            </summary>
        <value>The bounds.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ChildNeedsDisplay">
      <MemberSignature Language="C#" Value="public void ChildNeedsDisplay ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ChildNeedsDisplay() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Flags this view for requiring the children views to be repainted.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Clear() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
              Clears the view region with the current color.
            </summary>
        <remarks>
          <para>
                This clears the entire region used by this view.
              </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear (Terminal.Gui.Rect r);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Clear(valuetype Terminal.Gui.Rect r) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="r" Type="Terminal.Gui.Rect" />
      </Parameters>
      <Docs>
        <param name="r">To be added.</param>
        <summary>
              Clears the specfied rectangular region with the current color
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClearNeedsDisplay">
      <MemberSignature Language="C#" Value="protected void ClearNeedsDisplay ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void ClearNeedsDisplay() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Removes the SetNeedsDisplay and the ChildNeedsDisplay setting on this view.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClipToBounds">
      <MemberSignature Language="C#" Value="public Terminal.Gui.Rect ClipToBounds ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype Terminal.Gui.Rect ClipToBounds() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Terminal.Gui.Rect</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Sets the Console driver's clip region to the current View's Bounds.
            </summary>
        <returns>The existing driver's Clip region, which can be then set by setting the Driver.Clip property.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ColorScheme">
      <MemberSignature Language="C#" Value="public Terminal.Gui.ColorScheme ColorScheme { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Terminal.Gui.ColorScheme ColorScheme" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Terminal.Gui.ColorScheme</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The color scheme for this view, if it is not defined, it returns the parent's
            color scheme.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawFrame">
      <MemberSignature Language="C#" Value="public void DrawFrame (Terminal.Gui.Rect rect, int padding = 0, bool fill = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawFrame(valuetype Terminal.Gui.Rect rect, int32 padding, bool fill) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="Terminal.Gui.Rect" />
        <Parameter Name="padding" Type="System.Int32" />
        <Parameter Name="fill" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="rect">Rectangular region for the frame to be drawn.</param>
        <param name="padding">The padding to add to the drawn frame.</param>
        <param name="fill">If set to <c>true</c> it fill will the contents.</param>
        <summary>
            Draws a frame in the current view, clipped by the boundary of this view
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawHotString">
      <MemberSignature Language="C#" Value="public void DrawHotString (NStack.ustring text, bool focused, Terminal.Gui.ColorScheme scheme);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawHotString(class NStack.ustring text, bool focused, class Terminal.Gui.ColorScheme scheme) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="NStack.ustring" />
        <Parameter Name="focused" Type="System.Boolean" />
        <Parameter Name="scheme" Type="Terminal.Gui.ColorScheme" />
      </Parameters>
      <Docs>
        <param name="text">String to display, the underscoore before a letter flags the next letter as the hotkey.</param>
        <param name="focused">If set to <c>true</c> this uses the focused colors from the color scheme, otherwise the regular ones.</param>
        <param name="scheme">The color scheme to use.</param>
        <summary>
            Utility function to draw strings that contains a hotkey using a colorscheme and the "focused" state.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawHotString">
      <MemberSignature Language="C#" Value="public void DrawHotString (NStack.ustring text, Terminal.Gui.Attribute hotColor, Terminal.Gui.Attribute normalColor);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawHotString(class NStack.ustring text, valuetype Terminal.Gui.Attribute hotColor, valuetype Terminal.Gui.Attribute normalColor) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="NStack.ustring" />
        <Parameter Name="hotColor" Type="Terminal.Gui.Attribute" />
        <Parameter Name="normalColor" Type="Terminal.Gui.Attribute" />
      </Parameters>
      <Docs>
        <param name="text">String to display, the underscoore before a letter flags the next letter as the hotkey.</param>
        <param name="hotColor">Hot color.</param>
        <param name="normalColor">Normal color.</param>
        <summary>
            Utility function to draw strings that contain a hotkey
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Driver">
      <MemberSignature Language="C#" Value="public static Terminal.Gui.ConsoleDriver Driver;" />
      <MemberSignature Language="ILAsm" Value=".field public static class Terminal.Gui.ConsoleDriver Driver" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Terminal.Gui.ConsoleDriver</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Points to the current driver in use by the view, it is a convenience property
            for simplifying the development of new views.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnsureFocus">
      <MemberSignature Language="C#" Value="public void EnsureFocus ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnsureFocus() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Finds the first view in the hierarchy that wants to get the focus if nothing is currently focused, otherwise, it does nothing.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Focused">
      <MemberSignature Language="C#" Value="public Terminal.Gui.View Focused { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Terminal.Gui.View Focused" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Terminal.Gui.View</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Returns the currently focused view inside this view, or null if nothing is focused.
            </summary>
        <value>The focused.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FocusFirst">
      <MemberSignature Language="C#" Value="public void FocusFirst ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FocusFirst() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Focuses the first focusable subview if one exists.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FocusLast">
      <MemberSignature Language="C#" Value="public void FocusLast ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FocusLast() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Focuses the last focusable subview if one exists.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FocusNext">
      <MemberSignature Language="C#" Value="public bool FocusNext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool FocusNext() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Focuses the next view.
            </summary>
        <returns>
          <c>true</c>, if next was focused, <c>false</c> otherwise.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FocusPrev">
      <MemberSignature Language="C#" Value="public bool FocusPrev ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool FocusPrev() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Focuses the previous view.
            </summary>
        <returns>
          <c>true</c>, if previous was focused, <c>false</c> otherwise.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Frame">
      <MemberSignature Language="C#" Value="public virtual Terminal.Gui.Rect Frame { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Terminal.Gui.Rect Frame" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Terminal.Gui.Rect</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets the frame for the view.
            </summary>
        <value>The frame.</value>
        <remarks>
               Altering the Frame of a view will trigger the redrawing of the 
               view as well as the redrawing of the affected regions in the superview.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.IEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IEnumerator GetEnumerator() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.IteratorStateMachine(typeof(Terminal.Gui.View/&lt;GetEnumerator&gt;d__23))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Gets an enumerator that enumerates the subviews in this view.
            </summary>
        <returns>The enumerator.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasFocus">
      <MemberSignature Language="C#" Value="public override bool HasFocus { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasFocus" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets a value indicating whether this <see cref="T:Terminal.Gui.View" /> has focus.
            </summary>
        <value>
          <c>true</c> if has focus; otherwise, <c>false</c>.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Height">
      <MemberSignature Language="C#" Value="public Terminal.Gui.Dim Height { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Terminal.Gui.Dim Height" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Terminal.Gui.Dim</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets the height for the view. This is only used when the LayoutStyle is Computed, if the
            LayoutStyle is set to Absolute, this value is ignored.
            </summary>
        <value>The height.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Id">
      <MemberSignature Language="C#" Value="public NStack.ustring Id { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class NStack.ustring Id" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>NStack.ustring</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets an identifier for the view;
            </summary>
        <value>The identifier.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LayoutStyle">
      <MemberSignature Language="C#" Value="public Terminal.Gui.LayoutStyle LayoutStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Terminal.Gui.LayoutStyle LayoutStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Terminal.Gui.LayoutStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Controls how the view's Frame is computed during the LayoutSubviews method, if Absolute, then
            LayoutSubviews does not change the Frame properties, otherwise the Frame is updated from the
            values in X, Y, Width and Height properties.
            </summary>
        <value>The layout style.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LayoutSubviews">
      <MemberSignature Language="C#" Value="public virtual void LayoutSubviews ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void LayoutSubviews() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            This virtual method is invoked when a view starts executing or 
            when the dimensions of the view have changed, for example in 
            response to the container view or terminal resizing.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MostFocused">
      <MemberSignature Language="C#" Value="public Terminal.Gui.View MostFocused { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Terminal.Gui.View MostFocused" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Terminal.Gui.View</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Returns the most focused view in the chain of subviews (the leaf view that has the focus).
            </summary>
        <value>The most focused.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Move">
      <MemberSignature Language="C#" Value="public void Move (int col, int row);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Move(int32 col, int32 row) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="col" Type="System.Int32" />
        <Parameter Name="row" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="col">Col.</param>
        <param name="row">Row.</param>
        <summary>
            This moves the cursor to the specified column and row in the view.
            </summary>
        <returns>The move.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PositionCursor">
      <MemberSignature Language="C#" Value="public virtual void PositionCursor ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PositionCursor() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
              Positions the cursor in the right position based on the currently focused view in the chain.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ProcessColdKey">
      <MemberSignature Language="C#" Value="public override bool ProcessColdKey (Terminal.Gui.KeyEvent keyEvent);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool ProcessColdKey(valuetype Terminal.Gui.KeyEvent keyEvent) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyEvent" Type="Terminal.Gui.KeyEvent" />
      </Parameters>
      <Docs>
        <param name="keyEvent">Contains the details about the key that produced the event.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ProcessHotKey">
      <MemberSignature Language="C#" Value="public override bool ProcessHotKey (Terminal.Gui.KeyEvent keyEvent);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool ProcessHotKey(valuetype Terminal.Gui.KeyEvent keyEvent) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyEvent" Type="Terminal.Gui.KeyEvent" />
      </Parameters>
      <Docs>
        <param name="keyEvent">Contains the details about the key that produced the event.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ProcessKey">
      <MemberSignature Language="C#" Value="public override bool ProcessKey (Terminal.Gui.KeyEvent keyEvent);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool ProcessKey(valuetype Terminal.Gui.KeyEvent keyEvent) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyEvent" Type="Terminal.Gui.KeyEvent" />
      </Parameters>
      <Docs>
        <param name="keyEvent">Contains the details about the key that produced the event.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Redraw">
      <MemberSignature Language="C#" Value="public virtual void Redraw (Terminal.Gui.Rect region);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Redraw(valuetype Terminal.Gui.Rect region) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="region" Type="Terminal.Gui.Rect" />
      </Parameters>
      <Docs>
        <param name="region">The region to redraw, this is relative to the view itself.</param>
        <summary>
            Performs a redraw of this view and its subviews, only redraws the views that have been flagged for a re-display.
            </summary>
        <remarks>
          <para>
               Views should set the color that they want to use on entry, as otherwise this will inherit
               the last color that was set globaly on the driver.
            </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public virtual void Remove (Terminal.Gui.View view);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Remove(class Terminal.Gui.View view) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="view" Type="Terminal.Gui.View" />
      </Parameters>
      <Docs>
        <param name="view">To be added.</param>
        <summary>
              Removes a widget from this container.
            </summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="RemoveAll">
      <MemberSignature Language="C#" Value="public virtual void RemoveAll ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveAll() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
              Removes all the widgets from this container.
            </summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="ScreenToView">
      <MemberSignature Language="C#" Value="public Terminal.Gui.Point ScreenToView (int x, int y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype Terminal.Gui.Point ScreenToView(int32 x, int32 y) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Terminal.Gui.Point</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="x">X screen-coordinate point.</param>
        <param name="y">Y screen-coordinate point.</param>
        <summary>
            Converts a point from screen coordinates into the view coordinate space.
            </summary>
        <returns>The mapped point.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetClip">
      <MemberSignature Language="C#" Value="public Terminal.Gui.Rect SetClip (Terminal.Gui.Rect rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype Terminal.Gui.Rect SetClip(valuetype Terminal.Gui.Rect rect) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Terminal.Gui.Rect</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="Terminal.Gui.Rect" />
      </Parameters>
      <Docs>
        <param name="rect">Rectangle region to clip into, the region is view-relative.</param>
        <summary>
            Sets the clipping region to the specified region, the region is view-relative
            </summary>
        <returns>The previous clip region.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetFocus">
      <MemberSignature Language="C#" Value="public void SetFocus (Terminal.Gui.View view);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetFocus(class Terminal.Gui.View view) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="view" Type="Terminal.Gui.View" />
      </Parameters>
      <Docs>
        <param name="view">View.</param>
        <summary>
            Focuses the specified sub-view.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetNeedsDisplay">
      <MemberSignature Language="C#" Value="public void SetNeedsDisplay ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetNeedsDisplay() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Invoke to flag that this view needs to be redisplayed, by any code
            that alters the state of the view.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetNeedsDisplay">
      <MemberSignature Language="C#" Value="public void SetNeedsDisplay (Terminal.Gui.Rect region);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetNeedsDisplay(valuetype Terminal.Gui.Rect region) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="region" Type="Terminal.Gui.Rect" />
      </Parameters>
      <Docs>
        <param name="region">The region that must be flagged for repaint.</param>
        <summary>
            Flags the specified rectangle region on this view as needing to be repainted.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Subviews">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IList&lt;Terminal.Gui.View&gt; Subviews { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;class Terminal.Gui.View&gt; Subviews" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;Terminal.Gui.View&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            This returns a list of the subviews contained by this view.
            </summary>
        <value>The subviews.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SuperView">
      <MemberSignature Language="C#" Value="public Terminal.Gui.View SuperView { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Terminal.Gui.View SuperView" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Terminal.Gui.View</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Returns the container for this view, or null if this view has not been added to a container.
            </summary>
        <value>The super view.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:Terminal.Gui.View" />.
            </summary>
        <returns>A <see cref="T:System.String" /> that represents the current <see cref="T:Terminal.Gui.View" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WantMousePositionReports">
      <MemberSignature Language="C#" Value="public virtual bool WantMousePositionReports { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool WantMousePositionReports" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets a value indicating whether this <see cref="T:Terminal.Gui.View" /> want mouse position reports.
            </summary>
        <value>
          <c>true</c> if want mouse position reports; otherwise, <c>false</c>.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Width">
      <MemberSignature Language="C#" Value="public Terminal.Gui.Dim Width { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Terminal.Gui.Dim Width" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Terminal.Gui.Dim</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets the width for the view. This is only used when the LayoutStyle is Computed, if the
            LayoutStyle is set to Absolute, this value is ignored.
            </summary>
        <value>The width.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="X">
      <MemberSignature Language="C#" Value="public Terminal.Gui.Pos X { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Terminal.Gui.Pos X" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Terminal.Gui.Pos</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets the X position for the view (the column).  This is only used when the LayoutStyle is Computed, if the
            LayoutStyle is set to Absolute, this value is ignored.
            </summary>
        <value>The X Position.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Y">
      <MemberSignature Language="C#" Value="public Terminal.Gui.Pos Y { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Terminal.Gui.Pos Y" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Terminal.Gui.Pos</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets the Y position for the view (line).  This is only used when the LayoutStyle is Computed, if the
            LayoutStyle is set to Absolute, this value is ignored.
            </summary>
        <value>The y position (line).</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
